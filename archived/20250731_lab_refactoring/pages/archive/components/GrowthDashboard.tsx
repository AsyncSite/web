import React, { useState, useEffect } from 'react';

// GrowthMetric Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†ïÏùò
interface GrowthMetric {
  label: string;
  value: number;
  unit: string;
  trend: number; // Ï†ÑÏ£º ÎåÄÎπÑ Ï¶ùÍ∞êÎ•†
  icon: string;
}

// ÏÑ±Ïû• ÏßÄÌëú Îç∞Ïù¥ÌÑ∞ (TecoTecoPage.tsxÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
const growthMetrics: GrowthMetric[] = [
  {
    label: 'Ïù¥Î≤à Ï£º Ìï¥Í≤∞ Î¨∏Ï†ú',
    value: 127,
    unit: 'Í∞ú',
    trend: 15,
    icon: 'üìù',
  },
  {
    label: 'ÌôúÎ∞úÌïú Î©§Î≤Ñ',
    value: 24,
    unit: 'Î™Ö',
    trend: 8,
    icon: 'üë•',
  },
  {
    label: 'ÏΩîÎìú Î¶¨Î∑∞',
    value: 89,
    unit: 'Í±¥',
    trend: 23,
    icon: 'üîç',
  },
  {
    label: 'ÌèâÍ∑† Ï∂úÏÑùÎ•†',
    value: 92,
    unit: '%',
    trend: 5,
    icon: 'üìä',
  },
];

const GrowthDashboard: React.FC = () => {
  const [animatedValues, setAnimatedValues] = useState<{ [key: string]: number }>({});

  useEffect(() => {
    // Ïà´Ïûê Ïï†ÎãàÎ©îÏù¥ÏÖò
    growthMetrics.forEach((metric, index) => {
      setTimeout(() => {
        const duration = 2000;
        const start = 0;
        const end = metric.value;
        const startTime = Date.now();

        const animate = () => {
          const now = Date.now();
          const progress = Math.min((now - startTime) / duration, 1);
          const value = Math.floor(start + (end - start) * progress);

          setAnimatedValues((prev) => ({ ...prev, [metric.label]: value }));

          if (progress < 1) {
            requestAnimationFrame(animate);
          }
        };
        animate();
      }, index * 200);
    });
  }, []);

  return (
    <div className="growth-dashboard">
      <h3 className="dashboard-title">üìà Ïù¥Î≤à Ï£º TecoTeco</h3>
      <div className="metrics-grid">
        {growthMetrics.map((metric, index) => (
          <div
            key={metric.label}
            className="metric-card"
            style={{ animationDelay: `${index * 0.1}s` }}
          >
            <div className="metric-icon">{metric.icon}</div>
            <div className="metric-content">
              <div className="metric-value">
                <span className="value-number">{animatedValues[metric.label] || 0}</span>
                <span className="value-unit">{metric.unit}</span>
              </div>
              <p className="metric-label">{metric.label}</p>
              <div className={`metric-trend ${metric.trend > 0 ? 'up' : 'down'}`}>
                {metric.trend > 0 ? '‚Üë' : '‚Üì'} {Math.abs(metric.trend)}%
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default GrowthDashboard;
