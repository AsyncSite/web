{"version":3,"file":"static/js/431.b617dbf1.chunk.js","mappings":"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","sources":["components/lab/spotlight-arena/shared/contexts/SpotlightArenaContext.tsx","components/lab/spotlight-arena/shared/utils/gameUtils.ts","components/lab/spotlight-arena/common/ParticipantInput/ParticipantInput.tsx","components/lab/spotlight-arena/common/GameCard/GameCard.tsx","components/lab/spotlight-arena/games/SnailRace/utils/snailColors.ts","components/lab/spotlight-arena/games/SnailRace/utils/eventDefinitions.ts","components/lab/spotlight-arena/shared/utils/randomUtils.ts","components/lab/spotlight-arena/games/SnailRace/hooks/useGameEngine.ts","components/lab/spotlight-arena/games/SnailRace/components/SnailSprite.tsx","components/lab/spotlight-arena/games/SnailRace/components/TrackBackground.tsx","components/lab/spotlight-arena/games/SnailRace/components/RaceTrack.tsx","components/lab/spotlight-arena/games/SnailRace/components/RaceCountdown.tsx","components/lab/spotlight-arena/games/SnailRace/components/EventNotification.tsx","components/lab/spotlight-arena/games/SnailRace/components/RaceCommentary.tsx","components/lab/spotlight-arena/common/ResultDisplay/ResultDisplay.tsx","components/lab/spotlight-arena/games/SnailRace/SnailRaceGame.tsx","components/lab/spotlight-arena/games/SnailRace/utils/commentaryMessages.ts","pages/lab/spotlight-arena/SpotlightArenaPage.tsx"],"sourcesContent":["import { createContext, useContext, useState, ReactNode } from 'react';\nimport { Participant, GameSettings, GameInfo } from '../types';\n\ninterface SpotlightArenaContextType {\n  // State\n  participants: Participant[];\n  gameSettings: GameSettings;\n  selectedGame: GameInfo | null;\n  currentStep: 'lobby' | 'arcade' | 'game';\n  \n  // Actions\n  setParticipants: (participants: Participant[]) => void;\n  updateGameSettings: (settings: Partial<GameSettings>) => void;\n  selectGame: (game: GameInfo) => void;\n  setCurrentStep: (step: 'lobby' | 'arcade' | 'game') => void;\n  resetGame: () => void;\n}\n\nconst SpotlightArenaContext = createContext<SpotlightArenaContextType | undefined>(undefined);\n\nexport const useSpotlightArena = () => {\n  const context = useContext(SpotlightArenaContext);\n  if (!context) {\n    throw new Error('useSpotlightArena must be used within SpotlightArenaProvider');\n  }\n  return context;\n};\n\ninterface SpotlightArenaProviderProps {\n  children: ReactNode;\n}\n\nexport const SpotlightArenaProvider: React.FC<SpotlightArenaProviderProps> = ({ children }) => {\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [gameSettings, setGameSettings] = useState<GameSettings>({\n    participants: [],\n    winnerCount: 1,\n    allowDuplicates: false\n  });\n  const [selectedGame, setSelectedGame] = useState<GameInfo | null>(null);\n  const [currentStep, setCurrentStep] = useState<'lobby' | 'arcade' | 'game'>('lobby');\n\n  const updateGameSettings = (settings: Partial<GameSettings>) => {\n    setGameSettings(prev => ({ ...prev, ...settings }));\n  };\n\n  const selectGame = (game: GameInfo) => {\n    setSelectedGame(game);\n  };\n\n  const resetGame = () => {\n    setParticipants([]);\n    setGameSettings({\n      participants: [],\n      winnerCount: 1,\n      allowDuplicates: false\n    });\n    setSelectedGame(null);\n    setCurrentStep('lobby');\n  };\n\n  const value: SpotlightArenaContextType = {\n    participants,\n    gameSettings,\n    selectedGame,\n    currentStep,\n    setParticipants,\n    updateGameSettings,\n    selectGame,\n    setCurrentStep,\n    resetGame\n  };\n\n  return (\n    <SpotlightArenaContext.Provider value={value}>\n      {children}\n    </SpotlightArenaContext.Provider>\n  );\n};","import { GameInfo } from '../types';\n\n// 게임 목록 데이터\nexport const GAMES_LIST: GameInfo[] = [\n  {\n    id: 'snail-race',\n    name: '예측불허! 달팽이 레이스',\n    description: '느리지만 드라마틱한 레이스',\n    icon: '🐌',\n    tags: ['레이싱', '유머'],\n    minPlayers: 2,\n    maxPlayers: 20,\n    available: true\n  },\n  {\n    id: 'dart-wheel',\n    name: '다트 휠',\n    description: '회전하는 휠에 다트를 던져라',\n    icon: '🎯',\n    tags: ['카지노', '긴장감'],\n    minPlayers: 2,\n    maxPlayers: 30,\n    available: false\n  },\n  {\n    id: 'slot-cascade',\n    name: '슬롯머신 캐스케이드',\n    description: '이름이 쏟아지는 슬롯머신',\n    icon: '🎰',\n    tags: ['카지노', '스릴'],\n    minPlayers: 2,\n    maxPlayers: 50,\n    available: false\n  },\n  {\n    id: 'circus-cannon',\n    name: '서커스 대포',\n    description: '대포에서 발사되는 참가자들',\n    icon: '🎪',\n    tags: ['액션', '스펙터클'],\n    minPlayers: 2,\n    maxPlayers: 15,\n    available: false\n  },\n  {\n    id: 'bubble-pop',\n    name: '버블 팝',\n    description: '마지막까지 남는 버블',\n    icon: '🏹',\n    tags: ['서바이벌', '팝핑'],\n    minPlayers: 2,\n    maxPlayers: 25,\n    available: false\n  },\n  {\n    id: 'masquerade',\n    name: '가면 무도회',\n    description: '스포트라이트를 받을 주인공은?',\n    icon: '🎭',\n    tags: ['미스터리', '드라마'],\n    minPlayers: 2,\n    maxPlayers: 20,\n    available: false\n  }\n];\n\n// 게임 찾기 함수\nexport const findGameById = (gameId: string): GameInfo | undefined => {\n  return GAMES_LIST.find(game => game.id === gameId);\n};\n\n// 카테고리별 게임 필터링\nexport const filterGamesByTag = (tag: string): GameInfo[] => {\n  return GAMES_LIST.filter(game => game.tags.includes(tag));\n};\n\n// 플레이 가능한 게임 필터링\nexport const getPlayableGames = (participantCount: number): GameInfo[] => {\n  return GAMES_LIST.filter(game => \n    game.available &&\n    participantCount >= game.minPlayers &&\n    participantCount <= game.maxPlayers\n  );\n};","import { useState, useEffect, ChangeEvent } from 'react';\nimport { Participant } from '../../shared/types';\nimport './ParticipantInput.css';\n\ninterface ParticipantInputProps {\n  onParticipantsChange: (participants: Participant[]) => void;\n  maxParticipants?: number;\n}\n\nconst ParticipantInput: React.FC<ParticipantInputProps> = ({ \n  onParticipantsChange,\n  maxParticipants = 20 \n}) => {\n  const [inputMode, setInputMode] = useState<'text' | 'number'>('text');\n  const [textInput, setTextInput] = useState('');\n  const [numberRange, setNumberRange] = useState({ start: 1, end: 10 });\n  const [removeDuplicates, setRemoveDuplicates] = useState(true);\n\n  useEffect(() => {\n    const participants = parseParticipants();\n    onParticipantsChange(participants);\n  }, [textInput, numberRange, inputMode, removeDuplicates]);\n\n  const parseParticipants = (): Participant[] => {\n    if (inputMode === 'text') {\n      const names = textInput\n        .split('\\n')\n        .map(name => name.trim())\n        .filter(name => name.length > 0);\n\n      const uniqueNames = removeDuplicates \n        ? Array.from(new Set(names))\n        : names;\n\n      return uniqueNames.slice(0, maxParticipants).map((name, index) => ({\n        id: `participant-${index}`,\n        name,\n        order: index + 1\n      }));\n    } else {\n      const participants: Participant[] = [];\n      const start = Math.max(1, numberRange.start);\n      const end = Math.min(numberRange.end, start + maxParticipants - 1);\n\n      for (let i = start; i <= end; i++) {\n        participants.push({\n          id: `participant-${i}`,\n          name: `${i}번`,\n          order: i\n        });\n      }\n      return participants;\n    }\n  };\n\n  const handleFileUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      const names = content\n        .split(/[\\r\\n,]+/)\n        .map(name => name.trim())\n        .filter(name => name.length > 0);\n      \n      setTextInput(names.join('\\n'));\n      setInputMode('text');\n    };\n    reader.readAsText(file);\n  };\n\n  const currentCount = parseParticipants().length;\n\n  return (\n    <div className=\"participant-input\">\n      <div className=\"input-mode-selector\">\n        <button\n          className={`mode-button ${inputMode === 'text' ? 'active' : ''}`}\n          onClick={() => setInputMode('text')}\n        >\n          <span className=\"mode-icon\">✏️</span>\n          이름 입력\n        </button>\n        <button\n          className={`mode-button ${inputMode === 'number' ? 'active' : ''}`}\n          onClick={() => setInputMode('number')}\n        >\n          <span className=\"mode-icon\">🔢</span>\n          번호 입력\n        </button>\n      </div>\n\n      {inputMode === 'text' ? (\n        <div className=\"text-input-section\">\n          <textarea\n            className=\"participant-textarea\"\n            placeholder=\"한 줄에 한 명씩 입력해주세요...\"\n            value={textInput}\n            onChange={(e) => setTextInput(e.target.value)}\n            rows={10}\n          />\n          \n          <div className=\"input-options\">\n            <label className=\"checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={removeDuplicates}\n                onChange={(e) => setRemoveDuplicates(e.target.checked)}\n              />\n              중복 이름 자동 제거\n            </label>\n            \n            <label className=\"file-upload-label\">\n              <input\n                type=\"file\"\n                accept=\".txt,.csv\"\n                onChange={handleFileUpload}\n                style={{ display: 'none' }}\n              />\n              <span className=\"file-upload-button\">📁 파일 업로드</span>\n            </label>\n          </div>\n        </div>\n      ) : (\n        <div className=\"number-input-section\">\n          <div className=\"number-range\">\n            <div className=\"range-input\">\n              <label>시작 번호</label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                value={numberRange.start}\n                onChange={(e) => setNumberRange({\n                  ...numberRange,\n                  start: Number(e.target.value)\n                })}\n              />\n            </div>\n            <span className=\"range-separator\">~</span>\n            <div className=\"range-input\">\n              <label>끝 번호</label>\n              <input\n                type=\"number\"\n                min={numberRange.start}\n                max={numberRange.start + maxParticipants - 1}\n                value={numberRange.end}\n                onChange={(e) => setNumberRange({\n                  ...numberRange,\n                  end: Number(e.target.value)\n                })}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"participant-count\">\n        <span className=\"count-label\">총 참가자:</span>\n        <span className=\"count-number\">{currentCount}명</span>\n        {currentCount > maxParticipants && (\n          <span className=\"count-warning\">\n            (최대 {maxParticipants}명까지만 참가 가능)\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ParticipantInput;","import { GameInfo } from '../../shared/types';\nimport './GameCard.css';\n\ninterface GameCardProps {\n  game: GameInfo;\n  onClick: () => void;\n  participantCount?: number;\n}\n\nconst GameCard: React.FC<GameCardProps> = ({ game, onClick, participantCount = 0 }) => {\n  const isPlayable = game.available && \n    participantCount >= game.minPlayers && \n    participantCount <= game.maxPlayers;\n\n  const getStatusMessage = () => {\n    if (!game.available) return 'Coming Soon';\n    if (participantCount < game.minPlayers) return `최소 ${game.minPlayers}명 필요`;\n    if (participantCount > game.maxPlayers) return `최대 ${game.maxPlayers}명까지`;\n    return null;\n  };\n\n  const statusMessage = getStatusMessage();\n\n  return (\n    <div \n      className={`game-card ${!isPlayable ? 'disabled' : ''} ${!game.available ? 'coming-soon' : ''}`}\n      onClick={isPlayable ? onClick : undefined}\n    >\n      <div className=\"game-card-header\">\n        <div className=\"game-card-icon\">{game.icon}</div>\n        {statusMessage && (\n          <div className=\"game-card-status\">{statusMessage}</div>\n        )}\n      </div>\n      \n      <div className=\"game-card-body\">\n        <h3 className=\"game-card-title\">{game.name}</h3>\n        <p className=\"game-card-description\">{game.description}</p>\n      </div>\n      \n      <div className=\"game-card-footer\">\n        <div className=\"game-card-tags\">\n          {game.tags.map((tag, index) => (\n            <span key={index} className=\"game-card-tag\">{tag}</span>\n          ))}\n        </div>\n        <div className=\"game-card-players\">\n          <span className=\"players-icon\">👥</span>\n          <span className=\"players-range\">{game.minPlayers}-{game.maxPlayers}명</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameCard;","// 달팽이 색상 팔레트 (최대 20개)\nexport const SNAIL_COLORS = [\n  '#FF6B6B', // 빨강\n  '#4ECDC4', // 청록\n  '#45B7D1', // 하늘\n  '#96CEB4', // 민트\n  '#FECA57', // 노랑\n  '#FF9FF3', // 분홍\n  '#54A0FF', // 파랑\n  '#48DBFB', // 연파랑\n  '#A29BFE', // 보라\n  '#FD79A8', // 핑크\n  '#FDCB6E', // 주황\n  '#6C5CE7', // 진보라\n  '#A8E6CF', // 연두\n  '#FFD3B6', // 살구\n  '#FFAAA5', // 코랄\n  '#B4F8C8', // 라임\n  '#FBE9E7', // 연분홍\n  '#C7ECEE', // 연하늘\n  '#778BEB', // 연보라\n  '#F8B500', // 골드\n];\n\n// 색상에 따른 대비 색상 (달팽이 이름표용)\nexport const getContrastColor = (hexColor: string): string => {\n  // 밝은 색상인지 어두운 색상인지 판단\n  const r = parseInt(hexColor.slice(1, 3), 16);\n  const g = parseInt(hexColor.slice(3, 5), 16);\n  const b = parseInt(hexColor.slice(5, 7), 16);\n  \n  const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n  return brightness > 128 ? '#000000' : '#FFFFFF';\n};","import { SnailRaceEvent } from '../../../shared/types';\n\n// 달팽이 레이스 이벤트 정의\nexport const SNAIL_RACE_EVENTS: SnailRaceEvent[] = [\n  {\n    id: 'sparkle-dew',\n    name: '반짝이는 이슬',\n    icon: '🌟',\n    duration: 2000,\n    speedModifier: 2.0,\n    probability: 0.15\n  },\n  {\n    id: 'nap-time',\n    name: '꿀잠 타임',\n    icon: '💤',\n    duration: 1500,\n    speedModifier: 0,\n    probability: 0.15\n  },\n  {\n    id: 'slippery-leaf',\n    name: '미끄러운 나뭇잎',\n    icon: '🍃',\n    duration: 1000,\n    speedModifier: 1.5,\n    probability: 0.20\n  },\n  {\n    id: 'tasty-grass',\n    name: '맛있는 풀잎',\n    icon: '🌿',\n    duration: 2000,\n    speedModifier: 0,\n    probability: 0.10\n  },\n  {\n    id: 'sudden-wind',\n    name: '갑작스런 바람',\n    icon: '💨',\n    duration: 0,\n    speedModifier: -2, // 뒤로 2 units\n    probability: 0.10\n  },\n  {\n    id: 'super-booster',\n    name: '슈퍼 부스터',\n    icon: '🚀',\n    duration: 1000,\n    speedModifier: 3.0,\n    probability: 0.05\n  },\n  {\n    id: 'confused',\n    name: '방향 감각 상실',\n    icon: '🔄',\n    duration: 1500,\n    speedModifier: -0.5, // 뒤로 이동\n    probability: 0.10\n  },\n  {\n    id: 'jump',\n    name: '깜짝 도약',\n    icon: '🏃',\n    duration: 0,\n    speedModifier: 5, // 앞으로 5 units\n    probability: 0.10\n  },\n  {\n    id: 'dance',\n    name: '춤추는 달팽이',\n    icon: '🎵',\n    duration: 1000,\n    speedModifier: 0,\n    probability: 0.05\n  }\n];","// 랜덤 유틸리티 함수들\n\n/**\n * min과 max 사이의 랜덤 정수 반환 (min, max 포함)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * min과 max 사이의 랜덤 실수 반환\n */\nexport const randomFloat = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * 배열에서 랜덤 요소 선택\n */\nexport const randomElement = <T>(array: T[]): T | undefined => {\n  if (array.length === 0) return undefined;\n  return array[randomInt(0, array.length - 1)];\n};\n\n/**\n * 배열 섞기 (Fisher-Yates 알고리즘)\n */\nexport const shuffleArray = <T>(array: T[]): T[] => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = randomInt(0, i);\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\n/**\n * 가중치 기반 랜덤 선택\n */\nexport const weightedRandom = <T>(\n  items: T[],\n  weights: number[]\n): T | undefined => {\n  if (items.length === 0 || items.length !== weights.length) {\n    return undefined;\n  }\n\n  const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n  let random = Math.random() * totalWeight;\n\n  for (let i = 0; i < items.length; i++) {\n    random -= weights[i];\n    if (random <= 0) {\n      return items[i];\n    }\n  }\n\n  return items[items.length - 1];\n};\n\n/**\n * 확률 기반 true/false 반환\n */\nexport const randomChance = (probability: number): boolean => {\n  return Math.random() < probability;\n};","import { useState, useRef, useCallback, useEffect } from 'react';\nimport { Snail, SnailRaceEvent, Participant } from '../../../shared/types';\nimport { randomFloat, randomElement, randomChance } from '../../../shared/utils/randomUtils';\n\ninterface UseGameEngineProps {\n  initialSnails: Snail[];\n  trackLength: number;\n  winnerCount: number;\n  events: SnailRaceEvent[];\n  onRaceComplete: (winners: Participant[]) => void;\n  onEventTrigger: (snailId: string, eventName: string) => void;\n}\n\nconst useGameEngine = ({\n  initialSnails,\n  trackLength,\n  winnerCount,\n  events,\n  onRaceComplete,\n  onEventTrigger\n}: UseGameEngineProps) => {\n  const [snails, setSnails] = useState<Snail[]>(initialSnails);\n  const animationFrameRef = useRef<number>();\n  const lastTimeRef = useRef<number>(0);\n  const lastEventTimeRef = useRef<number>(0);\n  const winnersRef = useRef<Participant[]>([]);\n  const isRunningRef = useRef(false);\n\n  // 게임 루프\n  const gameLoop = useCallback((timestamp: number) => {\n    if (!isRunningRef.current) return;\n\n    const deltaTime = timestamp - lastTimeRef.current;\n    \n    // 첫 프레임이거나 deltaTime이 너무 큰 경우 처리\n    if (lastTimeRef.current === 0 || deltaTime > 1000) {\n      lastTimeRef.current = timestamp;\n      animationFrameRef.current = requestAnimationFrame(gameLoop);\n      return;\n    }\n    \n    lastTimeRef.current = timestamp;\n\n    // 달팽이 위치 업데이트\n    setSnails(prevSnails => {\n      const updatedSnails = prevSnails.map(snail => {\n        // 이미 완주한 달팽이는 건너뛰기\n        if (snail.position >= trackLength) {\n          return snail;\n        }\n\n        let speed = snail.baseSpeed;\n\n        // 이벤트 효과 적용\n        if (snail.activeEvent) {\n          const eventElapsed = timestamp - snail.activeEvent.startTime;\n          if (eventElapsed < snail.activeEvent.event.duration) {\n            speed *= snail.activeEvent.event.speedModifier;\n          } else {\n            // 이벤트 종료\n            snail = { ...snail, activeEvent: undefined };\n          }\n        }\n\n        // 랜덤 속도 변화 (자연스러움)\n        speed += randomFloat(-0.2, 0.2);\n        speed = Math.max(0.1, speed); // 최소 속도 보장\n\n        // 위치 업데이트 (deltaTime을 1000으로 나누어 초 단위로 변환)\n        const movement = speed * (deltaTime / 1000) * 10;\n        let newPosition = snail.position + movement;\n        \n        // 즉시 효과 이벤트 처리 (바람, 점프 등)\n        if (snail.activeEvent && snail.activeEvent.event.duration === 0) {\n          newPosition += snail.activeEvent.event.speedModifier;\n          snail = { ...snail, activeEvent: undefined };\n        }\n\n        newPosition = Math.max(0, Math.min(trackLength, newPosition));\n\n        // 완주 체크\n        if (newPosition >= trackLength && snail.position < trackLength) {\n          if (winnersRef.current.length < winnerCount) {\n            winnersRef.current.push(snail.participant);\n          }\n        }\n\n        return { ...snail, position: newPosition };\n      });\n\n      // 승자가 정해졌는지 확인\n      if (winnersRef.current.length >= winnerCount) {\n        isRunningRef.current = false;\n        onRaceComplete(winnersRef.current);\n      }\n\n      return updatedSnails;\n    });\n\n    // 랜덤 이벤트 발생 (2-4초마다)\n    if (timestamp - lastEventTimeRef.current > randomFloat(2000, 4000)) {\n      lastEventTimeRef.current = timestamp;\n      \n      // setSnails 내부에서 이벤트 처리\n      setSnails(prevSnails => {\n        // 아직 완주하지 않은 달팽이 중 선택\n        const activeSnails = prevSnails.filter(s => s.position < trackLength && !s.activeEvent);\n        \n        if (activeSnails.length > 0 && randomChance(0.7)) { // 70% 확률로 이벤트 발생\n          const targetSnail = randomElement(activeSnails);\n          const event = randomElement(events);\n          \n          if (targetSnail && event) {\n            onEventTrigger(targetSnail.id, event.name);\n            \n            return prevSnails.map(s => \n              s.id === targetSnail.id \n                ? { \n                    ...s, \n                    activeEvent: { \n                      event, \n                      startTime: timestamp \n                    } \n                  }\n                : s\n            );\n          }\n        }\n        \n        return prevSnails;\n      });\n    }\n\n    animationFrameRef.current = requestAnimationFrame(gameLoop);\n  }, [trackLength, winnerCount, events, onRaceComplete, onEventTrigger]);\n\n  const startRace = useCallback(() => {\n    isRunningRef.current = true;\n    winnersRef.current = [];\n    lastTimeRef.current = 0; // 0으로 초기화하여 첫 프레임 감지\n    lastEventTimeRef.current = performance.now();\n    animationFrameRef.current = requestAnimationFrame(gameLoop);\n  }, [gameLoop]);\n\n  const stopRace = useCallback(() => {\n    isRunningRef.current = false;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, []);\n\n  // 클린업\n  useEffect(() => {\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  // 초기 달팽이 설정\n  useEffect(() => {\n    // baseSpeed가 설정된 초기값 사용\n    setSnails(initialSnails.map(snail => ({\n      ...snail,\n      baseSpeed: snail.baseSpeed || (2 + Math.random() * 3)\n    })));\n  }, [initialSnails]);\n\n  return {\n    snails,\n    startRace,\n    stopRace\n  };\n};\n\nexport default useGameEngine;","import React from 'react';\nimport { Group, Path, Circle, Text, Line } from 'react-konva';\nimport { Snail } from '../../../shared/types';\nimport { getContrastColor } from '../utils/snailColors';\n\ninterface SnailSpriteProps {\n  snail: Snail;\n  x: number;\n  y: number;\n  isFinished: boolean;\n  rank?: number;\n}\n\nconst SnailSprite: React.FC<SnailSpriteProps> = ({ snail, x, y, isFinished, rank }) => {\n  const scale = 0.8;\n  \n  // 달팽이 몸통 경로 (단순화)\n  const bodyPath = `\n    M -30,0\n    Q -20,-15 0,-15\n    Q 20,-15 25,0\n    Q 20,15 0,15\n    Q -20,15 -30,0\n    Z\n  `;\n\n  // 달팽이 껍질 경로 (나선형)\n  const shellPath = `\n    M 0,0\n    m -15,0\n    a 15,15 0 1,1 30,0\n    a 15,15 0 1,1 -30,0\n    m 5,0\n    a 10,10 0 1,1 20,0\n    a 10,10 0 1,1 -20,0\n    m 5,0\n    a 5,5 0 1,1 10,0\n    a 5,5 0 1,1 -10,0\n  `;\n\n  return (\n    <Group x={x} y={y} opacity={isFinished ? 0.7 : 1}>\n      {/* 점액 자국 */}\n      {!isFinished && (\n        <Line\n          points={[-40, 0, -30, 0]}\n          stroke={snail.color}\n          strokeWidth={8}\n          opacity={0.3}\n          lineCap=\"round\"\n        />\n      )}\n\n      {/* 달팽이 그룹 */}\n      <Group scaleX={scale} scaleY={scale}>\n        {/* 몸통 */}\n        <Path\n          data={bodyPath}\n          fill={snail.color}\n          stroke=\"#333\"\n          strokeWidth={2}\n          opacity={0.8}\n        />\n\n        {/* 껍질 */}\n        <Group x={5} y={0}>\n          <Path\n            data={shellPath}\n            fill={snail.color}\n            stroke=\"#333\"\n            strokeWidth={2}\n          />\n          {/* 껍질 무늬 */}\n          <Circle\n            x={0}\n            y={0}\n            radius={12}\n            fill={snail.color}\n            opacity={0.7}\n          />\n        </Group>\n\n        {/* 더듬이 (정적) */}\n        <Group x={-25} y={-10}>\n          <Line\n            points={[0, 0, -5, -8]}\n            stroke=\"#333\"\n            strokeWidth={2}\n            lineCap=\"round\"\n          />\n          <Circle\n            x={-5}\n            y={-8}\n            radius={3}\n            fill=\"#333\"\n          />\n        </Group>\n        <Group x={-25} y={-5}>\n          <Line\n            points={[0, 0, -5, -8]}\n            stroke=\"#333\"\n            strokeWidth={2}\n            lineCap=\"round\"\n          />\n          <Circle\n            x={-5}\n            y={-8}\n            radius={3}\n            fill=\"#333\"\n          />\n        </Group>\n\n        {/* 눈 */}\n        <Circle\n          x={-20}\n          y={-5}\n          radius={2}\n          fill=\"#fff\"\n        />\n        <Circle\n          x={-20}\n          y={0}\n          radius={2}\n          fill=\"#fff\"\n        />\n      </Group>\n\n      {/* 이름표 */}\n      <Text\n        x={-30}\n        y={-35}\n        text={snail.participant.name}\n        fontSize={14}\n        fill={getContrastColor(snail.color)}\n        align=\"center\"\n        width={60}\n      />\n\n      {/* 이벤트 아이콘 */}\n      {snail.activeEvent && (\n        <Group x={0} y={-20}>\n          <Circle\n            radius={15}\n            fill=\"white\"\n            stroke={snail.color}\n            strokeWidth={2}\n          />\n          <Text\n            x={-10}\n            y={-10}\n            text={snail.activeEvent.event.icon}\n            fontSize={18}\n            width={20}\n            height={20}\n            align=\"center\"\n            verticalAlign=\"middle\"\n          />\n        </Group>\n      )}\n\n      {/* 순위 표시 */}\n      {isFinished && rank && (\n        <Group x={30} y={-10}>\n          <Circle\n            radius={18}\n            fill=\"#F44336\"\n            stroke=\"#fff\"\n            strokeWidth={2}\n          />\n          <Text\n            x={-15}\n            y={-10}\n            text={`${rank}등`}\n            fontSize={16}\n            fontStyle=\"bold\"\n            fill=\"white\"\n            width={30}\n            align=\"center\"\n          />\n        </Group>\n      )}\n    </Group>\n  );\n};\n\nexport default SnailSprite;","import React from 'react';\nimport { Group, Rect, Circle, Path, Text } from 'react-konva';\n\ninterface TrackBackgroundProps {\n  width: number;\n  height: number;\n  laneCount: number;\n}\n\nconst TrackBackground: React.FC<TrackBackgroundProps> = ({ width, height, laneCount }) => {\n  const trackPaddingY = 80;\n  const trackAreaHeight = height - (trackPaddingY * 2);\n\n  // 응원하는 캐릭터들 (트랙 영역에 맞게 조정)\n  const cheeringPositions = [\n    { x: 50, y: trackPaddingY + trackAreaHeight * 0.25 },\n    { x: 50, y: trackPaddingY + trackAreaHeight * 0.5 },\n    { x: 50, y: trackPaddingY + trackAreaHeight * 0.75 },\n    { x: width - 50, y: trackPaddingY + trackAreaHeight * 0.25 },\n    { x: width - 50, y: trackPaddingY + trackAreaHeight * 0.5 },\n    { x: width - 50, y: trackPaddingY + trackAreaHeight * 0.75 },\n  ];\n\n  const cheeringEmojis = ['🐰', '🐸', '🦋', '🐝', '🐞', '🦗'];\n\n  return (\n    <Group>\n      {/* 잔디 배경 그라데이션 효과 */}\n      <Rect\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        fillLinearGradientStartPoint={{ x: 0, y: 0 }}\n        fillLinearGradientEndPoint={{ x: 0, y: height }}\n        fillLinearGradientColorStops={[0, '#E8F5E9', 1, '#C8E6C9']}\n      />\n\n      {/* 잔디 텍스처 - 성능을 위해 개수 감소 */}\n      {Array.from({ length: 10 }).map((_, i) => (\n        <Path\n          key={`grass-${i}`}\n          x={Math.random() * width}\n          y={Math.random() * height}\n          data=\"M0,0 L-2,-5 L0,-8 L2,-5 Z\"\n          fill=\"#81C784\"\n          opacity={0.3}\n          rotation={Math.random() * 360}\n        />\n      ))}\n\n      {/* 응원하는 캐릭터 - 정적으로 표시 (성능 최적화) */}\n      {cheeringPositions.map((pos, index) => (\n        <Text\n          key={`cheering-${index}`}\n          x={pos.x - 15}\n          y={pos.y - 15}\n          text={cheeringEmojis[index % cheeringEmojis.length]}\n          fontSize={30}\n        />\n      ))}\n\n    </Group>\n  );\n};\n\nexport default TrackBackground;","import React, { useRef, useEffect, useState } from 'react';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport { SnailRaceState, Participant } from '../../../shared/types';\nimport { SNAIL_RACE_EVENTS } from '../utils/eventDefinitions';\nimport useGameEngine from '../hooks/useGameEngine';\nimport SnailSprite from './SnailSprite';\nimport TrackBackground from './TrackBackground';\nimport './RaceTrack.css';\n\ninterface RaceTrackProps {\n  gameState: SnailRaceState;\n  isPlaying: boolean;\n  onRaceComplete: (winners: Participant[]) => void;\n  onEventTrigger: (snailId: string, eventName: string) => void;\n}\n\nconst RaceTrack: React.FC<RaceTrackProps> = ({\n  gameState,\n  isPlaying,\n  onRaceComplete,\n  onEventTrigger\n}) => {\n  const stageRef = useRef<any>(null);\n  const [finishedSnails, setFinishedSnails] = useState<string[]>([]);\n  const trackWidth = 1000;\n  const trackPaddingY = 80; // 상하 패딩 추가\n  // 달팽이 수에 따라 트랙 높이 동적 조정\n  const snailCount = gameState.snails.length;\n  const minLaneHeight = 60; // 최소 레인 높이\n  const calculatedHeight = Math.max(600, snailCount * minLaneHeight);\n  const trackHeight = calculatedHeight + (trackPaddingY * 2);\n  const laneHeight = (trackHeight - trackPaddingY * 2) / snailCount;\n  const trackStartX = 100;\n  const trackEndX = trackWidth - 100;\n  const trackDistance = trackEndX - trackStartX;\n\n  const { snails, startRace, stopRace } = useGameEngine({\n    initialSnails: gameState.snails,\n    trackLength: gameState.trackLength,\n    winnerCount: gameState.settings.winnerCount,\n    events: SNAIL_RACE_EVENTS,\n    onRaceComplete,\n    onEventTrigger\n  });\n\n  useEffect(() => {\n    if (isPlaying) {\n      startRace();\n    } else {\n      stopRace();\n    }\n  }, [isPlaying, startRace, stopRace]);\n\n  // 완주한 달팽이 추적\n  useEffect(() => {\n    const newFinishedSnails = snails\n      .filter(snail => snail.position >= gameState.trackLength)\n      .map(snail => snail.id)\n      .filter(id => !finishedSnails.includes(id));\n    \n    if (newFinishedSnails.length > 0) {\n      setFinishedSnails(prev => [...prev, ...newFinishedSnails]);\n    }\n  }, [snails, gameState.trackLength, finishedSnails]);\n\n  const getSnailX = (position: number) => {\n    return trackStartX + (position / gameState.trackLength) * trackDistance;\n  };\n\n  return (\n    <div className=\"race-track-container\">\n      <Stage width={trackWidth} height={trackHeight} ref={stageRef}>\n        {/* 배경 레이어 */}\n        <Layer>\n          <TrackBackground \n            width={trackWidth} \n            height={trackHeight} \n            laneCount={gameState.snails.length}\n          />\n          \n          {/* 레인 구분선 */}\n          {gameState.snails.map((_, index) => (\n            <Line\n              key={`lane-${index}`}\n              points={[trackStartX, trackPaddingY + (index + 1) * laneHeight, trackEndX, trackPaddingY + (index + 1) * laneHeight]}\n              stroke=\"#C8E6C9\"\n              strokeWidth={2}\n              dash={[10, 5]}\n            />\n          ))}\n\n          {/* 시작선 */}\n          <Line\n            points={[trackStartX, trackPaddingY, trackStartX, trackHeight - trackPaddingY]}\n            stroke=\"#4CAF50\"\n            strokeWidth={4}\n          />\n          <Text\n            x={trackStartX - 80}\n            y={trackHeight / 2 - 20}\n            text=\"START\"\n            fontSize={20}\n            fontStyle=\"bold\"\n            fill=\"#4CAF50\"\n            rotation={-90}\n          />\n\n          {/* 결승선 */}\n          <Line\n            points={[trackEndX, trackPaddingY, trackEndX, trackHeight - trackPaddingY]}\n            stroke=\"#F44336\"\n            strokeWidth={4}\n          />\n          <Text\n            x={trackEndX + 20}\n            y={trackHeight / 2 - 20}\n            text=\"FINISH\"\n            fontSize={20}\n            fontStyle=\"bold\"\n            fill=\"#F44336\"\n            rotation={-90}\n          />\n        </Layer>\n\n        {/* 달팽이 레이어 */}\n        <Layer>\n          {snails.map((snail, index) => {\n            const snailX = getSnailX(snail.position);\n            // 각 레인의 정확한 중앙 위치 계산\n            const laneTop = trackPaddingY + index * laneHeight;\n            const snailY = laneTop + laneHeight / 2;\n            const isFinished = snail.position >= gameState.trackLength;\n            \n            // 완주 순위 계산\n            const rank = isFinished ? finishedSnails.indexOf(snail.id) + 1 : 0;\n\n            return (\n              <SnailSprite\n                key={snail.id}\n                snail={snail}\n                x={snailX}\n                y={snailY}\n                isFinished={isFinished}\n                rank={rank || undefined}\n              />\n            );\n          })}\n        </Layer>\n\n        {/* 진행 상황 레이어 */}\n        <Layer>\n          {snails.map((snail, index) => {\n            const progress = (snail.position / gameState.trackLength) * 100;\n            // 진행 바를 레인 하단 근처에 배치\n            const laneTop = trackPaddingY + index * laneHeight;\n            const barY = laneTop + laneHeight - 15;\n\n            return (\n              <React.Fragment key={`progress-${snail.id}`}>\n                {/* 진행 바 배경 */}\n                <Rect\n                  x={trackStartX}\n                  y={barY}\n                  width={trackDistance}\n                  height={5}\n                  fill=\"#E0E0E0\"\n                  cornerRadius={2.5}\n                />\n                {/* 진행 바 */}\n                <Rect\n                  x={trackStartX}\n                  y={barY}\n                  width={(trackDistance * progress) / 100}\n                  height={5}\n                  fill={snail.color}\n                  cornerRadius={2.5}\n                />\n              </React.Fragment>\n            );\n          })}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default RaceTrack;","import { useState, useEffect } from 'react';\nimport './RaceCountdown.css';\n\ninterface RaceCountdownProps {\n  onComplete: () => void;\n}\n\nconst RaceCountdown: React.FC<RaceCountdownProps> = ({ onComplete }) => {\n  const [count, setCount] = useState(3);\n\n  useEffect(() => {\n    if (count > 0) {\n      const timer = setTimeout(() => {\n        setCount(count - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else {\n      const timer = setTimeout(() => {\n        onComplete();\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [count, onComplete]);\n\n  return (\n    <div className=\"race-countdown-overlay\">\n      <div className=\"countdown-content\">\n        {count > 0 ? (\n          <div className=\"countdown-number\">{count}</div>\n        ) : (\n          <div className=\"countdown-go\">GO!</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RaceCountdown;","import './EventNotification.css';\n\ninterface EventNotificationProps {\n  snailName: string;\n  eventName: string;\n}\n\nconst EventNotification: React.FC<EventNotificationProps> = ({ snailName, eventName }) => {\n  return (\n    <div className=\"event-notification\">\n      <div className=\"event-content\">\n        <span className=\"event-snail\">{snailName}</span>\n        <span className=\"event-text\">{eventName}!</span>\n      </div>\n    </div>\n  );\n};\n\nexport default EventNotification;","import React, { useState, useEffect } from 'react';\nimport './RaceCommentary.css';\n\ninterface CommentaryMessage {\n  id: string;\n  text: string;\n  timestamp: number;\n}\n\ninterface RaceCommentaryProps {\n  messages: CommentaryMessage[];\n}\n\nconst RaceCommentary: React.FC<RaceCommentaryProps> = ({ messages }) => {\n  const [displayedMessages, setDisplayedMessages] = useState<CommentaryMessage[]>([]);\n\n  useEffect(() => {\n    // 최신 5개 메시지만 표시\n    setDisplayedMessages(messages.slice(-5));\n  }, [messages]);\n\n  return (\n    <div className=\"race-commentary\">\n      <div className=\"commentary-header\">\n        <span className=\"commentary-icon\">📢</span>\n        <span className=\"commentary-title\">실시간 중계</span>\n      </div>\n      <div className=\"commentary-messages\">\n        {displayedMessages.map((message) => (\n          <div \n            key={message.id} \n            className=\"commentary-message\"\n            style={{\n              animation: 'commentarySlideIn 0.5s ease-out'\n            }}\n          >\n            {message.text}\n          </div>\n        ))}\n        {displayedMessages.length === 0 && (\n          <div className=\"commentary-message\">\n            레이스가 곧 시작됩니다...\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RaceCommentary;","import { useEffect, useState } from 'react';\nimport { Participant } from '../../shared/types';\nimport './ResultDisplay.css';\n\ninterface ResultDisplayProps {\n  winners: Participant[];\n  gameName: string;\n  onReplay?: () => void;\n  onNewGame?: () => void;\n  onGoHome?: () => void;\n}\n\nconst ResultDisplay: React.FC<ResultDisplayProps> = ({\n  winners,\n  gameName,\n  onReplay,\n  onNewGame,\n  onGoHome\n}) => {\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [copiedToClipboard, setCopiedToClipboard] = useState(false);\n\n  useEffect(() => {\n    setShowConfetti(true);\n    const timer = setTimeout(() => setShowConfetti(false), 5000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const copyResults = () => {\n    const resultText = `🎊 ${gameName} 추첨 결과 🎊\\n\\n` +\n      winners.map((winner, index) => {\n        const rank = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}등`;\n        return `${rank} ${winner.name}`;\n      }).join('\\n');\n\n    navigator.clipboard.writeText(resultText);\n    setCopiedToClipboard(true);\n    setTimeout(() => setCopiedToClipboard(false), 2000);\n  };\n\n  const getRankEmoji = (index: number) => {\n    switch (index) {\n      case 0: return '🥇';\n      case 1: return '🥈';\n      case 2: return '🥉';\n      default: return `${index + 1}등`;\n    }\n  };\n\n  return (\n    <div className=\"result-display\">\n      {showConfetti && <div className=\"confetti-container\" />}\n      \n      <div className=\"result-content\">\n        <h2 className=\"result-title\">🎊 축하합니다! 🎊</h2>\n        \n        <div className=\"winners-list\">\n          {winners.map((winner, index) => (\n            <div \n              key={winner.id} \n              className={`winner-item rank-${index + 1}`}\n              style={{ animationDelay: `${index * 0.2}s` }}\n            >\n              <span className=\"winner-rank\">{getRankEmoji(index)}</span>\n              <span className=\"winner-name\">{winner.name}</span>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"result-actions\">\n          <button\n            className=\"result-button copy-button\"\n            onClick={copyResults}\n          >\n            {copiedToClipboard ? '✅ 복사됨!' : '📋 결과 복사'}\n          </button>\n          \n          {onReplay && (\n            <button\n              className=\"result-button replay-button\"\n              onClick={onReplay}\n            >\n              🔄 다시 추첨\n            </button>\n          )}\n          \n          {onNewGame && (\n            <button\n              className=\"result-button new-game-button\"\n              onClick={onNewGame}\n            >\n              🎮 다른 게임\n            </button>\n          )}\n          \n          {onGoHome && (\n            <button\n              className=\"result-button home-button\"\n              onClick={onGoHome}\n            >\n              🏠 처음으로\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultDisplay;","import { useState, useEffect, useCallback } from 'react';\nimport { Participant, SnailRaceState, Snail } from '../../shared/types';\nimport { SNAIL_COLORS } from './utils/snailColors';\nimport { getEventCommentary } from './utils/commentaryMessages';\nimport RaceTrack from './components/RaceTrack';\nimport RaceCountdown from './components/RaceCountdown';\nimport EventNotification from './components/EventNotification';\nimport RaceCommentary from './components/RaceCommentary';\nimport ResultDisplay from '../../common/ResultDisplay';\nimport './SnailRaceGame.css';\n\ninterface SnailRaceGameProps {\n  participants: Participant[];\n  winnerCount: number;\n  onBack: () => void;\n  onReplay: () => void;\n  onNewGame: () => void;\n}\n\nconst SnailRaceGame: React.FC<SnailRaceGameProps> = ({\n  participants,\n  winnerCount,\n  onBack,\n  onReplay,\n  onNewGame\n}) => {\n  const [gameState, setGameState] = useState<SnailRaceState>({\n    status: 'waiting',\n    winners: [],\n    settings: {\n      participants,\n      winnerCount,\n      allowDuplicates: false\n    },\n    snails: [],\n    trackLength: 100,\n    elapsedTime: 0,\n    events: []\n  });\n\n  const [showCountdown, setShowCountdown] = useState(false);\n  const [currentEvent, setCurrentEvent] = useState<{ snailId: string; eventName: string } | null>(null);\n  const [commentaryMessages, setCommentaryMessages] = useState<Array<{ id: string; text: string; timestamp: number }>>([]);\n\n  // 게임 초기화\n  useEffect(() => {\n    const snails: Snail[] = participants.map((participant, index) => ({\n      id: participant.id,\n      participant,\n      position: 0,\n      speed: 0,\n      baseSpeed: 2 + Math.random() * 3, // 2.0 ~ 5.0\n      color: SNAIL_COLORS[index % SNAIL_COLORS.length],\n      activeEvent: undefined\n    }));\n\n    setGameState(prev => ({ ...prev, snails }));\n  }, [participants]);\n\n  const handleStartGame = () => {\n    setShowCountdown(true);\n  };\n\n  const handleCountdownComplete = () => {\n    setShowCountdown(false);\n    setGameState(prev => ({ ...prev, status: 'playing' }));\n    addCommentary('🏁 레이스가 시작되었습니다! 모든 달팽이들이 출발합니다!');\n  };\n\n  const addCommentary = useCallback((text: string) => {\n    setCommentaryMessages(prev => [...prev, {\n      id: `msg-${Date.now()}-${Math.random()}`,\n      text,\n      timestamp: Date.now()\n    }]);\n  }, []);\n\n  const handleRaceComplete = (winners: Participant[]) => {\n    setGameState(prev => ({ \n      ...prev, \n      status: 'finished',\n      winners \n    }));\n  };\n\n  const handleEventTrigger = (snailId: string, eventName: string) => {\n    const snail = gameState.snails.find(s => s.id === snailId);\n    if (snail) {\n      setCurrentEvent({ snailId, eventName });\n      setTimeout(() => setCurrentEvent(null), 2000);\n      \n      // 중계 메시지 추가\n      const commentary = getEventCommentary(snail.participant.name, eventName);\n      addCommentary(commentary);\n    }\n  };\n\n  if (gameState.status === 'finished') {\n    return (\n      <ResultDisplay\n        winners={gameState.winners}\n        gameName=\"달팽이 레이스\"\n        onReplay={onReplay}\n        onNewGame={onNewGame}\n        onGoHome={onBack}\n      />\n    );\n  }\n\n  return (\n    <div className=\"snail-race-game\">\n      <div className=\"game-header\">\n        <button className=\"back-button\" onClick={onBack}>\n          ← 뒤로가기\n        </button>\n        <h2 className=\"game-title\">🐌 달팽이 레이스</h2>\n      </div>\n\n      <div className=\"game-content\">\n        {showCountdown && (\n          <RaceCountdown onComplete={handleCountdownComplete} />\n        )}\n\n        {currentEvent && (\n          <EventNotification\n            snailName={gameState.snails.find(s => s.id === currentEvent.snailId)?.participant.name || ''}\n            eventName={currentEvent.eventName}\n          />\n        )}\n\n        <RaceTrack\n          gameState={gameState}\n          isPlaying={gameState.status === 'playing'}\n          onRaceComplete={handleRaceComplete}\n          onEventTrigger={handleEventTrigger}\n        />\n\n        <RaceCommentary messages={commentaryMessages} />\n\n        {gameState.status === 'waiting' && (\n          <div className=\"game-controls\">\n            <button \n              className=\"start-button sa-button sa-button-primary\"\n              onClick={handleStartGame}\n            >\n              🏁 레이스 시작하기\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SnailRaceGame;","// 실시간 중계 메시지 템플릿\nexport const getEventCommentary = (snailName: string, eventName: string): string => {\n  const templates: { [key: string]: string[] } = {\n    '반짝이는 이슬': [\n      `${snailName} 달팽이가 반짝이는 이슬을 먹고 가속합니다!`,\n      `오! ${snailName} 달팽이가 마법의 이슬로 스피드업!`,\n      `${snailName} 달팽이, 이슬의 힘으로 날아갑니다!`\n    ],\n    '꿀잠 타임': [\n      `${snailName} 달팽이가 꿀잠에 빠졌습니다...`,\n      `이런! ${snailName} 달팽이가 낮잠을 자네요!`,\n      `${snailName} 달팽이, 잠시 휴식 타임입니다.`\n    ],\n    '미끄러운 나뭇잎': [\n      `${snailName} 달팽이가 나뭇잎을 타고 미끄러집니다!`,\n      `우와! ${snailName} 달팽이의 나뭇잎 서핑!`,\n      `${snailName} 달팽이, 나뭇잎 익스프레스 탑승!`\n    ],\n    '맛있는 풀잎': [\n      `${snailName} 달팽이가 맛있는 풀잎을 발견했네요!`,\n      `${snailName} 달팽이, 간식 타임입니다~`,\n      `냠냠! ${snailName} 달팽이가 식사 중입니다.`\n    ],\n    '갑작스런 바람': [\n      `헉! ${snailName} 달팽이가 바람에 날려갑니다!`,\n      `강풍 주의! ${snailName} 달팽이가 뒤로 밀렸습니다!`,\n      `${snailName} 달팽이, 바람과의 싸움에서 패배...`\n    ],\n    '슈퍼 부스터': [\n      `대박! ${snailName} 달팽이가 슈퍼 부스터 발동!`,\n      `${snailName} 달팽이, 로켓 모드 ON!`,\n      `믿을 수 없는 속도! ${snailName} 달팽이가 날아갑니다!`\n    ],\n    '방향 감각 상실': [\n      `어? ${snailName} 달팽이가 방향을 잃었습니다!`,\n      `${snailName} 달팽이, 어디로 가는 거야?`,\n      `혼란스러운 ${snailName} 달팽이, 뒤로 가고 있어요!`\n    ],\n    '깜짝 도약': [\n      `점프! ${snailName} 달팽이의 깜짝 도약!`,\n      `${snailName} 달팽이가 순간이동을 했나요?`,\n      `놀라운 점프력! ${snailName} 달팽이가 앞으로!`\n    ],\n    '춤추는 달팽이': [\n      `${snailName} 달팽이가 춤을 추기 시작했어요!`,\n      `흥겨운 ${snailName} 달팽이의 댄스 타임!`,\n      `${snailName} 달팽이, 음악에 빠졌나 봅니다~`\n    ]\n  };\n\n  const messages = templates[eventName] || [`${snailName} 달팽이에게 무언가 일어났습니다!`];\n  return messages[Math.floor(Math.random() * messages.length)];\n};\n\nexport const getRaceCommentary = (snails: any[], leaders: string[]): string => {\n  const messages = [\n    `${leaders[0]} 달팽이가 선두를 달리고 있습니다!`,\n    `치열한 선두 경쟁! ${leaders.slice(0, 2).join(', ')} 달팽이!`,\n    `박진감 넘치는 레이스가 계속되고 있습니다!`,\n    `${leaders[0]} 달팽이가 앞서나가고 있네요!`,\n    `접전! ${leaders.slice(0, 3).join(', ')} 달팽이가 경쟁 중!`\n  ];\n  \n  return messages[Math.floor(Math.random() * messages.length)];\n};\n\nexport const getFinishCommentary = (winnerName: string, rank: number): string => {\n  if (rank === 1) {\n    return `🎉 ${winnerName} 달팽이가 1등으로 결승선 통과!`;\n  } else if (rank === 2) {\n    return `${winnerName} 달팽이가 2등으로 들어왔습니다!`;\n  } else if (rank === 3) {\n    return `${winnerName} 달팽이, 3등 완주!`;\n  }\n  return `${winnerName} 달팽이가 ${rank}등으로 완주했습니다.`;\n};","import { useState, useEffect } from 'react';\nimport Lottie from 'lottie-react';\nimport { SpotlightArenaProvider } from '../../../components/lab/spotlight-arena/shared/contexts';\nimport { Participant } from '../../../components/lab/spotlight-arena/shared/types';\nimport { GAMES_LIST } from '../../../components/lab/spotlight-arena/shared/utils';\nimport ParticipantInput from '../../../components/lab/spotlight-arena/common/ParticipantInput';\nimport GameCard from '../../../components/lab/spotlight-arena/common/GameCard';\nimport SnailRaceGame from '../../../components/lab/spotlight-arena/games/SnailRace/SnailRaceGame';\nimport snail1Animation from '../../../assets/animations/snail/snail_1.json';\nimport snail2Animation from '../../../assets/animations/snail/snail_2.json';\nimport './SpotlightArenaPage.css';\n\ntype Step = 'lobby' | 'arcade' | 'game';\n\nconst SpotlightArenaContent = () => {\n  const [currentStep, setCurrentStep] = useState<Step>('lobby');\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [winnerCount, setWinnerCount] = useState(1);\n  const [selectedGame, setSelectedGame] = useState<string | null>(null);\n  const [snailAnimation, setSnailAnimation] = useState<any>(null);\n  const [showSnailIntro, setShowSnailIntro] = useState(true);\n  const [gameKey, setGameKey] = useState(0); // 게임 리셋을 위한 key\n\n  const snailAnimations = [snail1Animation, snail2Animation];\n\n  useEffect(() => {\n    // 달팽이 애니메이션 로드 (한 번만 랜덤 선택)\n    if (selectedGame === 'snail-race' && !snailAnimation) {\n      // 랜덤으로 달팽이 애니메이션 선택\n      const randomIndex = Math.floor(Math.random() * snailAnimations.length);\n      setSnailAnimation(snailAnimations[randomIndex]);\n    }\n  }, [selectedGame, snailAnimation, snailAnimations]);\n\n  const handleParticipantsChange = (newParticipants: Participant[]) => {\n    setParticipants(newParticipants);\n  };\n\n  const handleNextToArcade = () => {\n    if (participants.length >= 2) {\n      setCurrentStep('arcade');\n    }\n  };\n\n  const handleGameSelect = (gameId: string) => {\n    setSelectedGame(gameId);\n    setCurrentStep('game');\n  };\n\n  const handleBackToLobby = () => {\n    setCurrentStep('lobby');\n    setSelectedGame(null);\n  };\n\n  const handleBackToArcade = () => {\n    setCurrentStep('arcade');\n    setSelectedGame(null);\n    setSnailAnimation(null); // 애니메이션 초기화하여 다시 선택 시 새로운 랜덤 달팽이 로드\n  };\n\n  return (\n    <div className=\"spotlight-arena\">\n      <div className=\"spotlight-arena-container\">\n        {currentStep === 'lobby' && (\n          <div className=\"lobby-section sa-card\">\n            <h1 className=\"arena-title\">🎮 스포트라이트 아레나</h1>\n            <p className=\"arena-subtitle\">다양한 미니게임으로 추첨을 재미있게!</p>\n            \n            <div className=\"lobby-content\">\n              <div className=\"participant-section\">\n                <h2>👥 참가자 명단</h2>\n                <ParticipantInput \n                  onParticipantsChange={handleParticipantsChange}\n                  maxParticipants={20}\n                />\n              </div>\n              \n              <div className=\"settings-section\">\n                <h2>⚙️ 추첨 설정</h2>\n                <div className=\"setting-item\">\n                  <label>추첨 인원:</label>\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    max={Math.max(1, participants.length)}\n                    value={winnerCount}\n                    onChange={(e) => setWinnerCount(Number(e.target.value))}\n                  />\n                  <span>명</span>\n                </div>\n              </div>\n            </div>\n            \n            <button\n              className=\"next-button sa-button sa-button-primary\"\n              onClick={handleNextToArcade}\n              disabled={participants.length < 2}\n            >\n              다음: 게임 선택하기 ➡️\n            </button>\n          </div>\n        )}\n\n        {currentStep === 'arcade' && (\n          <div className=\"arcade-section sa-card\">\n            <button className=\"back-button\" onClick={handleBackToLobby}>\n              ← 뒤로가기\n            </button>\n            \n            <h1 className=\"arcade-title\">✨ 어떤 게임으로 추첨할까요?</h1>\n            <p className=\"arcade-subtitle\">\n              현재 {participants.length}명이 참가합니다\n            </p>\n            \n            <div className=\"games-grid\">\n              {GAMES_LIST.map(game => (\n                <GameCard\n                  key={game.id}\n                  game={game}\n                  onClick={() => handleGameSelect(game.id)}\n                  participantCount={participants.length}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {currentStep === 'game' && selectedGame === 'snail-race' && (\n          <div className=\"game-section sa-card\">\n            {showSnailIntro ? (\n              <>\n                <button className=\"back-button\" onClick={handleBackToArcade}>\n                  ← 게임 선택으로\n                </button>\n                \n                <div className=\"snail-race-container\">\n                  <h2 className=\"snail-race-title\">🐌 달팽이 레이스</h2>\n                  \n                  <div className=\"snail-animation-wrapper\">\n                    {snailAnimation && (\n                      <div className=\"snail-animation-container\">\n                        <Lottie \n                          animationData={snailAnimation}\n                          loop={true}\n                          autoplay={true}\n                          style={{ width: '300px', height: '300px' }}\n                        />\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"snail-race-info\">\n                    <p className=\"snail-race-description\">\n                      세상에서 가장 느린 레이스, 그러나 가장 예측 불가능한 결과!\n                    </p>\n                    <div className=\"race-details\">\n                      <div className=\"race-detail-item\">\n                        <span className=\"detail-label\">참가자</span>\n                        <span className=\"detail-value\">{participants.length}명</span>\n                      </div>\n                      <div className=\"race-detail-item\">\n                        <span className=\"detail-label\">추첨 인원</span>\n                        <span className=\"detail-value\">{winnerCount}명</span>\n                      </div>\n                    </div>\n                    \n                    <button \n                      className=\"start-race-button sa-button sa-button-primary\"\n                      onClick={() => setShowSnailIntro(false)}\n                    >\n                      🏁 레이스 시작하기\n                    </button>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <SnailRaceGame\n                key={gameKey}\n                participants={participants}\n                winnerCount={winnerCount}\n                onBack={() => {\n                  // 처음으로 (로비로 돌아가기)\n                  setShowSnailIntro(true);\n                  handleBackToLobby();\n                }}\n                onReplay={() => {\n                  // 같은 참가자로 다시 시작\n                  setShowSnailIntro(true);\n                  setGameKey(prev => prev + 1); // key 변경으로 컴포넌트 리마운트\n                  setTimeout(() => setShowSnailIntro(false), 100);\n                }}\n                onNewGame={() => {\n                  // 새로운 게임 선택\n                  setShowSnailIntro(true);\n                  handleBackToArcade();\n                }}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst SpotlightArenaPage = () => {\n  return (\n    <SpotlightArenaProvider>\n      <SpotlightArenaContent />\n    </SpotlightArenaProvider>\n  );\n};\n\nexport default SpotlightArenaPage;"],"names":["SpotlightArenaContext","createContext","undefined","SpotlightArenaProvider","_ref","children","participants","setParticipants","useState","gameSettings","setGameSettings","winnerCount","allowDuplicates","selectedGame","setSelectedGame","currentStep","setCurrentStep","value","updateGameSettings","settings","prev","_objectSpread","selectGame","game","resetGame","_jsx","Provider","GAMES_LIST","id","name","description","icon","tags","minPlayers","maxPlayers","available","onParticipantsChange","maxParticipants","inputMode","setInputMode","textInput","setTextInput","numberRange","setNumberRange","start","end","removeDuplicates","setRemoveDuplicates","useEffect","parseParticipants","names","split","map","trim","filter","length","Array","from","Set","slice","index","concat","order","Math","max","min","i","push","currentCount","_jsxs","className","onClick","placeholder","onChange","e","target","rows","type","checked","accept","event","_event$target$files","file","files","reader","FileReader","onload","_e$target","result","join","readAsText","style","display","Number","participantCount","isPlayable","statusMessage","tag","SNAIL_COLORS","SNAIL_RACE_EVENTS","duration","speedModifier","probability","randomInt","floor","random","randomFloat","randomElement","array","initialSnails","trackLength","events","onRaceComplete","onEventTrigger","snails","setSnails","animationFrameRef","useRef","lastTimeRef","lastEventTimeRef","winnersRef","isRunningRef","gameLoop","useCallback","timestamp","current","deltaTime","requestAnimationFrame","prevSnails","updatedSnails","snail","position","speed","baseSpeed","activeEvent","startTime","movement","newPosition","participant","activeSnails","s","targetSnail","startRace","performance","now","stopRace","cancelAnimationFrame","x","y","isFinished","rank","Group","opacity","Line","points","stroke","color","strokeWidth","lineCap","scaleX","scaleY","Path","data","fill","Circle","radius","Text","text","fontSize","hexColor","parseInt","align","width","height","verticalAlign","fontStyle","laneCount","trackPaddingY","trackAreaHeight","cheeringPositions","cheeringEmojis","Rect","fillLinearGradientStartPoint","fillLinearGradientEndPoint","fillLinearGradientColorStops","_","rotation","pos","gameState","isPlaying","stageRef","finishedSnails","setFinishedSnails","trackWidth","snailCount","trackHeight","laneHeight","trackStartX","trackEndX","useGameEngine","newFinishedSnails","includes","Stage","ref","Layer","TrackBackground","dash","snailX","snailY","indexOf","SnailSprite","progress","barY","React","cornerRadius","onComplete","count","setCount","timer","setTimeout","clearTimeout","snailName","eventName","messages","displayedMessages","setDisplayedMessages","message","animation","winners","gameName","onReplay","onNewGame","onGoHome","showConfetti","setShowConfetti","copiedToClipboard","setCopiedToClipboard","getRankEmoji","winner","animationDelay","copyResults","resultText","navigator","clipboard","writeText","_gameState$snails$fin","onBack","setGameState","status","elapsedTime","showCountdown","setShowCountdown","currentEvent","setCurrentEvent","commentaryMessages","setCommentaryMessages","addCommentary","Date","ResultDisplay","RaceCountdown","handleCountdownComplete","EventNotification","find","snailId","RaceTrack","handleEventTrigger","commentary","getEventCommentary","RaceCommentary","handleStartGame","SpotlightArenaContent","setWinnerCount","snailAnimation","setSnailAnimation","showSnailIntro","setShowSnailIntro","gameKey","setGameKey","snailAnimations","snail1Animation","snail2Animation","randomIndex","handleBackToLobby","handleBackToArcade","ParticipantInput","newParticipants","handleNextToArcade","disabled","GameCard","handleGameSelect","gameId","_Fragment","Lottie","animationData","loop","autoplay","SnailRaceGame","SpotlightArenaPage"],"sourceRoot":""}