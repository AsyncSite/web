{"version":3,"file":"static/js/711.236dd331.chunk.js","mappings":"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","sources":["utilities/spotlight-arena/shared/contexts/SpotlightArenaContext.tsx","utilities/spotlight-arena/shared/utils/gameUtils.ts","utilities/spotlight-arena/common/ParticipantInput/ParticipantInput.tsx","utilities/spotlight-arena/common/GameCard/GameCard.tsx","utilities/spotlight-arena/games/SnailRace/utils/snailColors.ts","utilities/spotlight-arena/shared/services/BaseStorageService.ts","utilities/spotlight-arena/shared/services/GameHistoryService.ts","utilities/spotlight-arena/shared/services/ParticipantStatsService.ts","utilities/spotlight-arena/shared/services/index.ts","utilities/spotlight-arena/games/SnailRace/utils/eventDefinitions.ts","utilities/spotlight-arena/shared/utils/randomUtils.ts","utilities/spotlight-arena/games/SnailRace/hooks/useGameEngine.ts","utilities/spotlight-arena/games/SnailRace/components/SnailSprite.tsx","utilities/spotlight-arena/games/SnailRace/components/TrackBackground.tsx","utilities/spotlight-arena/games/SnailRace/components/RaceTrack.tsx","utilities/spotlight-arena/games/SnailRace/components/RaceCountdown.tsx","utilities/spotlight-arena/games/SnailRace/components/EventNotification.tsx","utilities/spotlight-arena/games/SnailRace/components/RaceCommentary.tsx","utilities/spotlight-arena/common/ResultDisplay/ResultDisplay.tsx","utilities/spotlight-arena/games/SnailRace/SnailRaceGame.tsx","utilities/spotlight-arena/games/SnailRace/utils/commentaryMessages.ts","utilities/spotlight-arena/history/GameHistoryViewer.tsx","utilities/spotlight-arena/stats/components/GlobalStatsCard.tsx","utilities/spotlight-arena/stats/components/TopWinnersCard.tsx","utilities/spotlight-arena/stats/components/GameTypeChart.tsx","utilities/spotlight-arena/stats/components/RecentGamesCard.tsx","utilities/spotlight-arena/stats/components/TimeHeatmap.tsx","utilities/spotlight-arena/stats/components/ParticipantRankings.tsx","utilities/spotlight-arena/stats/StatsDashboard.tsx","utilities/spotlight-arena/shared/utils/statsUtils.ts","pages/lab/spotlight-arena/SpotlightArenaPage.tsx"],"sourcesContent":["import { createContext, useContext, useState, ReactNode } from 'react';\nimport { Participant, GameSettings, GameInfo } from '../types';\n\ninterface SpotlightArenaContextType {\n  // State\n  participants: Participant[];\n  gameSettings: GameSettings;\n  selectedGame: GameInfo | null;\n  currentStep: 'lobby' | 'arcade' | 'game';\n  \n  // Actions\n  setParticipants: (participants: Participant[]) => void;\n  updateGameSettings: (settings: Partial<GameSettings>) => void;\n  selectGame: (game: GameInfo) => void;\n  setCurrentStep: (step: 'lobby' | 'arcade' | 'game') => void;\n  resetGame: () => void;\n}\n\nconst SpotlightArenaContext = createContext<SpotlightArenaContextType | undefined>(undefined);\n\nexport const useSpotlightArena = () => {\n  const context = useContext(SpotlightArenaContext);\n  if (!context) {\n    throw new Error('useSpotlightArena must be used within SpotlightArenaProvider');\n  }\n  return context;\n};\n\ninterface SpotlightArenaProviderProps {\n  children: ReactNode;\n}\n\nexport const SpotlightArenaProvider: React.FC<SpotlightArenaProviderProps> = ({ children }) => {\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [gameSettings, setGameSettings] = useState<GameSettings>({\n    participants: [],\n    winnerCount: 1,\n    allowDuplicates: false\n  });\n  const [selectedGame, setSelectedGame] = useState<GameInfo | null>(null);\n  const [currentStep, setCurrentStep] = useState<'lobby' | 'arcade' | 'game'>('lobby');\n\n  const updateGameSettings = (settings: Partial<GameSettings>) => {\n    setGameSettings(prev => ({ ...prev, ...settings }));\n  };\n\n  const selectGame = (game: GameInfo) => {\n    setSelectedGame(game);\n  };\n\n  const resetGame = () => {\n    setParticipants([]);\n    setGameSettings({\n      participants: [],\n      winnerCount: 1,\n      allowDuplicates: false\n    });\n    setSelectedGame(null);\n    setCurrentStep('lobby');\n  };\n\n  const value: SpotlightArenaContextType = {\n    participants,\n    gameSettings,\n    selectedGame,\n    currentStep,\n    setParticipants,\n    updateGameSettings,\n    selectGame,\n    setCurrentStep,\n    resetGame\n  };\n\n  return (\n    <SpotlightArenaContext.Provider value={value}>\n      {children}\n    </SpotlightArenaContext.Provider>\n  );\n};","import { GameInfo } from '../types';\n\n// 게임 목록 데이터\nexport const GAMES_LIST: GameInfo[] = [\n  {\n    id: 'snail-race',\n    name: '예측불허! 달팽이 레이스',\n    description: '느리지만 드라마틱한 레이스',\n    icon: '🐌',\n    tags: ['레이싱', '유머'],\n    minPlayers: 2,\n    maxPlayers: 20,\n    available: true\n  },\n  {\n    id: 'dart-wheel',\n    name: '다트 휠',\n    description: '회전하는 휠에 다트를 던져라',\n    icon: '🎯',\n    tags: ['카지노', '긴장감'],\n    minPlayers: 2,\n    maxPlayers: 30,\n    available: false\n  },\n  {\n    id: 'slot-cascade',\n    name: '슬롯머신 캐스케이드',\n    description: '이름이 쏟아지는 슬롯머신',\n    icon: '🎰',\n    tags: ['카지노', '스릴'],\n    minPlayers: 2,\n    maxPlayers: 50,\n    available: false\n  },\n  {\n    id: 'circus-cannon',\n    name: '서커스 대포',\n    description: '대포에서 발사되는 참가자들',\n    icon: '🎪',\n    tags: ['액션', '스펙터클'],\n    minPlayers: 2,\n    maxPlayers: 15,\n    available: false\n  },\n  {\n    id: 'bubble-pop',\n    name: '버블 팝',\n    description: '마지막까지 남는 버블',\n    icon: '🏹',\n    tags: ['서바이벌', '팝핑'],\n    minPlayers: 2,\n    maxPlayers: 25,\n    available: false\n  },\n  {\n    id: 'masquerade',\n    name: '가면 무도회',\n    description: '스포트라이트를 받을 주인공은?',\n    icon: '🎭',\n    tags: ['미스터리', '드라마'],\n    minPlayers: 2,\n    maxPlayers: 20,\n    available: false\n  }\n];\n\n// 게임 찾기 함수\nexport const findGameById = (gameId: string): GameInfo | undefined => {\n  return GAMES_LIST.find(game => game.id === gameId);\n};\n\n// 카테고리별 게임 필터링\nexport const filterGamesByTag = (tag: string): GameInfo[] => {\n  return GAMES_LIST.filter(game => game.tags.includes(tag));\n};\n\n// 플레이 가능한 게임 필터링\nexport const getPlayableGames = (participantCount: number): GameInfo[] => {\n  return GAMES_LIST.filter(game => \n    game.available &&\n    participantCount >= game.minPlayers &&\n    participantCount <= game.maxPlayers\n  );\n};","import { useState, useEffect, ChangeEvent } from 'react';\nimport { Participant } from '../../shared/types';\nimport './ParticipantInput.css';\n\ninterface ParticipantInputProps {\n  onParticipantsChange: (participants: Participant[]) => void;\n  maxParticipants?: number;\n}\n\nconst ParticipantInput: React.FC<ParticipantInputProps> = ({ \n  onParticipantsChange,\n  maxParticipants = 20 \n}) => {\n  const [inputMode, setInputMode] = useState<'text' | 'number'>('text');\n  const [textInput, setTextInput] = useState('');\n  const [numberRange, setNumberRange] = useState({ start: 1, end: 10 });\n  const [removeDuplicates, setRemoveDuplicates] = useState(true);\n\n  useEffect(() => {\n    const participants = parseParticipants();\n    onParticipantsChange(participants);\n  }, [textInput, numberRange, inputMode, removeDuplicates]);\n\n  const parseParticipants = (): Participant[] => {\n    if (inputMode === 'text') {\n      const names = textInput\n        .split('\\n')\n        .map(name => name.trim())\n        .filter(name => name.length > 0);\n\n      const uniqueNames = removeDuplicates \n        ? Array.from(new Set(names))\n        : names;\n\n      return uniqueNames.slice(0, maxParticipants).map((name, index) => ({\n        id: `participant-${index}`,\n        name,\n        order: index + 1\n      }));\n    } else {\n      const participants: Participant[] = [];\n      const start = Math.max(1, numberRange.start);\n      const end = Math.min(numberRange.end, start + maxParticipants - 1);\n\n      for (let i = start; i <= end; i++) {\n        participants.push({\n          id: `participant-${i}`,\n          name: `${i}번`,\n          order: i\n        });\n      }\n      return participants;\n    }\n  };\n\n  const handleFileUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      const names = content\n        .split(/[\\r\\n,]+/)\n        .map(name => name.trim())\n        .filter(name => name.length > 0);\n      \n      setTextInput(names.join('\\n'));\n      setInputMode('text');\n    };\n    reader.readAsText(file);\n  };\n\n  const currentCount = parseParticipants().length;\n\n  return (\n    <div className=\"participant-input\">\n      <div className=\"input-mode-selector\">\n        <button\n          className={`mode-button ${inputMode === 'text' ? 'active' : ''}`}\n          onClick={() => setInputMode('text')}\n        >\n          <span className=\"mode-icon\">✏️</span>\n          이름 입력\n        </button>\n        <button\n          className={`mode-button ${inputMode === 'number' ? 'active' : ''}`}\n          onClick={() => setInputMode('number')}\n        >\n          <span className=\"mode-icon\">🔢</span>\n          번호 입력\n        </button>\n      </div>\n\n      {inputMode === 'text' ? (\n        <div className=\"text-input-section\">\n          <textarea\n            className=\"participant-textarea\"\n            placeholder=\"한 줄에 한 명씩 입력해주세요...\"\n            value={textInput}\n            onChange={(e) => setTextInput(e.target.value)}\n            rows={10}\n          />\n          \n          <div className=\"input-options\">\n            <label className=\"checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={removeDuplicates}\n                onChange={(e) => setRemoveDuplicates(e.target.checked)}\n              />\n              중복 이름 자동 제거\n            </label>\n            \n            <label className=\"file-upload-label\">\n              <input\n                type=\"file\"\n                accept=\".txt,.csv\"\n                onChange={handleFileUpload}\n                style={{ display: 'none' }}\n              />\n              <span className=\"file-upload-button\">📁 파일 업로드</span>\n            </label>\n          </div>\n        </div>\n      ) : (\n        <div className=\"number-input-section\">\n          <div className=\"number-range\">\n            <div className=\"range-input\">\n              <label>시작 번호</label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                value={numberRange.start}\n                onChange={(e) => setNumberRange({\n                  ...numberRange,\n                  start: Number(e.target.value)\n                })}\n              />\n            </div>\n            <span className=\"range-separator\">~</span>\n            <div className=\"range-input\">\n              <label>끝 번호</label>\n              <input\n                type=\"number\"\n                min={numberRange.start}\n                max={numberRange.start + maxParticipants - 1}\n                value={numberRange.end}\n                onChange={(e) => setNumberRange({\n                  ...numberRange,\n                  end: Number(e.target.value)\n                })}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"participant-count\">\n        <span className=\"count-label\">총 참가자:</span>\n        <span className=\"count-number\">{currentCount}명</span>\n        {currentCount > maxParticipants && (\n          <span className=\"count-warning\">\n            (최대 {maxParticipants}명까지만 참가 가능)\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ParticipantInput;","import { GameInfo } from '../../shared/types';\nimport './GameCard.css';\n\ninterface GameCardProps {\n  game: GameInfo;\n  onClick: () => void;\n  participantCount?: number;\n}\n\nconst GameCard: React.FC<GameCardProps> = ({ game, onClick, participantCount = 0 }) => {\n  const isPlayable = game.available && \n    participantCount >= game.minPlayers && \n    participantCount <= game.maxPlayers;\n\n  const getStatusMessage = () => {\n    if (!game.available) return 'Coming Soon';\n    if (participantCount < game.minPlayers) return `최소 ${game.minPlayers}명 필요`;\n    if (participantCount > game.maxPlayers) return `최대 ${game.maxPlayers}명까지`;\n    return null;\n  };\n\n  const statusMessage = getStatusMessage();\n\n  return (\n    <div \n      className={`game-card ${!isPlayable ? 'disabled' : ''} ${!game.available ? 'coming-soon' : ''}`}\n      onClick={isPlayable ? onClick : undefined}\n    >\n      <div className=\"game-card-header\">\n        <div className=\"game-card-icon\">{game.icon}</div>\n        {statusMessage && (\n          <div className=\"game-card-status\">{statusMessage}</div>\n        )}\n      </div>\n      \n      <div className=\"game-card-body\">\n        <h3 className=\"game-card-title\">{game.name}</h3>\n        <p className=\"game-card-description\">{game.description}</p>\n      </div>\n      \n      <div className=\"game-card-footer\">\n        <div className=\"game-card-tags\">\n          {game.tags.map((tag, index) => (\n            <span key={index} className=\"game-card-tag\">{tag}</span>\n          ))}\n        </div>\n        <div className=\"game-card-players\">\n          <span className=\"players-icon\">👥</span>\n          <span className=\"players-range\">{game.minPlayers}-{game.maxPlayers}명</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameCard;","// 달팽이 색상 팔레트 (최대 20개)\nexport const SNAIL_COLORS = [\n  '#FF6B6B', // 빨강\n  '#4ECDC4', // 청록\n  '#45B7D1', // 하늘\n  '#96CEB4', // 민트\n  '#FECA57', // 노랑\n  '#FF9FF3', // 분홍\n  '#54A0FF', // 파랑\n  '#48DBFB', // 연파랑\n  '#A29BFE', // 보라\n  '#FD79A8', // 핑크\n  '#FDCB6E', // 주황\n  '#6C5CE7', // 진보라\n  '#A8E6CF', // 연두\n  '#FFD3B6', // 살구\n  '#FFAAA5', // 코랄\n  '#B4F8C8', // 라임\n  '#FBE9E7', // 연분홍\n  '#C7ECEE', // 연하늘\n  '#778BEB', // 연보라\n  '#F8B500', // 골드\n];\n\n// 색상에 따른 대비 색상 (달팽이 이름표용)\nexport const getContrastColor = (hexColor: string): string => {\n  // 밝은 색상인지 어두운 색상인지 판단\n  const r = parseInt(hexColor.slice(1, 3), 16);\n  const g = parseInt(hexColor.slice(3, 5), 16);\n  const b = parseInt(hexColor.slice(5, 7), 16);\n  \n  const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n  return brightness > 128 ? '#000000' : '#FFFFFF';\n};","export abstract class BaseStorageService {\n  protected storageKey: string;\n\n  constructor(storageKey: string) {\n    this.storageKey = storageKey;\n  }\n\n  // 데이터 읽기\n  protected getData<T>(): T | null {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error(`Error reading from localStorage (${this.storageKey}):`, error);\n      return null;\n    }\n  }\n\n  // 데이터 저장\n  protected setData<T>(data: T): boolean {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n      return true;\n    } catch (error) {\n      console.error(`Error writing to localStorage (${this.storageKey}):`, error);\n      // 스토리지 용량 초과 시 오래된 데이터 정리\n      if (error instanceof DOMException && error.name === 'QuotaExceededError') {\n        this.handleQuotaExceeded();\n        // 재시도\n        try {\n          localStorage.setItem(this.storageKey, JSON.stringify(data));\n          return true;\n        } catch (retryError) {\n          console.error('Failed to save after cleanup:', retryError);\n          return false;\n        }\n      }\n      return false;\n    }\n  }\n\n  // 데이터 삭제\n  protected clearData(): void {\n    localStorage.removeItem(this.storageKey);\n  }\n\n  // 스토리지 용량 초과 처리\n  protected abstract handleQuotaExceeded(): void;\n\n  // 스토리지 사용량 확인 (대략적인 크기)\n  protected getStorageSize(): number {\n    const data = localStorage.getItem(this.storageKey);\n    return data ? new Blob([data]).size : 0;\n  }\n\n  // 데이터 유효성 검증\n  protected abstract validateData(data: any): boolean;\n}","import { BaseStorageService } from './BaseStorageService';\nimport { GameHistory, GameResult, GameHistoryFilter, SortOptions } from '../types/storage';\n\nconst STORAGE_KEY = 'spotlight-arena-game-history';\nconst MAX_HISTORY_SIZE = 500; // 최대 저장 게임 수\nconst DEFAULT_DAYS_TO_KEEP = 30; // 기본 보관 기간 (일)\n\nexport class GameHistoryService extends BaseStorageService {\n  private static instance: GameHistoryService;\n\n  private constructor() {\n    super(STORAGE_KEY);\n  }\n\n  static getInstance(): GameHistoryService {\n    if (!GameHistoryService.instance) {\n      GameHistoryService.instance = new GameHistoryService();\n    }\n    return GameHistoryService.instance;\n  }\n\n  // 게임 결과 저장\n  saveGameResult(result: GameResult): string | null {\n    const history = this.getHistory();\n    const newGame: GameHistory = {\n      id: `game-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      gameType: result.gameType,\n      timestamp: result.endTime,\n      participants: result.participants,\n      winners: result.winners,\n      gameConfig: result.gameConfig,\n      duration: result.endTime - result.startTime\n    };\n\n    history.unshift(newGame); // 최신 게임을 앞에 추가\n\n    // 최대 개수 초과 시 오래된 게임 제거\n    if (history.length > MAX_HISTORY_SIZE) {\n      history.splice(MAX_HISTORY_SIZE);\n    }\n\n    const saved = this.setData(history);\n    return saved ? newGame.id : null;\n  }\n\n  // 전체 히스토리 조회\n  getHistory(): GameHistory[] {\n    const data = this.getData<GameHistory[]>();\n    return data || [];\n  }\n\n  // 필터링된 게임 조회\n  getFilteredGames(filter: GameHistoryFilter): GameHistory[] {\n    let history = this.getHistory();\n\n    // 게임 타입 필터\n    if (filter.gameType) {\n      history = history.filter(game => game.gameType === filter.gameType);\n    }\n\n    // 참가자 필터\n    if (filter.participantId) {\n      history = history.filter(game => \n        game.participants.some(p => p.id === filter.participantId)\n      );\n    }\n\n    // 날짜 범위 필터\n    if (filter.startDate) {\n      history = history.filter(game => game.timestamp >= filter.startDate!);\n    }\n    if (filter.endDate) {\n      history = history.filter(game => game.timestamp <= filter.endDate!);\n    }\n\n    // 개수 제한\n    if (filter.limit) {\n      history = history.slice(0, filter.limit);\n    }\n\n    return history;\n  }\n\n  // 최근 게임 조회\n  getRecentGames(limit: number = 10): GameHistory[] {\n    return this.getFilteredGames({ limit });\n  }\n\n  // 게임 타입별 조회\n  getGamesByType(gameType: string, limit?: number): GameHistory[] {\n    return this.getFilteredGames({ gameType, limit });\n  }\n\n  // 특정 게임 조회\n  getGameById(gameId: string): GameHistory | null {\n    const history = this.getHistory();\n    return history.find(game => game.id === gameId) || null;\n  }\n\n  // 참가자의 게임 이력\n  getParticipantGames(participantId: string, limit?: number): GameHistory[] {\n    return this.getFilteredGames({ participantId, limit });\n  }\n\n  // 정렬된 게임 목록\n  getSortedGames(sortOptions: SortOptions, filter?: GameHistoryFilter): GameHistory[] {\n    let games = filter ? this.getFilteredGames(filter) : this.getHistory();\n\n    games.sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortOptions.field) {\n        case 'timestamp':\n          comparison = a.timestamp - b.timestamp;\n          break;\n        case 'gameType':\n          comparison = a.gameType.localeCompare(b.gameType);\n          break;\n        case 'winnerCount':\n          comparison = a.winners.length - b.winners.length;\n          break;\n      }\n\n      return sortOptions.order === 'asc' ? comparison : -comparison;\n    });\n\n    return games;\n  }\n\n  // 오래된 기록 정리\n  clearOldHistory(daysToKeep: number = DEFAULT_DAYS_TO_KEEP): number {\n    const history = this.getHistory();\n    const cutoffDate = Date.now() - (daysToKeep * 24 * 60 * 60 * 1000);\n    \n    const filteredHistory = history.filter(game => game.timestamp >= cutoffDate);\n    const removedCount = history.length - filteredHistory.length;\n\n    if (removedCount > 0) {\n      this.setData(filteredHistory);\n    }\n\n    return removedCount;\n  }\n\n  // 전체 기록 삭제\n  clearAllHistory(): void {\n    this.clearData();\n  }\n\n  // 스토리지 용량 초과 처리\n  protected handleQuotaExceeded(): void {\n    // 가장 오래된 10% 삭제\n    const history = this.getHistory();\n    const keepCount = Math.floor(history.length * 0.9);\n    const newHistory = history.slice(0, keepCount);\n    this.setData(newHistory);\n  }\n\n  // 데이터 유효성 검증\n  protected validateData(data: any): boolean {\n    if (!Array.isArray(data)) return false;\n    \n    return data.every(game => \n      game.id && \n      game.gameType && \n      game.timestamp && \n      Array.isArray(game.participants) && \n      Array.isArray(game.winners)\n    );\n  }\n\n  // 통계 데이터 추출\n  getStatsSummary() {\n    const history = this.getHistory();\n    const gameTypes = new Map<string, number>();\n    \n    history.forEach(game => {\n      gameTypes.set(game.gameType, (gameTypes.get(game.gameType) || 0) + 1);\n    });\n\n    return {\n      totalGames: history.length,\n      gameTypeBreakdown: Object.fromEntries(gameTypes),\n      oldestGame: history[history.length - 1]?.timestamp,\n      newestGame: history[0]?.timestamp\n    };\n  }\n}","import { BaseStorageService } from './BaseStorageService';\nimport { ParticipantStats, GameResult, GameHistory } from '../types/storage';\nimport { Participant } from '../types';\n\nconst STORAGE_KEY = 'spotlight-arena-participant-stats';\nconst MAX_PARTICIPANTS = 1000; // 최대 저장 참가자 수\n\nexport class ParticipantStatsService extends BaseStorageService {\n  private static instance: ParticipantStatsService;\n\n  private constructor() {\n    super(STORAGE_KEY);\n  }\n\n  static getInstance(): ParticipantStatsService {\n    if (!ParticipantStatsService.instance) {\n      ParticipantStatsService.instance = new ParticipantStatsService();\n    }\n    return ParticipantStatsService.instance;\n  }\n\n  // 전체 통계 데이터 조회\n  private getAllStats(): Map<string, ParticipantStats> {\n    const data = this.getData<{ [key: string]: ParticipantStats }>();\n    return new Map(Object.entries(data || {}));\n  }\n\n  // 전체 통계 데이터 저장\n  private saveAllStats(statsMap: Map<string, ParticipantStats>): boolean {\n    const data = Object.fromEntries(statsMap);\n    return this.setData(data);\n  }\n\n  // 게임 결과로 통계 업데이트\n  updateStats(gameResult: GameResult): void {\n    const stats = this.getAllStats();\n    const gameType = gameResult.gameType;\n\n    // 모든 참가자 통계 업데이트\n    gameResult.participants.forEach((participant, index) => {\n      const existingStats = stats.get(participant.id) || this.createInitialStats(participant);\n      \n      // 전체 게임 통계\n      existingStats.totalGames++;\n      existingStats.lastPlayed = gameResult.endTime;\n\n      // 게임별 통계\n      if (!existingStats.gameStats[gameType]) {\n        existingStats.gameStats[gameType] = {\n          played: 0,\n          wins: 0,\n          avgRank: 0,\n          lastPlayed: 0\n        };\n      }\n\n      const gameStats = existingStats.gameStats[gameType];\n      gameStats.played++;\n      gameStats.lastPlayed = gameResult.endTime;\n\n      // 승자인 경우\n      const winnerIndex = gameResult.winners.findIndex(w => w.id === participant.id);\n      if (winnerIndex !== -1) {\n        existingStats.wins++;\n        gameStats.wins++;\n        \n        // 평균 순위 계산 (순위가 있는 경우)\n        const currentRank = winnerIndex + 1;\n        gameStats.avgRank = gameStats.avgRank \n          ? (gameStats.avgRank * (gameStats.played - 1) + currentRank) / gameStats.played\n          : currentRank;\n      }\n\n      // 승률 재계산\n      existingStats.winRate = existingStats.totalGames > 0 \n        ? (existingStats.wins / existingStats.totalGames) * 100 \n        : 0;\n\n      stats.set(participant.id, existingStats);\n    });\n\n    // 저장 공간 관리\n    this.cleanupOldParticipants(stats);\n    \n    this.saveAllStats(stats);\n  }\n\n  // 초기 통계 객체 생성\n  private createInitialStats(participant: Participant): ParticipantStats {\n    return {\n      participantId: participant.id,\n      name: participant.name,\n      totalGames: 0,\n      wins: 0,\n      winRate: 0,\n      gameStats: {},\n      lastPlayed: Date.now(),\n      createdAt: Date.now()\n    };\n  }\n\n  // 특정 참가자 통계 조회\n  getParticipantStats(participantId: string): ParticipantStats | null {\n    const stats = this.getAllStats();\n    return stats.get(participantId) || null;\n  }\n\n  // 이름으로 참가자 검색\n  findParticipantsByName(name: string): ParticipantStats[] {\n    const stats = this.getAllStats();\n    const results: ParticipantStats[] = [];\n    \n    stats.forEach(stat => {\n      if (stat.name.toLowerCase().includes(name.toLowerCase())) {\n        results.push(stat);\n      }\n    });\n\n    return results;\n  }\n\n  // 상위 당첨자 조회\n  getTopWinners(limit: number = 10, gameType?: string): ParticipantStats[] {\n    const stats = Array.from(this.getAllStats().values());\n    \n    // 게임 타입별 필터링\n    const filteredStats = gameType \n      ? stats.filter(s => s.gameStats[gameType] && s.gameStats[gameType].played > 0)\n      : stats;\n\n    // 정렬 (승률 -> 총 승리 수 -> 총 게임 수)\n    filteredStats.sort((a, b) => {\n      if (gameType) {\n        const aWinRate = (a.gameStats[gameType].wins / a.gameStats[gameType].played) * 100;\n        const bWinRate = (b.gameStats[gameType].wins / b.gameStats[gameType].played) * 100;\n        if (aWinRate !== bWinRate) return bWinRate - aWinRate;\n        return b.gameStats[gameType].wins - a.gameStats[gameType].wins;\n      } else {\n        if (a.winRate !== b.winRate) return b.winRate - a.winRate;\n        if (a.wins !== b.wins) return b.wins - a.wins;\n        return b.totalGames - a.totalGames;\n      }\n    });\n\n    return filteredStats.slice(0, limit);\n  }\n\n  // 최근 활동 참가자 조회\n  getRecentParticipants(limit: number = 20): ParticipantStats[] {\n    const stats = Array.from(this.getAllStats().values());\n    \n    stats.sort((a, b) => b.lastPlayed - a.lastPlayed);\n    \n    return stats.slice(0, limit);\n  }\n\n  // 게임별 통계 조회\n  getGameTypeStats(gameType: string): Array<ParticipantStats & { gameSpecificStats: any }> {\n    const stats = Array.from(this.getAllStats().values());\n    \n    return stats\n      .filter(s => s.gameStats[gameType] && s.gameStats[gameType].played > 0)\n      .map(s => ({\n        ...s,\n        gameSpecificStats: s.gameStats[gameType]\n      }))\n      .sort((a, b) => b.gameSpecificStats.wins - a.gameSpecificStats.wins);\n  }\n\n  // 참가자 삭제\n  deleteParticipant(participantId: string): boolean {\n    const stats = this.getAllStats();\n    const deleted = stats.delete(participantId);\n    \n    if (deleted) {\n      this.saveAllStats(stats);\n    }\n    \n    return deleted;\n  }\n\n  // 모든 통계 초기화\n  clearAllStats(): void {\n    this.clearData();\n  }\n\n  // 오래된 참가자 정리 (최근 90일 이내 활동이 없는 경우)\n  private cleanupOldParticipants(stats: Map<string, ParticipantStats>): void {\n    if (stats.size <= MAX_PARTICIPANTS) return;\n\n    const cutoffDate = Date.now() - (90 * 24 * 60 * 60 * 1000); // 90일\n    const statsArray = Array.from(stats.entries());\n    \n    // 최근 활동 순으로 정렬\n    statsArray.sort((a, b) => b[1].lastPlayed - a[1].lastPlayed);\n    \n    // 오래된 참가자 제거\n    for (let i = MAX_PARTICIPANTS; i < statsArray.length; i++) {\n      if (statsArray[i][1].lastPlayed < cutoffDate) {\n        stats.delete(statsArray[i][0]);\n      }\n    }\n  }\n\n  // 스토리지 용량 초과 처리\n  protected handleQuotaExceeded(): void {\n    const stats = this.getAllStats();\n    const statsArray = Array.from(stats.entries());\n    \n    // 최근 활동 순으로 정렬 후 하위 20% 제거\n    statsArray.sort((a, b) => b[1].lastPlayed - a[1].lastPlayed);\n    const keepCount = Math.floor(statsArray.length * 0.8);\n    \n    const newStats = new Map(statsArray.slice(0, keepCount));\n    this.saveAllStats(newStats);\n  }\n\n  // 데이터 유효성 검증\n  protected validateData(data: any): boolean {\n    if (!data || typeof data !== 'object') return false;\n    \n    return Object.values(data).every((stat: any) => \n      stat.participantId &&\n      stat.name &&\n      typeof stat.totalGames === 'number' &&\n      typeof stat.wins === 'number' &&\n      stat.gameStats\n    );\n  }\n\n  // 통계 요약 정보\n  getStatsSummary() {\n    const stats = this.getAllStats();\n    let totalGamesPlayed = 0;\n    let totalWins = 0;\n    const gameTypes = new Set<string>();\n\n    stats.forEach(stat => {\n      totalGamesPlayed += stat.totalGames;\n      totalWins += stat.wins;\n      Object.keys(stat.gameStats).forEach(gameType => gameTypes.add(gameType));\n    });\n\n    return {\n      totalParticipants: stats.size,\n      totalGamesPlayed,\n      totalWins,\n      averageWinRate: stats.size > 0 ? totalWins / totalGamesPlayed * 100 : 0,\n      uniqueGameTypes: gameTypes.size\n    };\n  }\n}","import { GameHistoryService } from './GameHistoryService';\nimport { ParticipantStatsService } from './ParticipantStatsService';\n\nexport { GameHistoryService } from './GameHistoryService';\nexport { ParticipantStatsService } from './ParticipantStatsService';\nexport { BaseStorageService } from './BaseStorageService';\n\n// 싱글톤 인스턴스 export\nexport const gameHistoryService = GameHistoryService.getInstance();\nexport const participantStatsService = ParticipantStatsService.getInstance();","import { SnailRaceEvent } from '../../../shared/types';\n\n// 달팽이 레이스 이벤트 정의\nexport const SNAIL_RACE_EVENTS: SnailRaceEvent[] = [\n  {\n    id: 'sparkle-dew',\n    name: '반짝이는 이슬',\n    icon: '🌟',\n    duration: 2000,\n    speedModifier: 2.0,\n    probability: 0.15\n  },\n  {\n    id: 'nap-time',\n    name: '꿀잠 타임',\n    icon: '💤',\n    duration: 1500,\n    speedModifier: 0,\n    probability: 0.15\n  },\n  {\n    id: 'slippery-leaf',\n    name: '미끄러운 나뭇잎',\n    icon: '🍃',\n    duration: 1000,\n    speedModifier: 1.5,\n    probability: 0.20\n  },\n  {\n    id: 'tasty-grass',\n    name: '맛있는 풀잎',\n    icon: '🌿',\n    duration: 2000,\n    speedModifier: 0,\n    probability: 0.10\n  },\n  {\n    id: 'sudden-wind',\n    name: '갑작스런 바람',\n    icon: '💨',\n    duration: 0,\n    speedModifier: -2, // 뒤로 2 units\n    probability: 0.10\n  },\n  {\n    id: 'super-booster',\n    name: '슈퍼 부스터',\n    icon: '🚀',\n    duration: 1000,\n    speedModifier: 3.0,\n    probability: 0.05\n  },\n  {\n    id: 'confused',\n    name: '방향 감각 상실',\n    icon: '🔄',\n    duration: 1500,\n    speedModifier: -0.5, // 뒤로 이동\n    probability: 0.10\n  },\n  {\n    id: 'jump',\n    name: '깜짝 도약',\n    icon: '🏃',\n    duration: 0,\n    speedModifier: 5, // 앞으로 5 units\n    probability: 0.10\n  },\n  {\n    id: 'dance',\n    name: '춤추는 달팽이',\n    icon: '🎵',\n    duration: 1000,\n    speedModifier: 0,\n    probability: 0.05\n  }\n];","// 랜덤 유틸리티 함수들\n\n/**\n * min과 max 사이의 랜덤 정수 반환 (min, max 포함)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * min과 max 사이의 랜덤 실수 반환\n */\nexport const randomFloat = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * 배열에서 랜덤 요소 선택\n */\nexport const randomElement = <T>(array: T[]): T | undefined => {\n  if (array.length === 0) return undefined;\n  return array[randomInt(0, array.length - 1)];\n};\n\n/**\n * 배열 섞기 (Fisher-Yates 알고리즘)\n */\nexport const shuffleArray = <T>(array: T[]): T[] => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = randomInt(0, i);\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\n/**\n * 가중치 기반 랜덤 선택\n */\nexport const weightedRandom = <T>(\n  items: T[],\n  weights: number[]\n): T | undefined => {\n  if (items.length === 0 || items.length !== weights.length) {\n    return undefined;\n  }\n\n  const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n  let random = Math.random() * totalWeight;\n\n  for (let i = 0; i < items.length; i++) {\n    random -= weights[i];\n    if (random <= 0) {\n      return items[i];\n    }\n  }\n\n  return items[items.length - 1];\n};\n\n/**\n * 확률 기반 true/false 반환\n */\nexport const randomChance = (probability: number): boolean => {\n  return Math.random() < probability;\n};","import { useState, useRef, useCallback, useEffect } from 'react';\nimport { Snail, SnailRaceEvent, Participant } from '../../../shared/types';\nimport { randomFloat, randomElement, randomChance } from '../../../shared/utils/randomUtils';\n\ninterface UseGameEngineProps {\n  initialSnails: Snail[];\n  trackLength: number;\n  winnerCount: number;\n  events: SnailRaceEvent[];\n  onRaceComplete: (winners: Participant[]) => void;\n  onEventTrigger: (snailId: string, eventName: string) => void;\n}\n\nconst useGameEngine = ({\n  initialSnails,\n  trackLength,\n  winnerCount,\n  events,\n  onRaceComplete,\n  onEventTrigger\n}: UseGameEngineProps) => {\n  const [snails, setSnails] = useState<Snail[]>(initialSnails);\n  const animationFrameRef = useRef<number>();\n  const lastTimeRef = useRef<number>(0);\n  const lastEventTimeRef = useRef<number>(0);\n  const winnersRef = useRef<Participant[]>([]);\n  const isRunningRef = useRef(false);\n\n  // 게임 루프\n  const gameLoop = useCallback((timestamp: number) => {\n    if (!isRunningRef.current) return;\n\n    const deltaTime = timestamp - lastTimeRef.current;\n    \n    // 첫 프레임이거나 deltaTime이 너무 큰 경우 처리\n    if (lastTimeRef.current === 0 || deltaTime > 1000) {\n      lastTimeRef.current = timestamp;\n      animationFrameRef.current = requestAnimationFrame(gameLoop);\n      return;\n    }\n    \n    lastTimeRef.current = timestamp;\n\n    // 달팽이 위치 업데이트\n    setSnails(prevSnails => {\n      const updatedSnails = prevSnails.map(snail => {\n        // 이미 완주한 달팽이는 건너뛰기\n        if (snail.position >= trackLength) {\n          return snail;\n        }\n\n        let speed = snail.baseSpeed;\n\n        // 이벤트 효과 적용\n        if (snail.activeEvent) {\n          const eventElapsed = timestamp - snail.activeEvent.startTime;\n          if (eventElapsed < snail.activeEvent.event.duration) {\n            speed *= snail.activeEvent.event.speedModifier;\n          } else {\n            // 이벤트 종료\n            snail = { ...snail, activeEvent: undefined };\n          }\n        }\n\n        // 랜덤 속도 변화 (자연스러움)\n        speed += randomFloat(-0.2, 0.2);\n        speed = Math.max(0.1, speed); // 최소 속도 보장\n\n        // 위치 업데이트 (deltaTime을 1000으로 나누어 초 단위로 변환)\n        const movement = speed * (deltaTime / 1000) * 10;\n        let newPosition = snail.position + movement;\n        \n        // 즉시 효과 이벤트 처리 (바람, 점프 등)\n        if (snail.activeEvent && snail.activeEvent.event.duration === 0) {\n          newPosition += snail.activeEvent.event.speedModifier;\n          snail = { ...snail, activeEvent: undefined };\n        }\n\n        newPosition = Math.max(0, Math.min(trackLength, newPosition));\n\n        // 완주 체크\n        if (newPosition >= trackLength && snail.position < trackLength) {\n          if (winnersRef.current.length < winnerCount) {\n            winnersRef.current.push(snail.participant);\n          }\n        }\n\n        return { ...snail, position: newPosition };\n      });\n\n      // 승자가 정해졌는지 확인\n      if (winnersRef.current.length >= winnerCount) {\n        isRunningRef.current = false;\n        onRaceComplete(winnersRef.current);\n      }\n\n      return updatedSnails;\n    });\n\n    // 랜덤 이벤트 발생 (2-4초마다)\n    if (timestamp - lastEventTimeRef.current > randomFloat(2000, 4000)) {\n      lastEventTimeRef.current = timestamp;\n      \n      // setSnails 내부에서 이벤트 처리\n      setSnails(prevSnails => {\n        // 아직 완주하지 않은 달팽이 중 선택\n        const activeSnails = prevSnails.filter(s => s.position < trackLength && !s.activeEvent);\n        \n        if (activeSnails.length > 0 && randomChance(0.7)) { // 70% 확률로 이벤트 발생\n          const targetSnail = randomElement(activeSnails);\n          const event = randomElement(events);\n          \n          if (targetSnail && event) {\n            onEventTrigger(targetSnail.id, event.name);\n            \n            return prevSnails.map(s => \n              s.id === targetSnail.id \n                ? { \n                    ...s, \n                    activeEvent: { \n                      event, \n                      startTime: timestamp \n                    } \n                  }\n                : s\n            );\n          }\n        }\n        \n        return prevSnails;\n      });\n    }\n\n    animationFrameRef.current = requestAnimationFrame(gameLoop);\n  }, [trackLength, winnerCount, events, onRaceComplete, onEventTrigger]);\n\n  const startRace = useCallback(() => {\n    isRunningRef.current = true;\n    winnersRef.current = [];\n    lastTimeRef.current = 0; // 0으로 초기화하여 첫 프레임 감지\n    lastEventTimeRef.current = performance.now();\n    animationFrameRef.current = requestAnimationFrame(gameLoop);\n  }, [gameLoop]);\n\n  const stopRace = useCallback(() => {\n    isRunningRef.current = false;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, []);\n\n  // 클린업\n  useEffect(() => {\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  // 초기 달팽이 설정\n  useEffect(() => {\n    // baseSpeed가 설정된 초기값 사용\n    setSnails(initialSnails.map(snail => ({\n      ...snail,\n      baseSpeed: snail.baseSpeed || (2 + Math.random() * 3)\n    })));\n  }, [initialSnails]);\n\n  return {\n    snails,\n    startRace,\n    stopRace\n  };\n};\n\nexport default useGameEngine;","import React from 'react';\nimport { Group, Path, Circle, Text, Line } from 'react-konva';\nimport { Snail } from '../../../shared/types';\nimport { getContrastColor } from '../utils/snailColors';\n\ninterface SnailSpriteProps {\n  snail: Snail;\n  x: number;\n  y: number;\n  isFinished: boolean;\n  rank?: number;\n}\n\nconst SnailSprite: React.FC<SnailSpriteProps> = ({ snail, x, y, isFinished, rank }) => {\n  const scale = 0.8;\n  \n  // 달팽이 몸통 경로 (단순화)\n  const bodyPath = `\n    M -30,0\n    Q -20,-15 0,-15\n    Q 20,-15 25,0\n    Q 20,15 0,15\n    Q -20,15 -30,0\n    Z\n  `;\n\n  // 달팽이 껍질 경로 (나선형)\n  const shellPath = `\n    M 0,0\n    m -15,0\n    a 15,15 0 1,1 30,0\n    a 15,15 0 1,1 -30,0\n    m 5,0\n    a 10,10 0 1,1 20,0\n    a 10,10 0 1,1 -20,0\n    m 5,0\n    a 5,5 0 1,1 10,0\n    a 5,5 0 1,1 -10,0\n  `;\n\n  return (\n    <Group x={x} y={y} opacity={isFinished ? 0.7 : 1}>\n      {/* 점액 자국 */}\n      {!isFinished && (\n        <Line\n          points={[-40, 0, -30, 0]}\n          stroke={snail.color}\n          strokeWidth={8}\n          opacity={0.3}\n          lineCap=\"round\"\n        />\n      )}\n\n      {/* 달팽이 그룹 */}\n      <Group scaleX={scale} scaleY={scale}>\n        {/* 몸통 */}\n        <Path\n          data={bodyPath}\n          fill={snail.color}\n          stroke=\"#333\"\n          strokeWidth={2}\n          opacity={0.8}\n        />\n\n        {/* 껍질 */}\n        <Group x={5} y={0}>\n          <Path\n            data={shellPath}\n            fill={snail.color}\n            stroke=\"#333\"\n            strokeWidth={2}\n          />\n          {/* 껍질 무늬 */}\n          <Circle\n            x={0}\n            y={0}\n            radius={12}\n            fill={snail.color}\n            opacity={0.7}\n          />\n        </Group>\n\n        {/* 더듬이 (정적) */}\n        <Group x={-25} y={-10}>\n          <Line\n            points={[0, 0, -5, -8]}\n            stroke=\"#333\"\n            strokeWidth={2}\n            lineCap=\"round\"\n          />\n          <Circle\n            x={-5}\n            y={-8}\n            radius={3}\n            fill=\"#333\"\n          />\n        </Group>\n        <Group x={-25} y={-5}>\n          <Line\n            points={[0, 0, -5, -8]}\n            stroke=\"#333\"\n            strokeWidth={2}\n            lineCap=\"round\"\n          />\n          <Circle\n            x={-5}\n            y={-8}\n            radius={3}\n            fill=\"#333\"\n          />\n        </Group>\n\n        {/* 눈 */}\n        <Circle\n          x={-20}\n          y={-5}\n          radius={2}\n          fill=\"#fff\"\n        />\n        <Circle\n          x={-20}\n          y={0}\n          radius={2}\n          fill=\"#fff\"\n        />\n      </Group>\n\n      {/* 이름표 */}\n      <Text\n        x={-30}\n        y={-35}\n        text={snail.participant.name}\n        fontSize={14}\n        fill={getContrastColor(snail.color)}\n        align=\"center\"\n        width={60}\n      />\n\n      {/* 이벤트 아이콘 */}\n      {snail.activeEvent && (\n        <Group x={0} y={-20}>\n          <Circle\n            radius={15}\n            fill=\"white\"\n            stroke={snail.color}\n            strokeWidth={2}\n          />\n          <Text\n            x={-10}\n            y={-10}\n            text={snail.activeEvent.event.icon}\n            fontSize={18}\n            width={20}\n            height={20}\n            align=\"center\"\n            verticalAlign=\"middle\"\n          />\n        </Group>\n      )}\n\n      {/* 순위 표시 */}\n      {isFinished && rank && (\n        <Group x={30} y={-10}>\n          <Circle\n            radius={18}\n            fill=\"#F44336\"\n            stroke=\"#fff\"\n            strokeWidth={2}\n          />\n          <Text\n            x={-15}\n            y={-10}\n            text={`${rank}등`}\n            fontSize={16}\n            fontStyle=\"bold\"\n            fill=\"white\"\n            width={30}\n            align=\"center\"\n          />\n        </Group>\n      )}\n    </Group>\n  );\n};\n\nexport default SnailSprite;","import React from 'react';\nimport { Group, Rect, Circle, Path, Text } from 'react-konva';\n\ninterface TrackBackgroundProps {\n  width: number;\n  height: number;\n  laneCount: number;\n}\n\nconst TrackBackground: React.FC<TrackBackgroundProps> = ({ width, height, laneCount }) => {\n  const trackPaddingY = 80;\n  const trackAreaHeight = height - (trackPaddingY * 2);\n\n  // 응원하는 캐릭터들 (트랙 영역에 맞게 조정)\n  const cheeringPositions = [\n    { x: 50, y: trackPaddingY + trackAreaHeight * 0.25 },\n    { x: 50, y: trackPaddingY + trackAreaHeight * 0.5 },\n    { x: 50, y: trackPaddingY + trackAreaHeight * 0.75 },\n    { x: width - 50, y: trackPaddingY + trackAreaHeight * 0.25 },\n    { x: width - 50, y: trackPaddingY + trackAreaHeight * 0.5 },\n    { x: width - 50, y: trackPaddingY + trackAreaHeight * 0.75 },\n  ];\n\n  const cheeringEmojis = ['🐰', '🐸', '🦋', '🐝', '🐞', '🦗'];\n\n  return (\n    <Group>\n      {/* 잔디 배경 그라데이션 효과 */}\n      <Rect\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        fillLinearGradientStartPoint={{ x: 0, y: 0 }}\n        fillLinearGradientEndPoint={{ x: 0, y: height }}\n        fillLinearGradientColorStops={[0, '#E8F5E9', 1, '#C8E6C9']}\n      />\n\n      {/* 잔디 텍스처 - 성능을 위해 개수 감소 */}\n      {Array.from({ length: 10 }).map((_, i) => (\n        <Path\n          key={`grass-${i}`}\n          x={Math.random() * width}\n          y={Math.random() * height}\n          data=\"M0,0 L-2,-5 L0,-8 L2,-5 Z\"\n          fill=\"#81C784\"\n          opacity={0.3}\n          rotation={Math.random() * 360}\n        />\n      ))}\n\n      {/* 응원하는 캐릭터 - 정적으로 표시 (성능 최적화) */}\n      {cheeringPositions.map((pos, index) => (\n        <Text\n          key={`cheering-${index}`}\n          x={pos.x - 15}\n          y={pos.y - 15}\n          text={cheeringEmojis[index % cheeringEmojis.length]}\n          fontSize={30}\n        />\n      ))}\n\n    </Group>\n  );\n};\n\nexport default TrackBackground;","import React, { useRef, useEffect, useState } from 'react';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport { SnailRaceState, Participant } from '../../../shared/types';\nimport { SNAIL_RACE_EVENTS } from '../utils/eventDefinitions';\nimport useGameEngine from '../hooks/useGameEngine';\nimport SnailSprite from './SnailSprite';\nimport TrackBackground from './TrackBackground';\nimport './RaceTrack.css';\n\ninterface RaceTrackProps {\n  gameState: SnailRaceState;\n  isPlaying: boolean;\n  onRaceComplete: (winners: Participant[]) => void;\n  onEventTrigger: (snailId: string, eventName: string) => void;\n}\n\nconst RaceTrack: React.FC<RaceTrackProps> = ({\n  gameState,\n  isPlaying,\n  onRaceComplete,\n  onEventTrigger\n}) => {\n  const stageRef = useRef<any>(null);\n  const [finishedSnails, setFinishedSnails] = useState<string[]>([]);\n  const trackWidth = 1000;\n  const trackPaddingY = 80; // 상하 패딩 추가\n  // 달팽이 수에 따라 트랙 높이 동적 조정\n  const snailCount = gameState.snails.length;\n  const minLaneHeight = 60; // 최소 레인 높이\n  const calculatedHeight = Math.max(600, snailCount * minLaneHeight);\n  const trackHeight = calculatedHeight + (trackPaddingY * 2);\n  const laneHeight = (trackHeight - trackPaddingY * 2) / snailCount;\n  const trackStartX = 100;\n  const trackEndX = trackWidth - 100;\n  const trackDistance = trackEndX - trackStartX;\n\n  const { snails, startRace, stopRace } = useGameEngine({\n    initialSnails: gameState.snails,\n    trackLength: gameState.trackLength,\n    winnerCount: gameState.settings.winnerCount,\n    events: SNAIL_RACE_EVENTS,\n    onRaceComplete,\n    onEventTrigger\n  });\n\n  useEffect(() => {\n    if (isPlaying) {\n      startRace();\n    } else {\n      stopRace();\n    }\n  }, [isPlaying, startRace, stopRace]);\n\n  // 완주한 달팽이 추적\n  useEffect(() => {\n    const newFinishedSnails = snails\n      .filter(snail => snail.position >= gameState.trackLength)\n      .map(snail => snail.id)\n      .filter(id => !finishedSnails.includes(id));\n    \n    if (newFinishedSnails.length > 0) {\n      setFinishedSnails(prev => [...prev, ...newFinishedSnails]);\n    }\n  }, [snails, gameState.trackLength, finishedSnails]);\n\n  const getSnailX = (position: number) => {\n    return trackStartX + (position / gameState.trackLength) * trackDistance;\n  };\n\n  return (\n    <div className=\"race-track-container\">\n      <Stage width={trackWidth} height={trackHeight} ref={stageRef}>\n        {/* 배경 레이어 */}\n        <Layer>\n          <TrackBackground \n            width={trackWidth} \n            height={trackHeight} \n            laneCount={gameState.snails.length}\n          />\n          \n          {/* 레인 구분선 */}\n          {gameState.snails.map((_, index) => (\n            <Line\n              key={`lane-${index}`}\n              points={[trackStartX, trackPaddingY + (index + 1) * laneHeight, trackEndX, trackPaddingY + (index + 1) * laneHeight]}\n              stroke=\"#C8E6C9\"\n              strokeWidth={2}\n              dash={[10, 5]}\n            />\n          ))}\n\n          {/* 시작선 */}\n          <Line\n            points={[trackStartX, trackPaddingY, trackStartX, trackHeight - trackPaddingY]}\n            stroke=\"#4CAF50\"\n            strokeWidth={4}\n          />\n          <Text\n            x={trackStartX - 80}\n            y={trackHeight / 2 - 20}\n            text=\"START\"\n            fontSize={20}\n            fontStyle=\"bold\"\n            fill=\"#4CAF50\"\n            rotation={-90}\n          />\n\n          {/* 결승선 */}\n          <Line\n            points={[trackEndX, trackPaddingY, trackEndX, trackHeight - trackPaddingY]}\n            stroke=\"#F44336\"\n            strokeWidth={4}\n          />\n          <Text\n            x={trackEndX + 20}\n            y={trackHeight / 2 - 20}\n            text=\"FINISH\"\n            fontSize={20}\n            fontStyle=\"bold\"\n            fill=\"#F44336\"\n            rotation={-90}\n          />\n        </Layer>\n\n        {/* 달팽이 레이어 */}\n        <Layer>\n          {snails.map((snail, index) => {\n            const snailX = getSnailX(snail.position);\n            // 각 레인의 정확한 중앙 위치 계산\n            const laneTop = trackPaddingY + index * laneHeight;\n            const snailY = laneTop + laneHeight / 2;\n            const isFinished = snail.position >= gameState.trackLength;\n            \n            // 완주 순위 계산\n            const rank = isFinished ? finishedSnails.indexOf(snail.id) + 1 : 0;\n\n            return (\n              <SnailSprite\n                key={snail.id}\n                snail={snail}\n                x={snailX}\n                y={snailY}\n                isFinished={isFinished}\n                rank={rank || undefined}\n              />\n            );\n          })}\n        </Layer>\n\n        {/* 진행 상황 레이어 */}\n        <Layer>\n          {snails.map((snail, index) => {\n            const progress = (snail.position / gameState.trackLength) * 100;\n            // 진행 바를 레인 하단 근처에 배치\n            const laneTop = trackPaddingY + index * laneHeight;\n            const barY = laneTop + laneHeight - 15;\n\n            return (\n              <React.Fragment key={`progress-${snail.id}`}>\n                {/* 진행 바 배경 */}\n                <Rect\n                  x={trackStartX}\n                  y={barY}\n                  width={trackDistance}\n                  height={5}\n                  fill=\"#E0E0E0\"\n                  cornerRadius={2.5}\n                />\n                {/* 진행 바 */}\n                <Rect\n                  x={trackStartX}\n                  y={barY}\n                  width={(trackDistance * progress) / 100}\n                  height={5}\n                  fill={snail.color}\n                  cornerRadius={2.5}\n                />\n              </React.Fragment>\n            );\n          })}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default RaceTrack;","import { useState, useEffect } from 'react';\nimport './RaceCountdown.css';\n\ninterface RaceCountdownProps {\n  onComplete: () => void;\n}\n\nconst RaceCountdown: React.FC<RaceCountdownProps> = ({ onComplete }) => {\n  const [count, setCount] = useState(3);\n\n  useEffect(() => {\n    if (count > 0) {\n      const timer = setTimeout(() => {\n        setCount(count - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else {\n      const timer = setTimeout(() => {\n        onComplete();\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [count, onComplete]);\n\n  return (\n    <div className=\"race-countdown-overlay\">\n      <div className=\"countdown-content\">\n        {count > 0 ? (\n          <div className=\"countdown-number\">{count}</div>\n        ) : (\n          <div className=\"countdown-go\">GO!</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RaceCountdown;","import './EventNotification.css';\n\ninterface EventNotificationProps {\n  snailName: string;\n  eventName: string;\n}\n\nconst EventNotification: React.FC<EventNotificationProps> = ({ snailName, eventName }) => {\n  return (\n    <div className=\"event-notification\">\n      <div className=\"event-content\">\n        <span className=\"event-snail\">{snailName}</span>\n        <span className=\"event-text\">{eventName}!</span>\n      </div>\n    </div>\n  );\n};\n\nexport default EventNotification;","import React, { useState, useEffect } from 'react';\nimport './RaceCommentary.css';\n\ninterface CommentaryMessage {\n  id: string;\n  text: string;\n  timestamp: number;\n}\n\ninterface RaceCommentaryProps {\n  messages: CommentaryMessage[];\n}\n\nconst RaceCommentary: React.FC<RaceCommentaryProps> = ({ messages }) => {\n  const [displayedMessages, setDisplayedMessages] = useState<CommentaryMessage[]>([]);\n\n  useEffect(() => {\n    // 최신 5개 메시지만 표시\n    setDisplayedMessages(messages.slice(-5));\n  }, [messages]);\n\n  return (\n    <div className=\"race-commentary\">\n      <div className=\"commentary-header\">\n        <span className=\"commentary-icon\">📢</span>\n        <span className=\"commentary-title\">실시간 중계</span>\n      </div>\n      <div className=\"commentary-messages\">\n        {displayedMessages.map((message) => (\n          <div \n            key={message.id} \n            className=\"commentary-message\"\n            style={{\n              animation: 'commentarySlideIn 0.5s ease-out'\n            }}\n          >\n            {message.text}\n          </div>\n        ))}\n        {displayedMessages.length === 0 && (\n          <div className=\"commentary-message\">\n            레이스가 곧 시작됩니다...\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RaceCommentary;","import { useEffect, useState } from 'react';\nimport { Participant } from '../../shared/types';\nimport './ResultDisplay.css';\n\ninterface ResultDisplayProps {\n  winners: Participant[];\n  gameName: string;\n  onReplay?: () => void;\n  onNewGame?: () => void;\n  onGoHome?: () => void;\n}\n\nconst ResultDisplay: React.FC<ResultDisplayProps> = ({\n  winners,\n  gameName,\n  onReplay,\n  onNewGame,\n  onGoHome\n}) => {\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [copiedToClipboard, setCopiedToClipboard] = useState(false);\n\n  useEffect(() => {\n    setShowConfetti(true);\n    const timer = setTimeout(() => setShowConfetti(false), 5000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const copyResults = () => {\n    const resultText = `🎊 ${gameName} 추첨 결과 🎊\\n\\n` +\n      winners.map((winner, index) => {\n        const rank = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}등`;\n        return `${rank} ${winner.name}`;\n      }).join('\\n');\n\n    navigator.clipboard.writeText(resultText);\n    setCopiedToClipboard(true);\n    setTimeout(() => setCopiedToClipboard(false), 2000);\n  };\n\n  const getRankEmoji = (index: number) => {\n    switch (index) {\n      case 0: return '🥇';\n      case 1: return '🥈';\n      case 2: return '🥉';\n      default: return `${index + 1}등`;\n    }\n  };\n\n  return (\n    <div className=\"result-display\">\n      {showConfetti && <div className=\"confetti-container\" />}\n      \n      <div className=\"result-content\">\n        <h2 className=\"result-title\">🎊 축하합니다! 🎊</h2>\n        \n        <div className=\"winners-list\">\n          {winners.map((winner, index) => (\n            <div \n              key={winner.id} \n              className={`winner-item rank-${index + 1}`}\n              style={{ animationDelay: `${index * 0.2}s` }}\n            >\n              <span className=\"winner-rank\">{getRankEmoji(index)}</span>\n              <span className=\"winner-name\">{winner.name}</span>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"result-actions\">\n          <button\n            className=\"result-button copy-button\"\n            onClick={copyResults}\n          >\n            {copiedToClipboard ? '✅ 복사됨!' : '📋 결과 복사'}\n          </button>\n          \n          {onReplay && (\n            <button\n              className=\"result-button replay-button\"\n              onClick={onReplay}\n            >\n              🔄 다시 추첨\n            </button>\n          )}\n          \n          {onNewGame && (\n            <button\n              className=\"result-button new-game-button\"\n              onClick={onNewGame}\n            >\n              🎮 다른 게임\n            </button>\n          )}\n          \n          {onGoHome && (\n            <button\n              className=\"result-button home-button\"\n              onClick={onGoHome}\n            >\n              🏠 처음으로\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultDisplay;","import { useState, useEffect, useCallback } from 'react';\nimport { Participant, SnailRaceState, Snail } from '../../shared/types';\nimport { SNAIL_COLORS } from './utils/snailColors';\nimport { getEventCommentary } from './utils/commentaryMessages';\nimport { gameHistoryService, participantStatsService } from '../../shared/services';\nimport { GameResult } from '../../shared/types/storage';\nimport RaceTrack from './components/RaceTrack';\nimport RaceCountdown from './components/RaceCountdown';\nimport EventNotification from './components/EventNotification';\nimport RaceCommentary from './components/RaceCommentary';\nimport ResultDisplay from '../../common/ResultDisplay';\nimport './SnailRaceGame.css';\n\ninterface SnailRaceGameProps {\n  participants: Participant[];\n  winnerCount: number;\n  onBack: () => void;\n  onReplay: () => void;\n  onNewGame: () => void;\n}\n\nconst SnailRaceGame: React.FC<SnailRaceGameProps> = ({\n  participants,\n  winnerCount,\n  onBack,\n  onReplay,\n  onNewGame\n}) => {\n  const [gameState, setGameState] = useState<SnailRaceState>({\n    status: 'waiting',\n    winners: [],\n    settings: {\n      participants,\n      winnerCount,\n      allowDuplicates: false\n    },\n    snails: [],\n    trackLength: 100,\n    elapsedTime: 0,\n    events: []\n  });\n\n  const [showCountdown, setShowCountdown] = useState(false);\n  const [currentEvent, setCurrentEvent] = useState<{ snailId: string; eventName: string } | null>(null);\n  const [commentaryMessages, setCommentaryMessages] = useState<Array<{ id: string; text: string; timestamp: number }>>([]);\n  const [gameStartTime, setGameStartTime] = useState<number>(0);\n\n  // 게임 초기화\n  useEffect(() => {\n    const snails: Snail[] = participants.map((participant, index) => ({\n      id: participant.id,\n      participant,\n      position: 0,\n      speed: 0,\n      baseSpeed: 2 + Math.random() * 3, // 2.0 ~ 5.0\n      color: SNAIL_COLORS[index % SNAIL_COLORS.length],\n      activeEvent: undefined\n    }));\n\n    setGameState(prev => ({ ...prev, snails }));\n  }, [participants]);\n\n  const handleStartGame = () => {\n    setShowCountdown(true);\n  };\n\n  const handleCountdownComplete = () => {\n    setShowCountdown(false);\n    setGameStartTime(Date.now());\n    setGameState(prev => ({ ...prev, status: 'playing' }));\n    addCommentary('🏁 레이스가 시작되었습니다! 모든 달팽이들이 출발합니다!');\n  };\n\n  const addCommentary = useCallback((text: string) => {\n    setCommentaryMessages(prev => [...prev, {\n      id: `msg-${Date.now()}-${Math.random()}`,\n      text,\n      timestamp: Date.now()\n    }]);\n  }, []);\n\n  const handleRaceComplete = (winners: Participant[]) => {\n    // 게임 결과 저장\n    const gameResult: GameResult = {\n      gameType: 'snail-race',\n      participants,\n      winners,\n      gameConfig: {\n        winnerCount,\n        trackLength: gameState.trackLength\n      },\n      startTime: gameStartTime,\n      endTime: Date.now()\n    };\n\n    // 히스토리 및 통계 업데이트\n    try {\n      gameHistoryService.saveGameResult(gameResult);\n      participantStatsService.updateStats(gameResult);\n    } catch (error) {\n      console.error('Failed to save game result:', error);\n    }\n\n    setGameState(prev => ({ \n      ...prev, \n      status: 'finished',\n      winners \n    }));\n  };\n\n  const handleEventTrigger = (snailId: string, eventName: string) => {\n    const snail = gameState.snails.find(s => s.id === snailId);\n    if (snail) {\n      setCurrentEvent({ snailId, eventName });\n      setTimeout(() => setCurrentEvent(null), 2000);\n      \n      // 중계 메시지 추가\n      const commentary = getEventCommentary(snail.participant.name, eventName);\n      addCommentary(commentary);\n    }\n  };\n\n  if (gameState.status === 'finished') {\n    return (\n      <ResultDisplay\n        winners={gameState.winners}\n        gameName=\"달팽이 레이스\"\n        onReplay={onReplay}\n        onNewGame={onNewGame}\n        onGoHome={onBack}\n      />\n    );\n  }\n\n  return (\n    <div className=\"snail-race-game\">\n      <div className=\"game-header\">\n        <button className=\"snail-race-back-button\" onClick={onBack}>\n          ← 뒤로가기\n        </button>\n        <h2 className=\"game-title\">🐌 달팽이 레이스</h2>\n      </div>\n\n      <div className=\"game-content\">\n        {showCountdown && (\n          <RaceCountdown onComplete={handleCountdownComplete} />\n        )}\n\n        {currentEvent && (\n          <EventNotification\n            snailName={gameState.snails.find(s => s.id === currentEvent.snailId)?.participant.name || ''}\n            eventName={currentEvent.eventName}\n          />\n        )}\n\n        <RaceTrack\n          gameState={gameState}\n          isPlaying={gameState.status === 'playing'}\n          onRaceComplete={handleRaceComplete}\n          onEventTrigger={handleEventTrigger}\n        />\n\n        <RaceCommentary messages={commentaryMessages} />\n\n        {gameState.status === 'waiting' && (\n          <div className=\"game-controls\">\n            <button \n              className=\"start-button sa-button sa-button-primary\"\n              onClick={handleStartGame}\n            >\n              🏁 레이스 시작하기\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SnailRaceGame;","// 실시간 중계 메시지 템플릿\nexport const getEventCommentary = (snailName: string, eventName: string): string => {\n  const templates: { [key: string]: string[] } = {\n    '반짝이는 이슬': [\n      `${snailName} 달팽이가 반짝이는 이슬을 먹고 가속합니다!`,\n      `오! ${snailName} 달팽이가 마법의 이슬로 스피드업!`,\n      `${snailName} 달팽이, 이슬의 힘으로 날아갑니다!`\n    ],\n    '꿀잠 타임': [\n      `${snailName} 달팽이가 꿀잠에 빠졌습니다...`,\n      `이런! ${snailName} 달팽이가 낮잠을 자네요!`,\n      `${snailName} 달팽이, 잠시 휴식 타임입니다.`\n    ],\n    '미끄러운 나뭇잎': [\n      `${snailName} 달팽이가 나뭇잎을 타고 미끄러집니다!`,\n      `우와! ${snailName} 달팽이의 나뭇잎 서핑!`,\n      `${snailName} 달팽이, 나뭇잎 익스프레스 탑승!`\n    ],\n    '맛있는 풀잎': [\n      `${snailName} 달팽이가 맛있는 풀잎을 발견했네요!`,\n      `${snailName} 달팽이, 간식 타임입니다~`,\n      `냠냠! ${snailName} 달팽이가 식사 중입니다.`\n    ],\n    '갑작스런 바람': [\n      `헉! ${snailName} 달팽이가 바람에 날려갑니다!`,\n      `강풍 주의! ${snailName} 달팽이가 뒤로 밀렸습니다!`,\n      `${snailName} 달팽이, 바람과의 싸움에서 패배...`\n    ],\n    '슈퍼 부스터': [\n      `대박! ${snailName} 달팽이가 슈퍼 부스터 발동!`,\n      `${snailName} 달팽이, 로켓 모드 ON!`,\n      `믿을 수 없는 속도! ${snailName} 달팽이가 날아갑니다!`\n    ],\n    '방향 감각 상실': [\n      `어? ${snailName} 달팽이가 방향을 잃었습니다!`,\n      `${snailName} 달팽이, 어디로 가는 거야?`,\n      `혼란스러운 ${snailName} 달팽이, 뒤로 가고 있어요!`\n    ],\n    '깜짝 도약': [\n      `점프! ${snailName} 달팽이의 깜짝 도약!`,\n      `${snailName} 달팽이가 순간이동을 했나요?`,\n      `놀라운 점프력! ${snailName} 달팽이가 앞으로!`\n    ],\n    '춤추는 달팽이': [\n      `${snailName} 달팽이가 춤을 추기 시작했어요!`,\n      `흥겨운 ${snailName} 달팽이의 댄스 타임!`,\n      `${snailName} 달팽이, 음악에 빠졌나 봅니다~`\n    ]\n  };\n\n  const messages = templates[eventName] || [`${snailName} 달팽이에게 무언가 일어났습니다!`];\n  return messages[Math.floor(Math.random() * messages.length)];\n};\n\nexport const getRaceCommentary = (snails: any[], leaders: string[]): string => {\n  const messages = [\n    `${leaders[0]} 달팽이가 선두를 달리고 있습니다!`,\n    `치열한 선두 경쟁! ${leaders.slice(0, 2).join(', ')} 달팽이!`,\n    `박진감 넘치는 레이스가 계속되고 있습니다!`,\n    `${leaders[0]} 달팽이가 앞서나가고 있네요!`,\n    `접전! ${leaders.slice(0, 3).join(', ')} 달팽이가 경쟁 중!`\n  ];\n  \n  return messages[Math.floor(Math.random() * messages.length)];\n};\n\nexport const getFinishCommentary = (winnerName: string, rank: number): string => {\n  if (rank === 1) {\n    return `🎉 ${winnerName} 달팽이가 1등으로 결승선 통과!`;\n  } else if (rank === 2) {\n    return `${winnerName} 달팽이가 2등으로 들어왔습니다!`;\n  } else if (rank === 3) {\n    return `${winnerName} 달팽이, 3등 완주!`;\n  }\n  return `${winnerName} 달팽이가 ${rank}등으로 완주했습니다.`;\n};","import { useState, useEffect } from 'react';\nimport { gameHistoryService } from '../shared/services';\nimport { GameHistory, GameHistoryFilter } from '../shared/types/storage';\nimport './GameHistoryViewer.css';\n\ninterface GameHistoryViewerProps {\n  onBack: () => void;\n  onSelectParticipant?: (participantId: string) => void;\n}\n\nconst GameHistoryViewer: React.FC<GameHistoryViewerProps> = ({ onBack, onSelectParticipant }) => {\n  const [history, setHistory] = useState<GameHistory[]>([]);\n  const [filter, setFilter] = useState<GameHistoryFilter>({});\n  const [selectedGame, setSelectedGame] = useState<GameHistory | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadHistory();\n  }, [filter]);\n\n  const loadHistory = () => {\n    setIsLoading(true);\n    try {\n      const games = filter && Object.keys(filter).length > 0\n        ? gameHistoryService.getFilteredGames(filter)\n        : gameHistoryService.getRecentGames(50);\n      setHistory(games);\n    } catch (error) {\n      console.error('Failed to load history:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatDate = (timestamp: number) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatDuration = (duration: number) => {\n    const seconds = Math.floor(duration / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}분 ${remainingSeconds}초`;\n  };\n\n  const getGameTypeIcon = (gameType: string) => {\n    switch (gameType) {\n      case 'snail-race': return '🐌';\n      case 'slot-machine': return '🎰';\n      case 'dart-wheel': return '🎯';\n      default: return '🎮';\n    }\n  };\n\n  const getGameTypeName = (gameType: string) => {\n    switch (gameType) {\n      case 'snail-race': return '달팽이 레이스';\n      case 'slot-machine': return '슬롯머신';\n      case 'dart-wheel': return '다트 휠';\n      default: return gameType;\n    }\n  };\n\n  const handleClearHistory = () => {\n    if (window.confirm('모든 게임 기록을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {\n      gameHistoryService.clearAllHistory();\n      loadHistory();\n    }\n  };\n\n  return (\n    <div className=\"game-history-viewer\">\n      <div className=\"history-header\">\n        <button className=\"back-button\" onClick={onBack}>\n          ← 돌아가기\n        </button>\n        <h2>게임 히스토리</h2>\n        <button className=\"clear-button\" onClick={handleClearHistory}>\n          🗑️ 전체 삭제\n        </button>\n      </div>\n\n      <div className=\"history-filters\">\n        <select \n          value={filter.gameType || ''}\n          onChange={(e) => setFilter({ ...filter, gameType: e.target.value || undefined })}\n        >\n          <option value=\"\">모든 게임</option>\n          <option value=\"snail-race\">달팽이 레이스</option>\n          <option value=\"slot-machine\">슬롯머신</option>\n          <option value=\"dart-wheel\">다트 휠</option>\n        </select>\n\n        <input\n          type=\"date\"\n          onChange={(e) => {\n            const date = e.target.value ? new Date(e.target.value).getTime() : undefined;\n            setFilter({ ...filter, startDate: date });\n          }}\n        />\n\n        <button onClick={() => setFilter({})}>필터 초기화</button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading\">불러오는 중...</div>\n      ) : history.length === 0 ? (\n        <div className=\"empty-state\">\n          <p>게임 기록이 없습니다.</p>\n          <p>게임을 플레이하면 여기에 기록이 표시됩니다.</p>\n        </div>\n      ) : (\n        <div className=\"history-list\">\n          {history.map(game => (\n            <div \n              key={game.id} \n              className=\"history-item\"\n              onClick={() => setSelectedGame(game)}\n            >\n              <div className=\"game-icon\">\n                {getGameTypeIcon(game.gameType)}\n              </div>\n              <div className=\"game-info\">\n                <div className=\"game-title\">\n                  {getGameTypeName(game.gameType)}\n                </div>\n                <div className=\"game-meta\">\n                  {formatDate(game.timestamp)} • {game.participants.length}명 참가 • {formatDuration(game.duration)}\n                </div>\n              </div>\n              <div className=\"winners-preview\">\n                🏆 {game.winners.map(w => w.name).join(', ')}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {selectedGame && (\n        <div className=\"game-detail-modal\" onClick={() => setSelectedGame(null)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <h3>{getGameTypeIcon(selectedGame.gameType)} {getGameTypeName(selectedGame.gameType)}</h3>\n            <p className=\"game-date\">{formatDate(selectedGame.timestamp)}</p>\n            \n            <div className=\"detail-section\">\n              <h4>🏆 당첨자</h4>\n              <ul>\n                {selectedGame.winners.map((winner, index) => (\n                  <li key={winner.id}>\n                    {index + 1}등: {winner.name}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"detail-section\">\n              <h4>👥 전체 참가자</h4>\n              <div className=\"participants-grid\">\n                {selectedGame.participants.map(p => (\n                  <span \n                    key={p.id} \n                    className={`participant-chip ${selectedGame.winners.some(w => w.id === p.id) ? 'winner' : ''}`}\n                    onClick={() => onSelectParticipant?.(p.id)}\n                  >\n                    {p.name}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"detail-section\">\n              <h4>📊 게임 정보</h4>\n              <p>진행 시간: {formatDuration(selectedGame.duration)}</p>\n              <p>추첨 인원: {selectedGame.gameConfig.winnerCount}명</p>\n            </div>\n\n            <button className=\"close-button\" onClick={() => setSelectedGame(null)}>\n              닫기\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameHistoryViewer;","import React from 'react';\nimport { GlobalStats } from '../../shared/types/storage';\nimport './StatsComponents.css';\n\ninterface GlobalStatsCardProps {\n  stats: GlobalStats;\n  periodStats: {\n    gamesPlayed: number;\n    uniqueParticipants: Set<string>;\n    popularGames: { [key: string]: number };\n  };\n  avgDuration: number;\n}\n\nconst GlobalStatsCard: React.FC<GlobalStatsCardProps> = ({ stats, periodStats, avgDuration }) => {\n  const formatDuration = (ms: number) => {\n    const minutes = Math.floor(ms / 60000);\n    const seconds = Math.floor((ms % 60000) / 1000);\n    return `${minutes}분 ${seconds}초`;\n  };\n\n  return (\n    <div className=\"stats-card global-stats-card\">\n      <h3>🌍 전체 통계</h3>\n      \n      <div className=\"stats-grid-internal\">\n        <div className=\"stat-item\">\n          <div className=\"stat-value\">{stats.totalGamesPlayed.toLocaleString()}</div>\n          <div className=\"stat-label\">총 게임 수</div>\n        </div>\n        \n        <div className=\"stat-item\">\n          <div className=\"stat-value\">{stats.totalParticipants.toLocaleString()}</div>\n          <div className=\"stat-label\">총 참가자 수</div>\n        </div>\n        \n        <div className=\"stat-item\">\n          <div className=\"stat-value\">{periodStats.gamesPlayed}</div>\n          <div className=\"stat-label\">기간 내 게임</div>\n        </div>\n        \n        <div className=\"stat-item\">\n          <div className=\"stat-value\">{periodStats.uniqueParticipants.size}</div>\n          <div className=\"stat-label\">활성 참가자</div>\n        </div>\n      </div>\n\n      <div className=\"additional-stats\">\n        <div className=\"stat-row\">\n          <span className=\"stat-label\">평균 게임 시간:</span>\n          <span className=\"stat-value-inline\">{formatDuration(avgDuration)}</span>\n        </div>\n        \n        <div className=\"stat-row\">\n          <span className=\"stat-label\">가장 인기 있는 게임:</span>\n          <span className=\"stat-value-inline\">{getGameTypeName(stats.mostPlayedGame)}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst getGameTypeName = (gameType: string) => {\n  switch (gameType) {\n    case 'snail-race': return '🐌 달팽이 레이스';\n    case 'slot-machine': return '🎰 슬롯머신';\n    case 'dart-wheel': return '🎯 다트 휠';\n    default: return gameType;\n  }\n};\n\nexport default GlobalStatsCard;","import React from 'react';\nimport { ParticipantStats } from '../../shared/types/storage';\nimport './StatsComponents.css';\n\ninterface TopWinnersCardProps {\n  winners: ParticipantStats[];\n  onSelectParticipant: (participantId: string) => void;\n  gameType?: string;\n}\n\nconst TopWinnersCard: React.FC<TopWinnersCardProps> = ({ \n  winners, \n  onSelectParticipant,\n  gameType \n}) => {\n  const getRankEmoji = (index: number) => {\n    switch (index) {\n      case 0: return '🥇';\n      case 1: return '🥈';\n      case 2: return '🥉';\n      default: return `${index + 1}위`;\n    }\n  };\n\n  const getWinRate = (stats: ParticipantStats) => {\n    if (gameType && stats.gameStats[gameType]) {\n      const gameStats = stats.gameStats[gameType];\n      return gameStats.played > 0 \n        ? ((gameStats.wins / gameStats.played) * 100).toFixed(1)\n        : '0.0';\n    }\n    return stats.winRate.toFixed(1);\n  };\n\n  const getWins = (stats: ParticipantStats) => {\n    if (gameType && stats.gameStats[gameType]) {\n      return stats.gameStats[gameType].wins;\n    }\n    return stats.wins;\n  };\n\n  const getGames = (stats: ParticipantStats) => {\n    if (gameType && stats.gameStats[gameType]) {\n      return stats.gameStats[gameType].played;\n    }\n    return stats.totalGames;\n  };\n\n  return (\n    <div className=\"stats-card top-winners-card\">\n      <h3>🏆 상위 당첨자</h3>\n      \n      {winners.length === 0 ? (\n        <div className=\"empty-state\">\n          아직 기록이 없습니다.\n        </div>\n      ) : (\n        <div className=\"winners-list\">\n          {winners.map((winner, index) => (\n            <div \n              key={winner.participantId}\n              className=\"winner-item\"\n              onClick={() => onSelectParticipant(winner.participantId)}\n            >\n              <div className=\"winner-rank\">{getRankEmoji(index)}</div>\n              <div className=\"winner-info\">\n                <div className=\"winner-name\">{winner.name}</div>\n                <div className=\"winner-stats\">\n                  <span className=\"win-rate\">{getWinRate(winner)}%</span>\n                  <span className=\"win-count\">\n                    {getWins(winner)}승 / {getGames(winner)}게임\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TopWinnersCard;","import React from 'react';\nimport './StatsComponents.css';\n\ninterface GameTypeChartProps {\n  gameTypeStats: { [key: string]: number };\n}\n\nconst GameTypeChart: React.FC<GameTypeChartProps> = ({ gameTypeStats }) => {\n  const total = Object.values(gameTypeStats).reduce((sum, count) => sum + count, 0);\n  \n  const gameTypes = Object.entries(gameTypeStats)\n    .sort((a, b) => b[1] - a[1])\n    .map(([type, count]) => ({\n      type,\n      count,\n      percentage: total > 0 ? (count / total) * 100 : 0\n    }));\n\n  const getGameTypeInfo = (type: string) => {\n    switch (type) {\n      case 'snail-race': \n        return { name: '달팽이 레이스', emoji: '🐌', color: '#10B981' };\n      case 'slot-machine': \n        return { name: '슬롯머신', emoji: '🎰', color: '#F59E0B' };\n      case 'dart-wheel': \n        return { name: '다트 휠', emoji: '🎯', color: '#EF4444' };\n      default: \n        return { name: type, emoji: '🎮', color: '#6B7280' };\n    }\n  };\n\n  return (\n    <div className=\"stats-card game-type-chart full-width\">\n      <h3>📊 게임별 플레이 통계</h3>\n      \n      {gameTypes.length === 0 ? (\n        <div className=\"empty-state\">\n          아직 플레이한 게임이 없습니다.\n        </div>\n      ) : (\n        <div className=\"chart-container\">\n          {gameTypes.map(({ type, count, percentage }) => {\n            const info = getGameTypeInfo(type);\n            return (\n              <div key={type} className=\"chart-item\">\n                <div className=\"chart-header\">\n                  <span className=\"game-emoji\">{info.emoji}</span>\n                  <span className=\"game-name\">{info.name}</span>\n                  <span className=\"game-count\">{count}회</span>\n                </div>\n                <div className=\"chart-bar-container\">\n                  <div \n                    className=\"chart-bar\"\n                    style={{ \n                      width: `${percentage}%`,\n                      backgroundColor: info.color\n                    }}\n                  />\n                  <span className=\"chart-percentage\">{percentage.toFixed(1)}%</span>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameTypeChart;","import React, { useEffect, useState } from 'react';\nimport { gameHistoryService } from '../../shared/services';\nimport { GameHistory } from '../../shared/types/storage';\nimport './StatsComponents.css';\n\ninterface RecentGamesCardProps {\n  limit: number;\n  onViewAll: () => void;\n}\n\nconst RecentGamesCard: React.FC<RecentGamesCardProps> = ({ limit, onViewAll }) => {\n  const [recentGames, setRecentGames] = useState<GameHistory[]>([]);\n\n  useEffect(() => {\n    const games = gameHistoryService.getRecentGames(limit);\n    setRecentGames(games);\n  }, [limit]);\n\n  const formatTime = (timestamp: number) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    \n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (minutes < 1) return '방금 전';\n    if (minutes < 60) return `${minutes}분 전`;\n    if (hours < 24) return `${hours}시간 전`;\n    if (days < 7) return `${days}일 전`;\n    \n    return date.toLocaleDateString('ko-KR');\n  };\n\n  const getGameTypeEmoji = (gameType: string) => {\n    switch (gameType) {\n      case 'snail-race': return '🐌';\n      case 'slot-machine': return '🎰';\n      case 'dart-wheel': return '🎯';\n      default: return '🎮';\n    }\n  };\n\n  return (\n    <div className=\"stats-card recent-games-card\">\n      <h3>🕒 최근 게임</h3>\n      \n      {recentGames.length === 0 ? (\n        <div className=\"empty-state\">\n          아직 게임 기록이 없습니다.\n        </div>\n      ) : (\n        <>\n          <div className=\"recent-games-list\">\n            {recentGames.map(game => (\n              <div key={game.id} className=\"recent-game-item\">\n                <div className=\"game-icon\">\n                  {getGameTypeEmoji(game.gameType)}\n                </div>\n                <div className=\"game-details\">\n                  <div className=\"game-winners\">\n                    🏆 {game.winners.map(w => w.name).join(', ')}\n                  </div>\n                  <div className=\"game-meta\">\n                    {game.participants.length}명 참가 • {formatTime(game.timestamp)}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <button className=\"view-all-button\" onClick={onViewAll}>\n            전체 기록 보기 →\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RecentGamesCard;","import React from 'react';\nimport './StatsComponents.css';\n\ninterface TimeHeatmapProps {\n  hourlyStats: { [hour: number]: number };\n}\n\nconst TimeHeatmap: React.FC<TimeHeatmapProps> = ({ hourlyStats }) => {\n  const maxCount = Math.max(...Object.values(hourlyStats), 1);\n  \n  const getIntensity = (count: number) => {\n    if (count === 0) return 0;\n    return Math.ceil((count / maxCount) * 5); // 1-5 단계\n  };\n\n  const formatHour = (hour: number) => {\n    if (hour === 0) return '12AM';\n    if (hour === 12) return '12PM';\n    return hour > 12 ? `${hour - 12}PM` : `${hour}AM`;\n  };\n\n  return (\n    <div className=\"stats-card time-heatmap-card full-width\">\n      <h3>🕐 시간대별 활동</h3>\n      \n      <div className=\"heatmap-container\">\n        <div className=\"heatmap-grid\">\n          {Array.from({ length: 24 }, (_, hour) => {\n            const count = hourlyStats[hour] || 0;\n            const intensity = getIntensity(count);\n            \n            return (\n              <div key={hour} className=\"heatmap-cell-wrapper\">\n                <div className=\"hour-label\">{formatHour(hour)}</div>\n                <div \n                  className={`heatmap-cell intensity-${intensity}`}\n                  title={`${count}게임`}\n                >\n                  {count > 0 && count}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"heatmap-legend\">\n          <span className=\"legend-label\">적음</span>\n          <div className=\"legend-cells\">\n            {[0, 1, 2, 3, 4, 5].map(i => (\n              <div key={i} className={`legend-cell intensity-${i}`} />\n            ))}\n          </div>\n          <span className=\"legend-label\">많음</span>\n        </div>\n      </div>\n      \n      <div className=\"heatmap-insight\">\n        <p>\n          가장 활발한 시간대: {getBusiestHours(hourlyStats)}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst getBusiestHours = (hourlyStats: { [hour: number]: number }) => {\n  const entries = Object.entries(hourlyStats);\n  if (entries.length === 0) return '데이터 없음';\n  \n  const sorted = entries.sort((a, b) => Number(b[1]) - Number(a[1]));\n  const topHours = sorted.slice(0, 3)\n    .filter(([_, count]) => Number(count) > 0)\n    .map(([hour]) => {\n      const h = Number(hour);\n      if (h === 0) return '자정';\n      if (h === 12) return '정오';\n      return h > 12 ? `오후 ${h - 12}시` : `오전 ${h}시`;\n    });\n  \n  return topHours.length > 0 ? topHours.join(', ') : '활동 없음';\n};\n\nexport default TimeHeatmap;","import React from 'react';\nimport { ParticipantStats } from '../../shared/types/storage';\nimport './StatsComponents.css';\n\ninterface ParticipantRankingsProps {\n  rankings: Array<{\n    participant: ParticipantStats;\n    score: number;\n    rank: number;\n  }>;\n  onSelectParticipant: (participantId: string) => void;\n  gameType?: string;\n}\n\nconst ParticipantRankings: React.FC<ParticipantRankingsProps> = ({ \n  rankings, \n  onSelectParticipant,\n  gameType \n}) => {\n  const topRankings = rankings.slice(0, 10);\n\n  const getRankBadge = (rank: number) => {\n    if (rank === 1) return '👑';\n    if (rank === 2) return '🥈';\n    if (rank === 3) return '🥉';\n    if (rank <= 5) return '🏅';\n    return '🎖️';\n  };\n\n  const getScoreDisplay = (item: typeof rankings[0]) => {\n    if (gameType && item.participant.gameStats[gameType]) {\n      const stats = item.participant.gameStats[gameType];\n      return {\n        primary: `${((stats.wins / stats.played) * 100).toFixed(1)}%`,\n        secondary: `${stats.wins}승 / ${stats.played}게임`,\n        tertiary: stats.avgRank ? `평균 ${stats.avgRank.toFixed(1)}위` : null\n      };\n    }\n    return {\n      primary: `${item.participant.winRate.toFixed(1)}%`,\n      secondary: `${item.participant.wins}승 / ${item.participant.totalGames}게임`,\n      tertiary: null\n    };\n  };\n\n  return (\n    <div className=\"stats-card participant-rankings-card\">\n      <h3>🏅 참가자 랭킹</h3>\n      <p className=\"rankings-subtitle\">\n        {gameType ? '게임별 성적 기준' : '전체 성적 기준'}\n      </p>\n      \n      {topRankings.length === 0 ? (\n        <div className=\"empty-state\">\n          3게임 이상 참가한 플레이어가 없습니다.\n        </div>\n      ) : (\n        <div className=\"rankings-list\">\n          {topRankings.map(item => {\n            const scoreDisplay = getScoreDisplay(item);\n            return (\n              <div \n                key={item.participant.participantId}\n                className=\"ranking-item\"\n                onClick={() => onSelectParticipant(item.participant.participantId)}\n              >\n                <div className=\"rank-badge\">\n                  <span className=\"rank-emoji\">{getRankBadge(item.rank)}</span>\n                  <span className=\"rank-number\">{item.rank}</span>\n                </div>\n                \n                <div className=\"participant-info\">\n                  <div className=\"participant-name\">\n                    {item.participant.name}\n                  </div>\n                  <div className=\"participant-stats\">\n                    <span className=\"stat-primary\">{scoreDisplay.primary}</span>\n                    <span className=\"stat-secondary\">{scoreDisplay.secondary}</span>\n                    {scoreDisplay.tertiary && (\n                      <span className=\"stat-tertiary\">{scoreDisplay.tertiary}</span>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"ranking-score\">\n                  {Math.round(item.score)}점\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ParticipantRankings;","import { useState, useEffect } from 'react';\nimport { gameHistoryService, participantStatsService } from '../shared/services';\nimport { GlobalStats, ParticipantStats } from '../shared/types/storage';\nimport { \n  calculateGlobalStats, \n  getStatsForPeriod, \n  calculateParticipantRankings,\n  getGamesByTimeOfDay,\n  getAverageGameDuration\n} from '../shared/utils/statsUtils';\nimport GlobalStatsCard from './components/GlobalStatsCard';\nimport TopWinnersCard from './components/TopWinnersCard';\nimport GameTypeChart from './components/GameTypeChart';\nimport RecentGamesCard from './components/RecentGamesCard';\nimport TimeHeatmap from './components/TimeHeatmap';\nimport ParticipantRankings from './components/ParticipantRankings';\nimport './StatsDashboard.css';\n\ninterface StatsDashboardProps {\n  onBack: () => void;\n  onViewHistory: () => void;\n  onSelectParticipant: (participantId: string) => void;\n}\n\nconst StatsDashboard: React.FC<StatsDashboardProps> = ({ \n  onBack, \n  onViewHistory,\n  onSelectParticipant \n}) => {\n  const [globalStats, setGlobalStats] = useState<GlobalStats | null>(null);\n  const [topWinners, setTopWinners] = useState<ParticipantStats[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState<number>(7); // 기본 7일\n  const [selectedGameType, setSelectedGameType] = useState<string>(''); // 전체\n\n  useEffect(() => {\n    loadStats();\n  }, [selectedPeriod, selectedGameType]);\n\n  const loadStats = async () => {\n    setIsLoading(true);\n    try {\n      // 전체 통계\n      const stats = calculateGlobalStats();\n      setGlobalStats(stats);\n\n      // 상위 당첨자\n      const winners = participantStatsService.getTopWinners(10, selectedGameType || undefined);\n      setTopWinners(winners);\n    } catch (error) {\n      console.error('Failed to load stats:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const periodStats = getStatsForPeriod(selectedPeriod);\n  const hourlyStats = getGamesByTimeOfDay();\n  const rankings = calculateParticipantRankings(selectedGameType || undefined);\n  const avgDuration = getAverageGameDuration(selectedGameType || undefined);\n\n  if (isLoading) {\n    return (\n      <div className=\"stats-dashboard loading\">\n        <div className=\"loading-spinner\">통계를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stats-dashboard\">\n      <div className=\"dashboard-header\">\n        <button className=\"back-button\" onClick={onBack}>\n          ← 돌아가기\n        </button>\n        <h1>📊 통계 대시보드</h1>\n        <button className=\"history-link\" onClick={onViewHistory}>\n          📋 게임 기록 보기\n        </button>\n      </div>\n\n      <div className=\"dashboard-controls\">\n        <div className=\"period-selector\">\n          <label>기간:</label>\n          <select value={selectedPeriod} onChange={(e) => setSelectedPeriod(Number(e.target.value))}>\n            <option value={1}>오늘</option>\n            <option value={7}>최근 7일</option>\n            <option value={30}>최근 30일</option>\n            <option value={90}>최근 90일</option>\n            <option value={365}>1년</option>\n          </select>\n        </div>\n\n        <div className=\"game-type-selector\">\n          <label>게임 종류:</label>\n          <select value={selectedGameType} onChange={(e) => setSelectedGameType(e.target.value)}>\n            <option value=\"\">전체</option>\n            <option value=\"snail-race\">달팽이 레이스</option>\n            <option value=\"slot-machine\">슬롯머신</option>\n            <option value=\"dart-wheel\">다트 휠</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"stats-grid\">\n        {/* 전체 통계 카드 */}\n        {globalStats && (\n          <GlobalStatsCard \n            stats={globalStats} \n            periodStats={periodStats}\n            avgDuration={avgDuration}\n          />\n        )}\n\n        {/* 상위 당첨자 카드 */}\n        <TopWinnersCard \n          winners={topWinners}\n          onSelectParticipant={onSelectParticipant}\n          gameType={selectedGameType}\n        />\n\n        {/* 게임 종류별 차트 */}\n        {globalStats && (\n          <GameTypeChart \n            gameTypeStats={globalStats.gameTypeStats}\n          />\n        )}\n\n        {/* 최근 게임 카드 */}\n        <RecentGamesCard \n          limit={5}\n          onViewAll={onViewHistory}\n        />\n\n        {/* 시간대별 히트맵 */}\n        <TimeHeatmap \n          hourlyStats={hourlyStats}\n        />\n\n        {/* 참가자 랭킹 */}\n        <ParticipantRankings \n          rankings={rankings}\n          onSelectParticipant={onSelectParticipant}\n          gameType={selectedGameType}\n        />\n      </div>\n\n      <div className=\"dashboard-footer\">\n        <p className=\"last-updated\">\n          마지막 업데이트: {new Date().toLocaleString('ko-KR')}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default StatsDashboard;","import { GameHistory, ParticipantStats, GlobalStats } from '../types/storage';\nimport { gameHistoryService, participantStatsService } from '../services';\n\n// 전체 통계 계산\nexport function calculateGlobalStats(): GlobalStats {\n  const history = gameHistoryService.getHistory();\n  const participantStats = participantStatsService.getStatsSummary();\n  \n  const gameTypeStats: { [key: string]: number } = {};\n  \n  history.forEach((game: GameHistory) => {\n    gameTypeStats[game.gameType] = (gameTypeStats[game.gameType] || 0) + 1;\n  });\n  \n  const mostPlayedGame = Object.entries(gameTypeStats)\n    .sort((a, b) => b[1] - a[1])[0]?.[0] || '';\n  \n  return {\n    totalGamesPlayed: history.length,\n    gameTypeStats,\n    mostPlayedGame,\n    totalParticipants: participantStats.totalParticipants,\n    lastUpdated: Date.now()\n  };\n}\n\n// 참가자의 연속 승리/패배 계산\nexport function calculateStreaks(participantId: string): { \n  currentWinStreak: number; \n  currentLoseStreak: number; \n  maxWinStreak: number; \n  maxLoseStreak: number;\n} {\n  const games = gameHistoryService.getParticipantGames(participantId);\n  \n  let currentWinStreak = 0;\n  let currentLoseStreak = 0;\n  let maxWinStreak = 0;\n  let maxLoseStreak = 0;\n  let tempWinStreak = 0;\n  let tempLoseStreak = 0;\n  \n  // 최신 게임부터 확인 (games는 이미 최신순으로 정렬됨)\n  games.forEach((game: GameHistory, index: number) => {\n    const isWinner = game.winners.some((w: any) => w.id === participantId);\n    \n    if (isWinner) {\n      tempWinStreak++;\n      tempLoseStreak = 0;\n      maxWinStreak = Math.max(maxWinStreak, tempWinStreak);\n      \n      // 현재 연속 기록 업데이트 (가장 최근 게임들만)\n      if (index === 0) {\n        currentWinStreak = tempWinStreak;\n      }\n    } else {\n      tempLoseStreak++;\n      tempWinStreak = 0;\n      maxLoseStreak = Math.max(maxLoseStreak, tempLoseStreak);\n      \n      if (index === 0) {\n        currentLoseStreak = tempLoseStreak;\n      }\n    }\n  });\n  \n  return {\n    currentWinStreak,\n    currentLoseStreak,\n    maxWinStreak,\n    maxLoseStreak\n  };\n}\n\n// 특정 기간 동안의 통계\nexport function getStatsForPeriod(days: number): {\n  gamesPlayed: number;\n  uniqueParticipants: Set<string>;\n  popularGames: { [key: string]: number };\n} {\n  const cutoffDate = Date.now() - (days * 24 * 60 * 60 * 1000);\n  const recentGames = gameHistoryService.getFilteredGames({ startDate: cutoffDate });\n  \n  const uniqueParticipants = new Set<string>();\n  const popularGames: { [key: string]: number } = {};\n  \n  recentGames.forEach((game: GameHistory) => {\n    game.participants.forEach((p: any) => uniqueParticipants.add(p.id));\n    popularGames[game.gameType] = (popularGames[game.gameType] || 0) + 1;\n  });\n  \n  return {\n    gamesPlayed: recentGames.length,\n    uniqueParticipants,\n    popularGames\n  };\n}\n\n// 참가자 간 대전 기록\nexport function getHeadToHeadStats(participantId1: string, participantId2: string): {\n  totalGames: number;\n  participant1Wins: number;\n  participant2Wins: number;\n  draws: number;\n  gameBreakdown: { [gameType: string]: { p1Wins: number; p2Wins: number; draws: number } };\n} {\n  const games = gameHistoryService.getHistory();\n  \n  let totalGames = 0;\n  let participant1Wins = 0;\n  let participant2Wins = 0;\n  let draws = 0;\n  const gameBreakdown: { [gameType: string]: { p1Wins: number; p2Wins: number; draws: number } } = {};\n  \n  games.forEach((game: GameHistory) => {\n    const hasP1 = game.participants.some((p: any) => p.id === participantId1);\n    const hasP2 = game.participants.some((p: any) => p.id === participantId2);\n    \n    if (hasP1 && hasP2) {\n      totalGames++;\n      \n      const p1Won = game.winners.some((w: any) => w.id === participantId1);\n      const p2Won = game.winners.some((w: any) => w.id === participantId2);\n      \n      if (!gameBreakdown[game.gameType]) {\n        gameBreakdown[game.gameType] = { p1Wins: 0, p2Wins: 0, draws: 0 };\n      }\n      \n      if (p1Won && !p2Won) {\n        participant1Wins++;\n        gameBreakdown[game.gameType].p1Wins++;\n      } else if (p2Won && !p1Won) {\n        participant2Wins++;\n        gameBreakdown[game.gameType].p2Wins++;\n      } else if (p1Won && p2Won) {\n        draws++;\n        gameBreakdown[game.gameType].draws++;\n      }\n    }\n  });\n  \n  return {\n    totalGames,\n    participant1Wins,\n    participant2Wins,\n    draws,\n    gameBreakdown\n  };\n}\n\n// 시간대별 게임 통계\nexport function getGamesByTimeOfDay(): { [hour: number]: number } {\n  const games = gameHistoryService.getHistory();\n  const hourlyStats: { [hour: number]: number } = {};\n  \n  // 0-23시 초기화\n  for (let i = 0; i < 24; i++) {\n    hourlyStats[i] = 0;\n  }\n  \n  games.forEach((game: GameHistory) => {\n    const hour = new Date(game.timestamp).getHours();\n    hourlyStats[hour]++;\n  });\n  \n  return hourlyStats;\n}\n\n// 평균 게임 시간 계산\nexport function getAverageGameDuration(gameType?: string): number {\n  const games = gameType \n    ? gameHistoryService.getGamesByType(gameType)\n    : gameHistoryService.getHistory();\n  \n  if (games.length === 0) return 0;\n  \n  const totalDuration = games.reduce((sum: number, game: GameHistory) => sum + game.duration, 0);\n  return totalDuration / games.length;\n}\n\n// 참가자 순위 계산 (ELO 방식 간소화)\nexport function calculateParticipantRankings(gameType?: string): Array<{\n  participant: ParticipantStats;\n  score: number;\n  rank: number;\n}> {\n  const allStats = participantStatsService.getRecentParticipants(100);\n  \n  const rankings = allStats\n    .filter((stat: ParticipantStats) => {\n      if (gameType) {\n        return stat.gameStats[gameType] && stat.gameStats[gameType].played >= 3;\n      }\n      return stat.totalGames >= 3;\n    })\n    .map((stat: ParticipantStats) => {\n      let score: number;\n      \n      if (gameType && stat.gameStats[gameType]) {\n        const gameStats = stat.gameStats[gameType];\n        // 승률 * 1000 + 승리 수 * 10 - 평균 순위 * 50\n        score = (gameStats.wins / gameStats.played) * 1000 + \n                gameStats.wins * 10 - \n                (gameStats.avgRank || 0) * 50;\n      } else {\n        // 전체 게임 기준\n        score = stat.winRate * 10 + stat.wins * 5 + Math.log(stat.totalGames + 1) * 20;\n      }\n      \n      return { participant: stat, score };\n    })\n    .sort((a: any, b: any) => b.score - a.score)\n    .map((item: any, index: number) => ({ ...item, rank: index + 1 }));\n  \n  return rankings;\n}\n\n// 참가자 추천 (자주 함께 플레이하는 참가자)\nexport function getFrequentCoPlayers(participantId: string, limit: number = 5): Array<{\n  participant: ParticipantStats;\n  gamesPlayedTogether: number;\n  winRateWhenTogether: number;\n}> {\n  const games = gameHistoryService.getParticipantGames(participantId);\n  const coPlayerStats = new Map<string, { games: number; wins: number }>();\n  \n  games.forEach((game: GameHistory) => {\n    const isWinner = game.winners.some((w: any) => w.id === participantId);\n    \n    game.participants.forEach((p: any) => {\n      if (p.id !== participantId) {\n        if (!coPlayerStats.has(p.id)) {\n          coPlayerStats.set(p.id, { games: 0, wins: 0 });\n        }\n        \n        const stats = coPlayerStats.get(p.id)!;\n        stats.games++;\n        if (isWinner) stats.wins++;\n      }\n    });\n  });\n  \n  const results: Array<{\n    participant: ParticipantStats;\n    gamesPlayedTogether: number;\n    winRateWhenTogether: number;\n  }> = [];\n  \n  coPlayerStats.forEach((stats, playerId) => {\n    const participantStats = participantStatsService.getParticipantStats(playerId);\n    if (participantStats) {\n      results.push({\n        participant: participantStats,\n        gamesPlayedTogether: stats.games,\n        winRateWhenTogether: (stats.wins / stats.games) * 100\n      });\n    }\n  });\n  \n  return results\n    .sort((a, b) => b.gamesPlayedTogether - a.gamesPlayedTogether)\n    .slice(0, limit);\n}","import { useState, useEffect } from 'react';\nimport Lottie from 'lottie-react';\nimport { SpotlightArenaProvider } from '../../../utilities/spotlight-arena/shared/contexts';\nimport { Participant } from '../../../utilities/spotlight-arena/shared/types';\nimport { GAMES_LIST } from '../../../utilities/spotlight-arena/shared/utils';\nimport ParticipantInput from '../../../utilities/spotlight-arena/common/ParticipantInput';\nimport GameCard from '../../../utilities/spotlight-arena/common/GameCard';\nimport SnailRaceGame from '../../../utilities/spotlight-arena/games/SnailRace/SnailRaceGame';\nimport GameHistoryViewer from '../../../utilities/spotlight-arena/history/GameHistoryViewer';\nimport StatsDashboard from '../../../utilities/spotlight-arena/stats/StatsDashboard';\nimport snail1Animation from '../../../assets/animations/snail/snail_1.json';\nimport snail2Animation from '../../../assets/animations/snail/snail_2.json';\nimport './SpotlightArenaPage.css';\n\ntype Step = 'lobby' | 'arcade' | 'game' | 'history' | 'stats';\n\nconst SpotlightArenaContent = () => {\n  const [currentStep, setCurrentStep] = useState<Step>('lobby');\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [winnerCount, setWinnerCount] = useState(1);\n  const [selectedGame, setSelectedGame] = useState<string | null>(null);\n  const [snailAnimation, setSnailAnimation] = useState<any>(null);\n  const [showSnailIntro, setShowSnailIntro] = useState(true);\n  const [gameKey, setGameKey] = useState(0); // 게임 리셋을 위한 key\n\n  const snailAnimations = [snail1Animation, snail2Animation];\n\n  useEffect(() => {\n    // 달팽이 애니메이션 로드 (한 번만 랜덤 선택)\n    if (selectedGame === 'snail-race' && !snailAnimation) {\n      // 랜덤으로 달팽이 애니메이션 선택\n      const randomIndex = Math.floor(Math.random() * snailAnimations.length);\n      setSnailAnimation(snailAnimations[randomIndex]);\n    }\n  }, [selectedGame, snailAnimation, snailAnimations]);\n\n  const handleParticipantsChange = (newParticipants: Participant[]) => {\n    setParticipants(newParticipants);\n  };\n\n  const handleNextToArcade = () => {\n    if (participants.length >= 2) {\n      setCurrentStep('arcade');\n    }\n  };\n\n  const handleGameSelect = (gameId: string) => {\n    setSelectedGame(gameId);\n    setCurrentStep('game');\n  };\n\n  const handleBackToLobby = () => {\n    setCurrentStep('lobby');\n    setSelectedGame(null);\n  };\n\n  const handleBackToLab = () => {\n    // Lab 페이지로 돌아가기\n    window.history.back();\n  };\n\n  const handleBackToArcade = () => {\n    setCurrentStep('arcade');\n    setSelectedGame(null);\n    setSnailAnimation(null); // 애니메이션 초기화하여 다시 선택 시 새로운 랜덤 달팽이 로드\n  };\n\n  return (\n    <div className=\"spotlight-arena\">\n      <div className=\"spotlight-arena-container\">\n        {currentStep === 'lobby' && (\n          <div className=\"lobby-section sa-card\">\n            <button \n              className=\"arena-back-button\"\n              onClick={handleBackToLab}\n            >\n              ← Lab으로 돌아가기\n            </button>\n            <div className=\"lobby-header\">\n              <div>\n                <h1 className=\"arena-title\">🎮 스포트라이트 아레나</h1>\n                <p className=\"arena-subtitle\">다양한 미니게임으로 추첨을 재미있게!</p>\n              </div>\n              <button \n                className=\"sa-button sa-button-secondary\"\n                onClick={() => setCurrentStep('stats')}\n              >\n                📊 통계 대시보드\n              </button>\n            </div>\n            \n            <div className=\"lobby-content\">\n              <div className=\"participant-section\">\n                <h2>👥 참가자 명단</h2>\n                <ParticipantInput \n                  onParticipantsChange={handleParticipantsChange}\n                  maxParticipants={20}\n                />\n              </div>\n              \n              <div className=\"settings-section\">\n                <h2>⚙️ 추첨 설정</h2>\n                <div className=\"setting-item\">\n                  <label>추첨 인원:</label>\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    max={Math.max(1, participants.length)}\n                    value={winnerCount}\n                    onChange={(e) => setWinnerCount(Number(e.target.value))}\n                  />\n                  <span>명</span>\n                </div>\n              </div>\n            </div>\n            \n            <button\n              className=\"next-button sa-button sa-button-primary\"\n              onClick={handleNextToArcade}\n              disabled={participants.length < 2}\n            >\n              다음: 게임 선택하기 ➡️\n            </button>\n          </div>\n        )}\n\n        {currentStep === 'arcade' && (\n          <div className=\"arcade-section sa-card\">\n            <button className=\"back-button\" onClick={handleBackToLobby}>\n              ← 뒤로가기\n            </button>\n            \n            <h1 className=\"arcade-title\">✨ 어떤 게임으로 추첨할까요?</h1>\n            <p className=\"arcade-subtitle\">\n              현재 {participants.length}명이 참가합니다\n            </p>\n            \n            <div className=\"games-grid\">\n              {GAMES_LIST.map(game => (\n                <GameCard\n                  key={game.id}\n                  game={game}\n                  onClick={() => handleGameSelect(game.id)}\n                  participantCount={participants.length}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {currentStep === 'game' && selectedGame === 'snail-race' && (\n          <div className=\"game-section sa-card\">\n            {showSnailIntro ? (\n              <>\n                <button className=\"back-button\" onClick={handleBackToArcade}>\n                  ← 게임 선택으로\n                </button>\n                \n                <div className=\"snail-race-container\">\n                  <h2 className=\"snail-race-title\">🐌 달팽이 레이스</h2>\n                  \n                  <div className=\"snail-animation-wrapper\">\n                    {snailAnimation && (\n                      <div className=\"snail-animation-container\">\n                        <Lottie \n                          animationData={snailAnimation}\n                          loop={true}\n                          autoplay={true}\n                          style={{ width: '300px', height: '300px' }}\n                        />\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"snail-race-info\">\n                    <p className=\"snail-race-description\">\n                      세상에서 가장 느린 레이스, 그러나 가장 예측 불가능한 결과!\n                    </p>\n                    <div className=\"race-details\">\n                      <div className=\"race-detail-item\">\n                        <span className=\"detail-label\">참가자</span>\n                        <span className=\"detail-value\">{participants.length}명</span>\n                      </div>\n                      <div className=\"race-detail-item\">\n                        <span className=\"detail-label\">추첨 인원</span>\n                        <span className=\"detail-value\">{winnerCount}명</span>\n                      </div>\n                    </div>\n                    \n                    <button \n                      className=\"start-race-button sa-button sa-button-primary\"\n                      onClick={() => setShowSnailIntro(false)}\n                    >\n                      🏁 레이스 시작하기\n                    </button>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <SnailRaceGame\n                key={gameKey}\n                participants={participants}\n                winnerCount={winnerCount}\n                onBack={() => {\n                  // 처음으로 (로비로 돌아가기)\n                  setShowSnailIntro(true);\n                  handleBackToLobby();\n                }}\n                onReplay={() => {\n                  // 같은 참가자로 다시 시작\n                  setShowSnailIntro(true);\n                  setGameKey(prev => prev + 1); // key 변경으로 컴포넌트 리마운트\n                  setTimeout(() => setShowSnailIntro(false), 100);\n                }}\n                onNewGame={() => {\n                  // 새로운 게임 선택\n                  setShowSnailIntro(true);\n                  handleBackToArcade();\n                }}\n              />\n            )}\n          </div>\n        )}\n\n        {/* 히스토리 뷰어 */}\n        {currentStep === 'history' && (\n          <GameHistoryViewer \n            onBack={() => setCurrentStep('stats')}\n            onSelectParticipant={(participantId) => {\n              // 나중에 참가자 통계 화면으로 이동할 수 있도록 확장 가능\n              console.log('Selected participant:', participantId);\n            }}\n          />\n        )}\n\n        {/* 통계 대시보드 */}\n        {currentStep === 'stats' && (\n          <StatsDashboard \n            onBack={() => setCurrentStep('lobby')}\n            onViewHistory={() => setCurrentStep('history')}\n            onSelectParticipant={(participantId) => {\n              console.log('Selected participant:', participantId);\n              // 향후 참가자 상세 보기 기능 추가 가능\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst SpotlightArenaPage = () => {\n  return (\n    <SpotlightArenaProvider>\n      <SpotlightArenaContent />\n    </SpotlightArenaProvider>\n  );\n};\n\nexport default SpotlightArenaPage;"],"names":["SpotlightArenaContext","createContext","undefined","SpotlightArenaProvider","_ref","children","participants","setParticipants","useState","gameSettings","setGameSettings","winnerCount","allowDuplicates","selectedGame","setSelectedGame","currentStep","setCurrentStep","value","updateGameSettings","settings","prev","_objectSpread","selectGame","game","resetGame","_jsx","Provider","GAMES_LIST","id","name","description","icon","tags","minPlayers","maxPlayers","available","onParticipantsChange","maxParticipants","inputMode","setInputMode","textInput","setTextInput","numberRange","setNumberRange","start","end","removeDuplicates","setRemoveDuplicates","useEffect","parseParticipants","names","split","map","trim","filter","length","Array","from","Set","slice","index","concat","order","Math","max","min","i","push","currentCount","_jsxs","className","onClick","placeholder","onChange","e","target","rows","type","checked","accept","event","_event$target$files","file","files","reader","FileReader","onload","_e$target","result","join","readAsText","style","display","Number","participantCount","isPlayable","statusMessage","tag","SNAIL_COLORS","BaseStorageService","constructor","storageKey","this","getData","data","localStorage","getItem","JSON","parse","error","console","setData","setItem","stringify","DOMException","handleQuotaExceeded","retryError","clearData","removeItem","getStorageSize","Blob","size","GameHistoryService","super","getInstance","instance","saveGameResult","history","getHistory","newGame","Date","now","random","toString","substr","gameType","timestamp","endTime","winners","gameConfig","duration","startTime","unshift","splice","getFilteredGames","participantId","some","p","startDate","endDate","limit","getRecentGames","arguments","getGamesByType","getGameById","gameId","find","getParticipantGames","getSortedGames","sortOptions","games","sort","a","b","comparison","field","localeCompare","clearOldHistory","daysToKeep","cutoffDate","filteredHistory","removedCount","clearAllHistory","keepCount","floor","newHistory","validateData","isArray","every","getStatsSummary","_history","_history$","gameTypes","Map","forEach","set","get","totalGames","gameTypeBreakdown","Object","fromEntries","oldestGame","newestGame","ParticipantStatsService","getAllStats","entries","saveAllStats","statsMap","updateStats","gameResult","stats","participant","existingStats","createInitialStats","lastPlayed","gameStats","played","wins","avgRank","winnerIndex","findIndex","w","currentRank","winRate","cleanupOldParticipants","createdAt","getParticipantStats","findParticipantsByName","results","stat","toLowerCase","includes","getTopWinners","values","filteredStats","s","aWinRate","bWinRate","getRecentParticipants","getGameTypeStats","gameSpecificStats","deleteParticipant","deleted","delete","clearAllStats","statsArray","newStats","totalGamesPlayed","totalWins","keys","add","totalParticipants","averageWinRate","uniqueGameTypes","gameHistoryService","participantStatsService","SNAIL_RACE_EVENTS","speedModifier","probability","randomInt","randomFloat","randomElement","array","initialSnails","trackLength","events","onRaceComplete","onEventTrigger","snails","setSnails","animationFrameRef","useRef","lastTimeRef","lastEventTimeRef","winnersRef","isRunningRef","gameLoop","useCallback","current","deltaTime","requestAnimationFrame","prevSnails","updatedSnails","snail","position","speed","baseSpeed","activeEvent","movement","newPosition","activeSnails","targetSnail","startRace","performance","stopRace","cancelAnimationFrame","x","y","isFinished","rank","Group","opacity","Line","points","stroke","color","strokeWidth","lineCap","scaleX","scaleY","Path","fill","Circle","radius","Text","text","fontSize","hexColor","parseInt","align","width","height","verticalAlign","fontStyle","laneCount","trackPaddingY","trackAreaHeight","cheeringPositions","cheeringEmojis","Rect","fillLinearGradientStartPoint","fillLinearGradientEndPoint","fillLinearGradientColorStops","_","rotation","pos","gameState","isPlaying","stageRef","finishedSnails","setFinishedSnails","trackWidth","snailCount","trackHeight","laneHeight","trackStartX","trackEndX","useGameEngine","newFinishedSnails","Stage","ref","Layer","TrackBackground","dash","snailX","snailY","indexOf","SnailSprite","progress","barY","React","cornerRadius","onComplete","count","setCount","timer","setTimeout","clearTimeout","snailName","eventName","messages","displayedMessages","setDisplayedMessages","message","animation","gameName","onReplay","onNewGame","onGoHome","showConfetti","setShowConfetti","copiedToClipboard","setCopiedToClipboard","getRankEmoji","winner","animationDelay","copyResults","resultText","navigator","clipboard","writeText","_gameState$snails$fin","onBack","setGameState","status","elapsedTime","showCountdown","setShowCountdown","currentEvent","setCurrentEvent","commentaryMessages","setCommentaryMessages","gameStartTime","setGameStartTime","addCommentary","ResultDisplay","RaceCountdown","handleCountdownComplete","EventNotification","snailId","RaceTrack","handleEventTrigger","commentary","getEventCommentary","RaceCommentary","handleStartGame","onSelectParticipant","setHistory","setFilter","isLoading","setIsLoading","loadHistory","formatDate","toLocaleDateString","year","month","day","hour","minute","formatDuration","seconds","minutes","remainingSeconds","getGameTypeIcon","getGameTypeName","handleClearHistory","window","confirm","date","getTime","stopPropagation","periodStats","avgDuration","toLocaleString","gamesPlayed","uniqueParticipants","ms","mostPlayedGame","getWinRate","toFixed","getGames","gameTypeStats","total","reduce","sum","_ref2","percentage","_ref3","info","emoji","getGameTypeInfo","backgroundColor","onViewAll","recentGames","setRecentGames","formatTime","diff","hours","days","getGameTypeEmoji","_Fragment","getBusiestHours","hourlyStats","topHours","h","maxCount","formatHour","intensity","ceil","getIntensity","title","rankings","topRankings","item","scoreDisplay","primary","secondary","tertiary","getScoreDisplay","round","score","onViewHistory","globalStats","setGlobalStats","topWinners","setTopWinners","selectedPeriod","setSelectedPeriod","selectedGameType","setSelectedGameType","loadStats","async","_Object$entries$sort$","participantStats","lastUpdated","calculateGlobalStats","popularGames","getStatsForPeriod","getHours","getGamesByTimeOfDay","log","getAverageGameDuration","GlobalStatsCard","TopWinnersCard","GameTypeChart","RecentGamesCard","TimeHeatmap","ParticipantRankings","SpotlightArenaContent","setWinnerCount","snailAnimation","setSnailAnimation","showSnailIntro","setShowSnailIntro","gameKey","setGameKey","snailAnimations","snail1Animation","snail2Animation","randomIndex","handleBackToLobby","handleBackToArcade","handleBackToLab","back","ParticipantInput","newParticipants","handleNextToArcade","disabled","GameCard","handleGameSelect","Lottie","animationData","loop","autoplay","SnailRaceGame","GameHistoryViewer","StatsDashboard","SpotlightArenaPage"],"sourceRoot":""}