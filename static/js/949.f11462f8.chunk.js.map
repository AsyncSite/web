{"version":3,"file":"static/js/949.f11462f8.chunk.js","mappings":"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","sources":["components/lab/playground/DeductionGame/DeductionGame.tsx","components/lab/playground/DeductionGame/ai/GameManager.ts","components/lab/playground/DeductionGame/ai/players/BasePlayer.ts","components/lab/playground/DeductionGame/ai/players/HumanPlayer.ts","components/lab/playground/DeductionGame/ai/players/BuiltInAIPlayer.ts","components/lab/playground/DeductionGame/ai/sandbox/AICodeExecutor.ts","components/lab/playground/DeductionGame/ai/sandbox/PerformanceMonitor.ts","components/lab/playground/DeductionGame/ai/sandbox/AIExecutionHandler.ts","components/lab/playground/DeductionGame/ai/players/CustomAIPlayer.ts","components/lab/playground/DeductionGame/ai/strategies/EasyStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/BaseStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/MediumStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/HardStrategy.ts","components/lab/playground/DeductionGame/ai/PlayerFactory.ts","components/lab/playground/DeductionGame/ai/sandbox/AICodeValidator.ts","components/lab/playground/Tetris/Tetris.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './DeductionGame.css';\nimport { GameManager } from './ai/GameManager';\nimport { PlayerFactory } from './ai/PlayerFactory';\nimport { IPlayer } from './ai/players/BasePlayer';\nimport { HumanPlayer } from './ai/players/HumanPlayer';\nimport { PlayerInfo, PlayerType } from './ai/types/PlayerTypes';\n// import AIGuidePanel from './AIGuidePanel';\n\ntype GameScreen = 'mode-selection' | 'difficulty-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: PlayerType;\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n  aiDifficulty?: 'easy' | 'medium' | 'hard';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [guideSlideIndex, setGuideSlideIndex] = useState(0);\n  const [isGuideModalOpen, setIsGuideModalOpen] = useState(false);\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [soloDifficulty, setSoloDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const gameManagerRef = useRef<GameManager | null>(null);\n  const [turnStartTime, setTurnStartTime] = useState<number>(0);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n  const [globalHintsEnabled, setGlobalHintsEnabled] = useState(true);\n  // const [isGuideExpanded, setIsGuideExpanded] = useState(true);\n  const [isModalExpanded, setIsModalExpanded] = useState(false);\n  const [testResults, setTestResults] = useState<Array<{ id: number; success: boolean; message: string; details?: any; isFading?: boolean }>>([]);\n  const [isTestRunning, setIsTestRunning] = useState(false);\n  const [testResultIdCounter, setTestResultIdCounter] = useState(0);\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 난이도 선택 화면으로\n      setCurrentScreen('difficulty-selection');\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n      setCurrentScreen('player-setup');\n    }\n  };\n\n  const handleDifficultySelect = (difficulty: 'easy' | 'medium' | 'hard') => {\n    setSoloDifficulty(difficulty);\n    setPlayerCount(2);\n    setPlayers([\n      { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' },\n      { id: 2, nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`, type: 'built-in-ai', aiDifficulty: difficulty }\n    ]);\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'custom-ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 0,  // GameManager가 관리하므로 0으로 시작\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n\n  const startActualGame = () => {\n    // GameManager 초기화\n    const manager = new GameManager({\n      keywordPoolSize: gameConfig.keywordPoolSize,\n      answerCount: gameConfig.answerCount,\n      hintCount: gameConfig.hintCount,\n      timeLimit: gameConfig.timeLimit,\n      maxTurns: gameConfig.maxTurns,\n      globalHintsEnabled: globalHintsEnabled\n    });\n\n    // 플레이어 생성\n    const gamePlayers: IPlayer[] = players.map(config => {\n      const playerInfo: PlayerInfo = {\n        id: config.id,\n        nickname: config.nickname,\n        type: config.type,\n        aiDifficulty: config.aiDifficulty,\n        customCode: config.aiCode,\n        customLanguage: config.aiLanguage\n      };\n      return PlayerFactory.createPlayer(playerInfo);\n    });\n\n    manager.setPlayers(gamePlayers);\n\n    // 이벤트 핸들러 설정\n    manager.setEventHandlers({\n      onTurnStart: (player) => {\n        const playerInfo = player.getInfo();\n        setIsMyTurn(playerInfo.type === 'human');\n        // 턴 시작 시간 기록\n        setTurnStartTime(Date.now());\n        // GameManager의 currentTurn과 동기화\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          currentTurn: context.currentTurn\n        }));\n      },\n      onTurnEnd: (result) => {\n        setIsAIThinking(false);\n        // Get updated game context to sync revealed wrong answers from global hints\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          turnHistory: [...prev.turnHistory, result],\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      },\n      onGameEnd: (winner) => {\n        if (winner) {\n          const winnerInfo = winner.getInfo();\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished',\n            winner: winnerInfo.id\n          }));\n        } else {\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished'\n          }));\n        }\n      },\n      onTimerTick: (remainingTime) => {\n        setTimeRemaining(remainingTime);\n      },\n      onAIThinking: (thinking) => {\n        setIsAIThinking(thinking);\n      }\n    });\n\n    gameManagerRef.current = manager;\n\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // GameManager를 사용하는 경우 타이머를 직접 관리하지 않음\n    if (gameManagerRef.current) {\n      return;\n    }\n    \n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    // 턴 시작 시간 기록\n    setTurnStartTime(Date.now());\n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const runAICodeTest = async (aiCode: string, language: 'javascript' | 'typescript') => {\n    setIsTestRunning(true);\n    \n    try {\n      // 1. 먼저 기본 문법 검사만 수행\n      try {\n        new Function(aiCode);\n      } catch (e: any) {\n        const newResult = {\n          id: testResultIdCounter,\n          success: false,\n          message: '문법 오류',\n          details: { error: e.message }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n        return;\n      }\n\n      // 2. makeGuess 함수 존재 확인\n      if (!aiCode.includes('function makeGuess') && !aiCode.includes('makeGuess =')) {\n        const newResult = {\n          id: testResultIdCounter,\n          success: false,\n          message: 'makeGuess 함수를 찾을 수 없습니다',\n          details: { tip: 'function makeGuess(gameState) { ... } 형식으로 작성해주세요' }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n        return;\n      }\n\n      // 3. 간단한 결함 검사 및 성능 측정\n      const testCode = `\n        ${aiCode}\n        \n        // 테스트 실행\n        (function() {\n          try {\n            if (typeof makeGuess !== 'function') {\n              throw new Error('makeGuess 함수가 정의되지 않았습니다');\n            }\n            \n            // 다양한 크기의 테스트 데이터\n            const testCases = [\n              {\n                keywords: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'],\n                myHints: [0, 3, 7],\n                answerCount: 4,\n                previousGuesses: [],\n                revealedAnswers: [],\n                revealedWrongAnswers: [15, 18],\n                currentTurn: 1,\n                timeLimit: 60\n              },\n              {\n                keywords: ['사자', '호랑이', '코끼리', '기린', '원숭이', '판다', '코알라', '펭귄', '독수리', '상어'],\n                myHints: [0, 2, 5],\n                answerCount: 3,\n                previousGuesses: [{ playerId: 1, guess: [1, 3, 4], correctCount: 1 }],\n                revealedAnswers: [],\n                revealedWrongAnswers: [9],\n                currentTurn: 2,\n                timeLimit: 60\n              },\n              {\n                keywords: Array.from({length: 50}, (_, i) => \\`키워드\\${i+1}\\`),\n                myHints: [0, 5, 10, 15, 20],\n                answerCount: 5,\n                previousGuesses: [],\n                revealedAnswers: [25],\n                revealedWrongAnswers: [1, 2, 3, 4],\n                currentTurn: 1,\n                timeLimit: 60\n              }\n            ];\n            \n            let totalTime = 0;\n            const executionTimes = [];\n            \n            // 각 테스트 케이스를 10번씩 실행하여 평균 성능 측정\n            for (let i = 0; i < testCases.length; i++) {\n              const testCase = testCases[i];\n              \n              for (let j = 0; j < 10; j++) {\n                const startTime = performance.now();\n                const result = makeGuess(testCase);\n                const endTime = performance.now();\n                const execTime = endTime - startTime;\n                \n                executionTimes.push(execTime);\n                totalTime += execTime;\n                \n                // 기본 검증\n                if (!Array.isArray(result)) {\n                  throw new Error('반환값이 배열이 아닙니다');\n                }\n                \n                if (result.length !== testCase.answerCount) {\n                  throw new Error(\\`잘못된 개수의 선택 (기대: \\${testCase.answerCount}, 실제: \\${result.length})\\`);\n                }\n                \n                // 유효성 검사\n                for (const idx of result) {\n                  if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n                    throw new Error(\\`유효하지 않은 인덱스: \\${idx}\\`);\n                  }\n                  if (idx < 0 || idx >= testCase.keywords.length) {\n                    throw new Error(\\`범위를 벗어난 인덱스: \\${idx}\\`);\n                  }\n                  if (testCase.myHints.includes(idx)) {\n                    throw new Error(\\`힌트로 받은 키워드를 선택했습니다 (인덱스: \\${idx})\\`);\n                  }\n                }\n                \n                // 중복 검사\n                const uniqueSet = new Set(result);\n                if (uniqueSet.size !== result.length) {\n                  throw new Error('중복된 선택이 있습니다');\n                }\n              }\n            }\n            \n            // 평균 실행 시간 계산\n            const avgTime = totalTime / executionTimes.length;\n            const maxTime = Math.max(...executionTimes);\n            const minTime = Math.min(...executionTimes);\n            \n            // 첫 번째 테스트의 결과를 샘플로 반환\n            const sampleResult = makeGuess(testCases[0]);\n            \n            return { \n              success: true, \n              result: sampleResult, \n              keywords: sampleResult.map(idx => testCases[0].keywords[idx]),\n              performance: {\n                avgTime: avgTime.toFixed(3),\n                minTime: minTime.toFixed(3),\n                maxTime: maxTime.toFixed(3),\n                totalRuns: executionTimes.length\n              }\n            };\n          } catch (error) {\n            return { success: false, error: error.message };\n          }\n        })()\n      `;\n\n      const startTime = Date.now();\n      let testResult;\n      \n      try {\n        testResult = eval(testCode);\n      } catch (e: any) {\n        testResult = { success: false, error: e.message };\n      }\n      \n      const executionTime = Date.now() - startTime;\n\n      if (testResult && testResult.success) {\n        const avgTime = parseFloat(testResult.performance.avgTime);\n        const speedLevel = avgTime < 0.5 ? '매우 빠름' : \n                          avgTime < 2 ? '빠름' : \n                          avgTime < 5 ? '보통' : '느림';\n        \n        const newResult = {\n          id: testResultIdCounter,\n          success: true,\n          message: `테스트 통과! AI 코드가 정상적으로 작동합니다.`,\n          details: {\n            executionTime: `${executionTime}ms`,\n            selectedKeywords: testResult.keywords.join(', '),\n            selectedIndices: testResult.result,\n            performance: testResult.performance,\n            speedLevel\n          }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        // 2초 후 자동으로 사라지도록 설정\n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n      } else {\n        const newResult = {\n          id: testResultIdCounter,\n          success: false,\n          message: '테스트 실패',\n          details: { error: testResult?.error || '알 수 없는 오류' }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        // 2초 후 자동으로 사라지도록 설정\n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n      }\n\n    } catch (error) {\n      const newResult = {\n        id: testResultIdCounter,\n        success: false,\n        message: '테스트 실행 중 오류가 발생했습니다',\n        details: { error: error instanceof Error ? error.message : String(error) }\n      };\n      setTestResultIdCounter(prev => prev + 1);\n      setTestResults(prev => [...prev, newResult]);\n      \n      setTimeout(() => {\n        setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n        setTimeout(() => {\n          setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n        }, 500);\n      }, 2000);\n    } finally {\n      setIsTestRunning(false);\n    }\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    // GameManager 정리\n    if (gameManagerRef.current) {\n      gameManagerRef.current.stopGame();\n      gameManagerRef.current = null;\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setIsAIThinking(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n  const handleGlobalHintsToggle = () => {\n    const newValue = !globalHintsEnabled;\n    setGlobalHintsEnabled(newValue);\n    \n    // Update GameManager if it exists and sync the game state\n    if (gameManagerRef.current) {\n      gameManagerRef.current.setGlobalHintsEnabled(newValue);\n      \n      // Get updated game context and sync revealedWrongAnswers\n      const updatedContext = gameManagerRef.current.getGameContext();\n      setGameState(prev => ({\n        ...prev,\n        revealedWrongAnswers: [...updatedContext.revealedWrongAnswers]\n      }));\n    }\n  };\n\n  const revealAnswerHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: context.revealedAnswers\n        }));\n      }\n    } else {\n      const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n      if (unrevealedAnswers.length > 0) {\n        const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n        }));\n      }\n    }\n  };\n\n  const revealWrongHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealWrongAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      }\n    } else {\n      const wrongAnswers = gameState.keywords\n        .map((_, index) => index)\n        .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n      \n      if (wrongAnswers.length > 0) {\n        const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n        }));\n      }\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = async () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    \n    if (gameManagerRef.current) {\n      setIsSubmitting(true);\n      try {\n        await gameManagerRef.current.submitHumanGuess(selectedKeywords);\n        setSelectedKeywords([]);\n      } catch (error) {\n        console.error('Failed to submit guess:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      submitGuessWithSelection(selectedKeywords);\n    }\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    // GameManager를 사용하는 경우 이 함수를 사용하지 않음\n    if (gameManagerRef.current) return;\n    \n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = turnStartTime ? Math.round((Date.now() - turnStartTime) / 1000) : gameConfig.timeLimit - timeRemaining;\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    if (gameManagerRef.current) {\n      const currentPlayer = gameManagerRef.current.getCurrentPlayer();\n      if (currentPlayer) {\n        const playerInfo = currentPlayer.getInfo();\n        return players.find(p => p.id === playerInfo.id);\n      }\n    }\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => {\n        setCodeEditorModal({ isOpen: false, playerId: null });\n        setIsModalExpanded(false);\n      }}>\n        <div className={`modal-content code-editor-modal ${isModalExpanded ? 'expanded' : ''}`} onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <div className=\"modal-header-actions\">\n              <button \n                className=\"modal-expand-btn\"\n                onClick={() => setIsModalExpanded(!isModalExpanded)}\n                title={isModalExpanded ? \"기본 크기로\" : \"전체 화면 모드\"}\n              >\n                {isModalExpanded ? '↙' : '↗'}\n              </button>\n              <button \n                className=\"modal-close\"\n                onClick={() => {\n                  setCodeEditorModal({ isOpen: false, playerId: null });\n                  setIsModalExpanded(false);\n                }}\n              >\n                ×\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"code-editor-container\" style={{ position: 'relative' }}>\n            {/* <AIGuidePanel \n              isExpanded={isGuideExpanded} \n              onToggle={() => setIsGuideExpanded(!isGuideExpanded)}\n              onInsertTemplate={(template: any) => {\n                updatePlayer(player.id, { aiCode: template });\n              }}\n            /> */}\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    updatePlayer(player.id, { aiCode: '' });\n                    setTestResults([]);\n                  }}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  answerCount: number;\n  previousGuesses: { playerId: number; guess: number[]; correctCount: number }[];\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  currentTurn: number;\n  timeLimit: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongAnswers, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록 (힌트와 공개된 오답 제외)\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongAnswers.includes(idx) && !myHints.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongAnswers, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록 (힌트와 공개된 오답 제외)\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongAnswers.includes(idx) && !myHints.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n                <button \n                  className=\"btn btn-small btn-test\"\n                  onClick={() => {\n                    if (player.aiCode) {\n                      runAICodeTest(player.aiCode, player.aiLanguage || 'javascript');\n                    }\n                  }}\n                  disabled={!player.aiCode || isTestRunning}\n                >\n                  {isTestRunning ? (\n                    <>\n                      테스트 중<span className=\"loading-dots\"></span>\n                    </>\n                  ) : (\n                    '테스트 실행'\n                  )}\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\" onScroll={(e) => {\n                const textarea = e.currentTarget.nextElementSibling as HTMLTextAreaElement;\n                if (textarea) textarea.scrollTop = e.currentTarget.scrollTop;\n              }}>\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                onScroll={(e) => {\n                  const lineNumbers = e.currentTarget.previousElementSibling as HTMLDivElement;\n                  if (lineNumbers) lineNumbers.scrollTop = e.currentTarget.scrollTop;\n                }}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"test-results-container\">\n              {testResults.map((result) => (\n                <div \n                  key={result.id}\n                  className={`test-result-panel ${result.success ? 'success' : 'error'} ${result.isFading ? 'fade-out' : ''}`}\n                >\n                  <div className=\"test-result-header\">\n                    <h4>\n                      {result.success ? (\n                        <><span className=\"success-icon\"></span>테스트 성공</>\n                      ) : (\n                        <><span className=\"error-icon\"></span>테스트 실패</>\n                      )}\n                    </h4>\n                    <button \n                      className=\"close-result\"\n                      onClick={() => {\n                        setTestResults(prev => prev.filter(r => r.id !== result.id));\n                      }}\n                    >\n                      ×\n                    </button>\n                  </div>\n                  <p className=\"test-result-message\">{result.message}</p>\n                  {result.details && (\n                    <div className=\"test-result-details\">\n                      {result.success ? (\n                        <>\n                          <div>샘플 선택: {result.details.selectedKeywords}</div>\n                          {result.details.performance && (\n                            <>\n                              <div style={{ marginTop: '10px', borderTop: '1px solid rgba(255,255,255,0.2)', paddingTop: '10px' }}>\n                                <strong>성능 측정 결과</strong>\n                              </div>\n                              <div style={{ marginTop: '5px' }}>\n                                평균 실행 시간: {result.details.performance.avgTime}ms ({result.details.speedLevel})\n                              </div>\n                              <div>\n                                최소/최대: {result.details.performance.minTime}ms / {result.details.performance.maxTime}ms\n                              </div>\n                              <div style={{ fontSize: '0.85em', color: 'rgba(255,255,255,0.7)', marginTop: '5px' }}>\n                                * 30회 실행 (3가지 크기의 데이터 × 10회)\n                              </div>\n                            </>\n                          )}\n                        </>\n                      ) : (\n                        <pre>{JSON.stringify(result.details, null, 2)}</pre>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => {\n                  setCodeEditorModal({ isOpen: false, playerId: null });\n                  setIsModalExpanded(false);\n                  setTestResults([]);\n                }}\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <div className=\"guide-link-container\">\n        <button onClick={() => setIsGuideModalOpen(true)} className=\"guide-link\">?<span>게임 방법</span></button>\n      </div>\n      <h2 style={{ marginTop: '60px' }}>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>AI와 1:1 대결하는 모드입니다.<br/>난이도를 선택할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDifficultySelection = () => (\n    <div className=\"game-screen difficulty-selection\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n      \n      <h2>AI 난이도를 선택하세요</h2>\n      <div className=\"difficulty-cards\">\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('easy')}>\n          <h3>🌱 쉬움</h3>\n          <p>AI가 무작위로 키워드를 선택합니다.<br/>편안하게 게임을 즐기세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('medium')}>\n          <h3>🌿 보통</h3>\n          <p>AI가 공개된 정답을 활용합니다.<br/>적당한 도전을 원한다면 선택하세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('hard')}>\n          <h3>🌳 어려움</h3>\n          <p>AI가 이전 추측을 분석합니다.<br/>진정한 실력을 시험해보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen(gameMode === 'solo' ? 'difficulty-selection' : 'mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\" style={{ marginTop: '60px' }}>\n          <h2 style={{ textAlign: 'center' }}>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '40px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2 style={{ textAlign: 'center', marginTop: '60px' }}>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.filter(player => gameMode === 'solo' ? player.id === 1 : true).map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>{gameMode === 'solo' ? '플레이어' : `플레이어 ${player.id}`}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                {(gameMode === 'multi' || (gameMode === 'solo' && player.id === 1)) && (\n                  <div className=\"form-section\">\n                    <div className=\"radio-group\">\n                      <div \n                        className=\"radio-option\"\n                        onClick={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                      >\n                        <input\n                          type=\"radio\"\n                          id={`human-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"human\"\n                          checked={player.type === 'human'}\n                          onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                        />\n                        <label htmlFor={`human-${player.id}`}>인간</label>\n                      </div>\n                      <div \n                        className=\"radio-option\"\n                        onClick={() => {\n                          updatePlayer(player.id, { type: 'custom-ai' });\n                          setCodeEditorModal({ isOpen: true, playerId: player.id });\n                        }}\n                      >\n                        <input\n                          type=\"radio\"\n                          id={`ai-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"custom-ai\"\n                          checked={player.type === 'custom-ai'}\n                          onChange={() => {\n                            updatePlayer(player.id, { type: 'custom-ai' });\n                            setCodeEditorModal({ isOpen: true, playerId: player.id });\n                          }}\n                        />\n                        <label htmlFor={`ai-${player.id}`}>{gameMode === 'solo' ? '커스텀 AI' : 'AI'}</label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {player.type === 'custom-ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-ai-code\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      <span className=\"btn-ai-icon\">&lt;/&gt;</span>\n                      <span>{player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}</span>\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2 style={{ textAlign: 'center' }}>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3 style={{ textAlign: 'center' }}>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '⚙️ 게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '📚 키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '🎯 정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '💡 힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '✅ 최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중<span className=\"loading-dots\"></span></h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      <span className=\"step-number\">{index + 1}</span>\n                      {index < preparationStep ? (\n                        <span className=\"success-icon-overlay\"></span>\n                      ) : index === preparationStep ? (\n                        <span className=\"loading-spinner\"></span>\n                      ) : null}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\" style={{ justifyContent: 'flex-start' }}>\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n      \n      // AI 플레이어는 건너뛰기\n      if (viewingPlayer?.type === 'built-in-ai') {\n        const nextPlayer = currentViewingPlayer + 1;\n        if (nextPlayer <= players.length) {\n          setTimeout(() => setCurrentViewingPlayer(nextPlayer), 0);\n        } else {\n          setHintViewingPhase(false);\n          if (gameManagerRef.current) {\n            gameManagerRef.current.startGame(\n              gameState.keywords,\n              gameState.answers,\n              gameState.playerHints\n            );\n          } else {\n            // GameManager 없이 게임 시작 시 타이머 시작\n            setTimeout(() => {\n              setGameState(prev => ({\n                ...prev,\n                currentTurn: 1\n              }));\n              startTimer();\n            }, 100);\n          }\n        }\n        return null;\n      }\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        // GameManager로 게임 시작\n                        if (gameManagerRef.current) {\n                          gameManagerRef.current.startGame(\n                            gameState.keywords,\n                            gameState.answers,\n                            gameState.playerHints\n                          );\n                        } else {\n                          // GameManager 없이 게임 시작 시 타이머 시작\n                          setTimeout(() => {\n                            setGameState(prev => ({\n                              ...prev,\n                              currentTurn: 1\n                            }));\n                            startTimer();\n                          }, 100);\n                        }\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <div className=\"victory-icon\"></div>\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맟추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>\n              {currentPlayer?.nickname}의 차례\n              {isAIThinking && (\n                <span className=\"ai-thinking\">\n                  생각하는 중<span className=\"loading-dots\"></span>\n                </span>\n              )}\n            </p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting || isAIThinking || !isMyTurn}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className=\"game-sidebar\">\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"global-hints-toggle\">\n                <label className=\"toggle-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={globalHintsEnabled}\n                    onChange={handleGlobalHintsToggle}\n                    className=\"toggle-checkbox\"\n                  />\n                  <span className=\"toggle-switch\"></span>\n                  <span className=\"toggle-text\">\n                    글로벌 힌트 {globalHintsEnabled ? '켜짐' : '꺼짐'}\n                  </span>\n                </label>\n                <small className=\"toggle-description\">\n                  모든 선택이 오답일 경우 자동으로 오답 표시\n                </small>\n              </div>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderGuideModal = () => {\n    if (!isGuideModalOpen) return null;\n\n    const guideSlides = [\n      {\n        title: \"게임 목표: 숨겨진 키워드를 찾아라!\",\n        content: \"수많은 키워드 풀에서 정답으로 지정된 몇 개의 키워드를 가장 먼저 찾아내는 플레이어가 승리합니다.\"\n      },\n      {\n        title: \"핵심 규칙: 단서와 추론\",\n        content: \"각 플레이어는 자신만 아는 '힌트(정답이 아닌 키워드)'를 받습니다. 매 턴, 정답이라 생각하는 키워드들을 추측하면, 그중에 진짜 정답이 '몇 개'인지 결과만 알려줍니다.\"\n      },\n      {\n        title: \"승리 조건: 완벽한 추리\",\n        content: \"모든 정답 키워드를 정확히 맞추는 추측을 가장 먼저 한 플레이어가 게임의 승자가 됩니다. 제한 시간이 있으니 신속하고 정확한 추리가 필요합니다!\"\n      }\n    ];\n\n    const goToNextSlide = () => {\n      setGuideSlideIndex(prev => (prev + 1) % guideSlides.length);\n    };\n\n    const goToPrevSlide = () => {\n      setGuideSlideIndex(prev => (prev - 1 + guideSlides.length) % guideSlides.length);\n    };\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setIsGuideModalOpen(false)}>\n        <div className=\"modal-content guide-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>게임 가이드</h3>\n            <button className=\"modal-close\" onClick={() => setIsGuideModalOpen(false)}>×</button>\n          </div>\n          <div className=\"guide-slides-container\">\n            <div className=\"guide-slide\">\n              <h4>{guideSlides[guideSlideIndex].title}</h4>\n              <p>{guideSlides[guideSlideIndex].content}</p>\n            </div>\n          </div>\n          <div className=\"guide-controls\">\n            <button onClick={goToPrevSlide}>이전</button>\n            <div className=\"slide-indicators\">\n              {guideSlides.map((_, index) => (\n                <span key={index} className={`indicator ${guideSlideIndex === index ? 'active' : ''}`}></span>\n              ))}\n            </div>\n            <button onClick={goToNextSlide}>다음</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // 테마 결정 함수\n  const getThemeClass = () => {\n    // 모드 선택 화면과 난이도 선택 화면에서는 항상 기본 테마\n    if (currentScreen === 'mode-selection' || currentScreen === 'difficulty-selection') {\n      return 'theme-intermediate';\n    }\n    \n    if (gameMode === 'solo') {\n      // 솔로 모드에서는 난이도에 따라 테마 결정\n      switch (soloDifficulty) {\n        case 'easy':\n          return 'theme-beginner';\n        case 'medium':\n          return 'theme-intermediate';\n        case 'hard':\n          return 'theme-advanced';\n        default:\n          return 'theme-intermediate';\n      }\n    } else {\n      // 멀티플레이어 모드는 항상 커스텀(네온 초록색) 테마\n      return 'theme-custom';\n    }\n  };\n\n  return (\n    <div className={`deduction-game ${getThemeClass()}`}>\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'difficulty-selection' && renderDifficultySelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n        {renderGuideModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { IPlayer } from './players/BasePlayer';\nimport { GameContext, GameStateForAI, TurnResult } from './types/GameTypes';\nimport { PlayerInfo } from './types/PlayerTypes';\nimport { PlayerFactory } from './PlayerFactory';\n\nexport interface GameManagerConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  globalHintsEnabled?: boolean;\n}\n\nexport class GameManager {\n  private players: IPlayer[] = [];\n  private currentPlayerIndex: number = 0;\n  private gameContext: GameContext;\n  private config: GameManagerConfig;\n  private isGameRunning: boolean = false;\n  private turnTimer?: NodeJS.Timeout;\n  private turnStartTime: number = 0;\n  private revealedHintsPerPlayer: Map<number, { playerId: number; hints: number[] }[]> = new Map();\n  private lastHintRevealTurn: Map<number, number> = new Map(); // 각 플레이어의 마지막 힌트 공개 턴\n  private globalHintWrongAnswers: number[] = []; // 글로벌 힌트로 추가된 오답들\n  private temporaryHiddenGlobalHints: number[] = []; // 토글 OFF시 임시 저장소\n  \n  private onTurnStart?: (player: IPlayer) => void;\n  private onTurnEnd?: (result: TurnResult) => void;\n  private onGameEnd?: (winner?: IPlayer) => void;\n  private onTimerTick?: (remainingTime: number) => void;\n  private onAIThinking?: (thinking: boolean) => void;\n\n  constructor(config: GameManagerConfig) {\n    this.config = config;\n    this.gameContext = {\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      currentTurn: 0,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n  }\n\n  addPlayer(player: IPlayer): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot add players while game is running');\n    }\n    this.players.push(player);\n  }\n\n  setPlayers(players: IPlayer[]): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot set players while game is running');\n    }\n    this.players = players;\n  }\n\n  getCurrentPlayer(): IPlayer | null {\n    if (!this.isGameRunning || this.players.length === 0) return null;\n    return this.players[this.currentPlayerIndex];\n  }\n\n  getPlayers(): IPlayer[] {\n    return [...this.players];\n  }\n\n  getGameContext(): GameContext {\n    return { ...this.gameContext };\n  }\n\n  setGlobalHintsEnabled(enabled: boolean): void {\n    this.config.globalHintsEnabled = enabled;\n    console.log(`[GameManager] Global hints ${enabled ? 'enabled' : 'disabled'}`);\n    \n    if (!enabled) {\n      // 토글 OFF: 글로벌 힌트로 추가된 오답들을 임시 저장소로 이동\n      this.temporaryHiddenGlobalHints = [...this.globalHintWrongAnswers];\n      // revealedWrongAnswers에서 글로벌 힌트 오답들 제거\n      this.gameContext.revealedWrongAnswers = this.gameContext.revealedWrongAnswers.filter(\n        idx => !this.globalHintWrongAnswers.includes(idx)\n      );\n      console.log(`[GameManager] Hiding ${this.temporaryHiddenGlobalHints.length} global hint wrong answers`);\n    } else {\n      // 토글 ON: 임시 저장소에서 글로벌 힌트 오답들 복원\n      if (this.temporaryHiddenGlobalHints.length > 0) {\n        this.temporaryHiddenGlobalHints.forEach(idx => {\n          if (!this.gameContext.revealedWrongAnswers.includes(idx)) {\n            this.gameContext.revealedWrongAnswers.push(idx);\n          }\n        });\n        console.log(`[GameManager] Restored ${this.temporaryHiddenGlobalHints.length} global hint wrong answers`);\n        this.temporaryHiddenGlobalHints = [];\n      }\n    }\n  }\n\n  async startGame(keywords: string[], answers: number[], playerHints: { [playerId: number]: number[] }): Promise<void> {\n    if (this.players.length === 0) {\n      throw new Error('No players added to the game');\n    }\n\n    this.gameContext = {\n      keywords,\n      answers,\n      playerHints,\n      currentTurn: 1,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n\n    this.currentPlayerIndex = 0;\n    this.isGameRunning = true;\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    this.globalHintWrongAnswers = [];\n    this.temporaryHiddenGlobalHints = [];\n    \n    // 게임 시작 시 설정 정보 로그\n    console.log('=== 게임 설정 ===');\n    console.log(`키워드 풀: ${this.config.keywordPoolSize}개`);\n    console.log(`정답 개수: ${this.config.answerCount}개`);\n    console.log(`힌트 개수: ${this.config.hintCount}개`);\n    console.log(`플레이어 수: ${this.players.length}명`);\n    console.log(`게임 복잡도: ${this.calculateGameComplexity().toFixed(2)}`);\n    console.log(`예상 게임 길이: ${this.calculateExpectedTurns(this.calculateGameComplexity())}턴`);\n    console.log('================');\n\n    await this.startNextTurn();\n  }\n\n  private async startNextTurn(): Promise<void> {\n    if (!this.isGameRunning) return;\n\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 턴 시작 시간 기록\n    this.turnStartTime = Date.now();\n\n    if (this.onTurnStart) {\n      this.onTurnStart(currentPlayer);\n    }\n\n    currentPlayer.onTurnStart?.();\n\n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      this.startTurnTimer();\n      // 인간 플레이어의 경우에도 makeGuess를 호출하여 Promise를 생성\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      currentPlayer.makeGuess(gameStateForAI).then(guess => {\n        this.processTurn(guess);\n      });\n    } else {\n      // AI 플레이어의 경우에도 타이머 시작\n      this.startTurnTimer();\n      \n      // AI 플레이어의 경우, 사람처럼 보이도록 약간의 딜레이 추가\n      if (this.onAIThinking) {\n        this.onAIThinking(true);\n      }\n      \n      const thinkingTime = Math.random() * 2000 + 1500; // 1.5초 ~ 3.5초 사이의 랜덤 시간\n      \n      await new Promise(resolve => setTimeout(resolve, thinkingTime));\n      \n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      const guess = await currentPlayer.makeGuess(gameStateForAI);\n      \n      if (this.onAIThinking) {\n        this.onAIThinking(false);\n      }\n      \n      await this.processTurn(guess);\n    }\n  }\n\n  private startTurnTimer(): void {\n    let remainingTime = this.config.timeLimit;\n    \n    if (this.onTimerTick) {\n      this.onTimerTick(remainingTime);\n    }\n\n    this.turnTimer = setInterval(() => {\n      remainingTime--;\n      \n      if (this.onTimerTick) {\n        this.onTimerTick(remainingTime);\n      }\n\n      if (remainingTime <= 0) {\n        this.handleTimeout();\n      }\n    }, 1000);\n  }\n\n  private stopTurnTimer(): void {\n    if (this.turnTimer) {\n      clearInterval(this.turnTimer);\n      this.turnTimer = undefined;\n    }\n  }\n\n  private handleTimeout(): void {\n    this.stopTurnTimer();\n    \n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n    \n    const availableIndices = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => !this.gameContext.revealedWrongAnswers.includes(idx));\n    \n    const shuffled = [...availableIndices].sort(() => Math.random() - 0.5);\n    const autoGuess = shuffled.slice(0, this.config.answerCount);\n    \n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      // HumanPlayer의 경우 submitGuess를 통해 Promise를 resolve\n      currentPlayer.submitGuess(autoGuess);\n    } else {\n      this.processTurn(autoGuess);\n    }\n  }\n\n  async submitHumanGuess(indices: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    \n    if (!currentPlayer || !PlayerFactory.isHumanPlayer(currentPlayer)) {\n      throw new Error('Current player is not a human player');\n    }\n\n    this.stopTurnTimer();\n    currentPlayer.submitGuess(indices);\n    // processTurn은 makeGuess Promise가 resolve될 때 자동으로 호출됨\n  }\n\n  private async processTurn(guess: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 타이머 중지 (중요: AI 플레이어도 타이머를 사용하므로)\n    this.stopTurnTimer();\n\n    const correctCount = guess.filter(idx => \n      this.gameContext.answers.includes(idx)\n    ).length;\n\n    const isWinner = correctCount === this.config.answerCount && \n                     guess.every(idx => this.gameContext.answers.includes(idx));\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = Math.round((Date.now() - this.turnStartTime) / 1000);\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayer.getInfo().id,\n      playerName: currentPlayer.getInfo().nickname,\n      guess: [...guess],\n      guessKeywords: guess.map(idx => this.gameContext.keywords[idx]),\n      correctCount,\n      turnNumber: this.gameContext.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    this.gameContext.turnHistory.push(turnResult);\n    \n    // Global hints feature: If all guesses are wrong, reveal them as wrong answers\n    if (this.config.globalHintsEnabled && correctCount === 0) {\n      console.log('[Global Hints] All guesses are wrong, revealing as wrong answers');\n      guess.forEach(idx => {\n        if (!this.gameContext.revealedWrongAnswers.includes(idx) && \n            !this.gameContext.revealedAnswers.includes(idx) &&\n            !this.globalHintWrongAnswers.includes(idx)) {\n          this.gameContext.revealedWrongAnswers.push(idx);\n          this.globalHintWrongAnswers.push(idx); // 글로벌 힌트로 추가된 것 추적\n        }\n      });\n    }\n    \n    currentPlayer.onTurnEnd?.({\n      selectedIndices: guess,\n      timeUsed: turnResult.timeUsed,\n      timestamp: Date.now()\n    });\n\n    if (this.onTurnEnd) {\n      this.onTurnEnd(turnResult);\n    }\n\n    if (isWinner) {\n      this.endGame(currentPlayer);\n    } else if (this.config.maxTurns && this.gameContext.currentTurn >= this.config.maxTurns) {\n      this.endGame();\n    } else {\n      this.gameContext.currentTurn++;\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;\n      await this.startNextTurn();\n    }\n  }\n\n  private createGameStateForAI(player: IPlayer): GameStateForAI {\n    const playerInfo = player.getInfo();\n    const myHints = this.gameContext.playerHints[playerInfo.id] || [];\n    \n    const previousGuesses = this.gameContext.turnHistory.map(turn => ({\n      playerId: turn.playerId,\n      guess: turn.guess,\n      correctCount: turn.correctCount\n    }));\n\n    // 난이도별 힌트 공개 주기 설정\n    const hintRevealSchedule = this.getHintRevealSchedule(playerInfo);\n    const revealedOtherHints = this.updateAndGetRevealedHints(playerInfo.id, hintRevealSchedule);\n\n    return {\n      keywords: [...this.gameContext.keywords],\n      myHints,\n      previousGuesses,\n      revealedAnswers: [...this.gameContext.revealedAnswers],\n      revealedWrongAnswers: [...this.gameContext.revealedWrongAnswers],\n      answerCount: this.config.answerCount,\n      currentTurn: this.gameContext.currentTurn,\n      maxTurns: this.config.maxTurns,\n      timeLimit: this.config.timeLimit,\n      revealedOtherHints\n    };\n  }\n\n  private getHintRevealSchedule(playerInfo: PlayerInfo): { startTurn: number; initialInterval: number; accelerationFactor: number } {\n    // AI 난이도에 따른 힌트 공개 스케줄을 동적으로 계산\n    if (playerInfo.type === 'built-in-ai') {\n      // 게임 복잡도 계산\n      const complexity = this.calculateGameComplexity();\n      const expectedTurns = this.calculateExpectedTurns(complexity);\n      \n      // 난이도별 AI 성장 구간 비율 정의 (Medium 강화)\n      const difficultyProfiles = {\n        easy: { \n          startRatio: 0.5,       // 50%에서 시작 (훨씬 늦게)\n          initialInterval: 8,    // 초기 간격 (2배로 증가)\n          accelerationFactor: 1.2 // 가속도 계수 (더 느리게)\n        },\n        medium: { \n          startRatio: 0.25,      // 25%에서 시작 (기존 Easy 값 사용)\n          initialInterval: 4,    // 초기 간격 (기존 Easy 값 사용)\n          accelerationFactor: 1.5 // 가속도 계수 (기존 Easy 값 사용)\n        },\n        hard: { \n          startRatio: 0.05,      // 5%에서 시작\n          initialInterval: 1,    // 초기 간격\n          accelerationFactor: 8.0 // 가속도 계수\n        }\n      };\n      \n      const profile = difficultyProfiles[playerInfo.aiDifficulty || 'medium'];\n      \n      // 시작 턴 계산\n      const startTurn = Math.max(1, Math.floor(expectedTurns * profile.startRatio));\n      \n      console.log(`[${playerInfo.aiDifficulty} AI] 예상 게임 길이: ${expectedTurns}턴, 시작: ${startTurn}턴, 초기 간격: ${profile.initialInterval}턴`);\n      \n      return { \n        startTurn, \n        initialInterval: profile.initialInterval,\n        accelerationFactor: profile.accelerationFactor\n      };\n    }\n    // 커스텀 AI나 휴먼 플레이어는 힌트 공개 없음\n    return { startTurn: Infinity, initialInterval: Infinity, accelerationFactor: 1 };\n  }\n  \n  private calculateGameComplexity(): number {\n    // 게임 복잡도 = (키워드 풀 크기 - 정답 개수) / 정답 개수\n    return (this.config.keywordPoolSize - this.config.answerCount) / this.config.answerCount;\n  }\n  \n  private calculateExpectedTurns(complexity: number): number {\n    // 복잡도 기반 예상 게임 길이 계산\n    // 기본 공식: 복잡도 * 난이도 계수 + 최소 턴 수\n    const baseTurns = Math.ceil(complexity * 1.5 + 10);\n    \n    // 최대 턴 수가 설정되어 있으면 그것도 고려\n    if (this.config.maxTurns) {\n      return Math.min(baseTurns, this.config.maxTurns * 0.8); // 최대 턴의 80%를 예상 길이로\n    }\n    \n    return baseTurns;\n  }\n\n  private updateAndGetRevealedHints(playerId: number, schedule: { startTurn: number; initialInterval: number; accelerationFactor: number }): { playerId: number; hints: number[] }[] {\n    const currentTurn = this.gameContext.currentTurn;\n    \n    // 아직 힌트 공개 시작 턴이 안 됐으면 빈 배열 반환\n    if (currentTurn < schedule.startTurn) {\n      return [];\n    }\n\n    // 마지막 힌트 공개 턴 가져오기\n    const lastRevealTurn = this.lastHintRevealTurn.get(playerId) || schedule.startTurn - 1;\n    const turnsPassedSinceStart = currentTurn - schedule.startTurn;\n    \n    // 가속도 기반 간격 계산: 간격 = 초기간격 / (경과턴 / 10 + 1)\n    const acceleratedInterval = Math.max(1, Math.floor(\n      schedule.initialInterval / (1 + turnsPassedSinceStart / (10 / schedule.accelerationFactor))\n    ));\n    \n    // 이번 턴에 공개할 힌트 수 계산: 난이도별로 다르게\n    let revealMultiplier = 0.15; // Easy: 매우 적게 공개\n    if (schedule.accelerationFactor >= 1.5 && schedule.accelerationFactor < 8.0) { // Medium\n      revealMultiplier = 0.3; // Medium: 기존 Easy 수준으로\n    } else if (schedule.accelerationFactor >= 8.0) { // Hard\n      revealMultiplier = 1.5; // Hard: 더 많이 공개\n    }\n    const hintsToRevealThisTurn = Math.max(1, Math.floor(turnsPassedSinceStart * revealMultiplier));\n    \n    // 간격이 지났는지 확인\n    const shouldReveal = currentTurn >= lastRevealTurn + acceleratedInterval;\n    \n    // 이미 공개된 힌트 가져오기\n    let revealedHints = this.revealedHintsPerPlayer.get(playerId) || [];\n    \n    if (shouldReveal) {\n      // 다른 플레이어들의 힌트 중 아직 공개하지 않은 것들\n      const otherPlayers = this.players.filter(p => p.getInfo().id !== playerId);\n      const availableHints: { playerId: number; hints: number[] }[] = [];\n\n      for (const otherPlayer of otherPlayers) {\n        const otherPlayerId = otherPlayer.getInfo().id;\n        const otherHints = this.gameContext.playerHints[otherPlayerId] || [];\n        \n        // 이미 공개된 플레이어인지 확인\n        if (!revealedHints.find(rh => rh.playerId === otherPlayerId)) {\n          availableHints.push({ playerId: otherPlayerId, hints: otherHints });\n        }\n      }\n\n      // 이번 턴에 여러 힌트 공개\n      let revealedThisTurn = 0;\n      while (revealedThisTurn < hintsToRevealThisTurn && availableHints.length > 0) {\n        const randomIndex = Math.floor(Math.random() * availableHints.length);\n        const newHint = availableHints.splice(randomIndex, 1)[0];\n        revealedHints.push(newHint);\n        revealedThisTurn++;\n        \n        // 힌트 공개 로그\n        const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n        if (playerInfo) {\n          console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${newHint.playerId}의 힌트 ${newHint.hints.length}개를 알게 되었습니다.`);\n        }\n      }\n      \n      // 난이도별 임계점: Medium은 40%, Hard는 즉시 전체 공개\n      let thresholdRatio = 0.5; // Easy\n      if (schedule.accelerationFactor >= 3.0 && schedule.accelerationFactor < 8.0) { // Medium\n        thresholdRatio = 0.4;\n      } else if (schedule.accelerationFactor >= 8.0) { // Hard\n        thresholdRatio = 0.1; // 10%만 되어도 모두 공개\n      }\n      \n      // Hard AI는 게임 후반(마지막 10%)에 모든 힌트 즉시 공개\n      const gameProgress = currentTurn / (this.config.maxTurns || 30);\n      const isHardAI = schedule.accelerationFactor >= 8.0;\n      const isEndgame = gameProgress >= 0.7; // 70% 진행 시점\n      \n      const totalAvailableHints = (this.players.length - 1);\n      if ((revealedHints.length >= totalAvailableHints * thresholdRatio || (isHardAI && isEndgame)) && availableHints.length > 0) {\n        console.log(`[턴 ${currentTurn}] ${isHardAI && isEndgame ? 'Hard AI 후반 모드 -' : '임계점 도달 -'} 나머지 모든 힌트 공개`);\n        for (const hint of availableHints) {\n          revealedHints.push(hint);\n          const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n          if (playerInfo) {\n            console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${hint.playerId}의 힌트 ${hint.hints.length}개를 추가로 알게 되었습니다.`);\n          }\n        }\n      }\n      \n      // 마지막 공개 턴 업데이트\n      this.lastHintRevealTurn.set(playerId, currentTurn);\n      \n      // 다음 간격 로그\n      const nextInterval = Math.max(1, Math.floor(\n        schedule.initialInterval / (1 + (turnsPassedSinceStart + 1) / (10 / schedule.accelerationFactor))\n      ));\n      console.log(`[${this.players.find(p => p.getInfo().id === playerId)?.getInfo().nickname}] 다음 힌트 공개까지: ${nextInterval}턴`);\n    }\n\n    // 업데이트된 힌트 저장\n    this.revealedHintsPerPlayer.set(playerId, revealedHints);\n\n    return [...revealedHints];\n  }\n\n  revealAnswer(): boolean {\n    const unrevealedAnswers = this.gameContext.answers.filter(\n      ans => !this.gameContext.revealedAnswers.includes(ans)\n    );\n    \n    if (unrevealedAnswers.length === 0) return false;\n    \n    const randomAnswer = unrevealedAnswers[\n      Math.floor(Math.random() * unrevealedAnswers.length)\n    ];\n    \n    this.gameContext.revealedAnswers.push(randomAnswer);\n    return true;\n  }\n\n  revealWrongAnswer(): boolean {\n    const wrongAnswers = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => \n      !this.gameContext.answers.includes(idx) && \n      !this.gameContext.revealedWrongAnswers.includes(idx)\n    );\n    \n    if (wrongAnswers.length === 0) return false;\n    \n    const randomWrong = wrongAnswers[\n      Math.floor(Math.random() * wrongAnswers.length)\n    ];\n    \n    this.gameContext.revealedWrongAnswers.push(randomWrong);\n    return true;\n  }\n\n  private endGame(winner?: IPlayer): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    \n    if (this.onGameEnd) {\n      this.onGameEnd(winner);\n    }\n  }\n\n  stopGame(): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    this.players.forEach(player => player.reset());\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    this.globalHintWrongAnswers = [];\n    this.temporaryHiddenGlobalHints = [];\n  }\n\n  isRunning(): boolean {\n    return this.isGameRunning;\n  }\n\n  setEventHandlers(handlers: {\n    onTurnStart?: (player: IPlayer) => void;\n    onTurnEnd?: (result: TurnResult) => void;\n    onGameEnd?: (winner?: IPlayer) => void;\n    onTimerTick?: (remainingTime: number) => void;\n    onAIThinking?: (thinking: boolean) => void;\n  }): void {\n    this.onTurnStart = handlers.onTurnStart;\n    this.onTurnEnd = handlers.onTurnEnd;\n    this.onGameEnd = handlers.onGameEnd;\n    this.onTimerTick = handlers.onTimerTick;\n    this.onAIThinking = handlers.onAIThinking;\n  }\n}","import { PlayerInfo, PlayerMove } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport interface IPlayer {\n  getInfo(): PlayerInfo;\n  \n  makeGuess(gameState: GameStateForAI): Promise<number[]>;\n  \n  isReady(): boolean;\n  \n  onTurnStart?(): void;\n  \n  onTurnEnd?(move: PlayerMove): void;\n  \n  reset(): void;\n}\n\nexport abstract class BasePlayer implements IPlayer {\n  protected playerInfo: PlayerInfo;\n  protected ready: boolean = false;\n\n  constructor(playerInfo: PlayerInfo) {\n    this.playerInfo = playerInfo;\n  }\n\n  getInfo(): PlayerInfo {\n    return this.playerInfo;\n  }\n\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  abstract makeGuess(gameState: GameStateForAI): Promise<number[]>;\n\n  onTurnStart(): void {\n    // Override in subclasses if needed\n  }\n\n  onTurnEnd(move: PlayerMove): void {\n    // Override in subclasses if needed\n  }\n\n  reset(): void {\n    this.ready = false;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class HumanPlayer extends BasePlayer {\n  private resolveGuess?: (indices: number[]) => void;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    return new Promise<number[]>((resolve) => {\n      this.resolveGuess = resolve;\n    });\n  }\n\n  submitGuess(indices: number[]): void {\n    if (this.resolveGuess) {\n      this.resolveGuess(indices);\n      this.resolveGuess = undefined;\n    }\n  }\n\n  isWaitingForInput(): boolean {\n    return this.resolveGuess !== undefined;\n  }\n\n  reset(): void {\n    super.reset();\n    this.resolveGuess = undefined;\n    this.ready = true;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIStrategy } from '../strategies/AIStrategy';\n\nexport class BuiltInAIPlayer extends BasePlayer {\n  private strategy: AIStrategy;\n  private thinkingTime: number = 2000; // 2 seconds by default\n  \n  constructor(playerInfo: PlayerInfo, strategy: AIStrategy) {\n    super(playerInfo);\n    this.strategy = strategy;\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    const startTime = Date.now();\n    \n    const selectedIndices = this.strategy.selectKeywords(gameState);\n    \n    const elapsedTime = Date.now() - startTime;\n    const remainingTime = Math.max(0, this.thinkingTime - elapsedTime);\n    \n    if (remainingTime > 0) {\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\n    }\n    \n    return selectedIndices;\n  }\n\n  setThinkingTime(milliseconds: number): void {\n    this.thinkingTime = Math.max(500, milliseconds);\n  }\n\n  getStrategy(): AIStrategy {\n    return this.strategy;\n  }\n\n  setStrategy(strategy: AIStrategy): void {\n    this.strategy = strategy;\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeValidator } from './AICodeValidator';\n\nexport interface ExecutionResult {\n  success: boolean;\n  result?: number[];\n  error?: string;\n  executionTime?: number;\n  logs?: string[];\n}\n\nexport interface SecureGameState {\n  readonly keywords: ReadonlyArray<string>;\n  readonly myHints: ReadonlyArray<number>;\n  readonly answerCount: number;\n  readonly previousGuesses: ReadonlyArray<{\n    playerId: number;\n    guess: number[];\n    correctCount: number;\n  }>;\n  readonly revealedAnswers: ReadonlyArray<number>;\n  readonly revealedWrongAnswers: ReadonlyArray<number>;\n  readonly currentTurn: number;\n  readonly timeLimit: number;\n}\n\nexport class AICodeExecutor {\n  private static instance: AICodeExecutor;\n  private executionCounter = 0;\n  private readonly MAX_EXECUTION_TIME = 2500; // 2.5 seconds with buffer\n\n  static getInstance(): AICodeExecutor {\n    if (!AICodeExecutor.instance) {\n      AICodeExecutor.instance = new AICodeExecutor();\n    }\n    return AICodeExecutor.instance;\n  }\n\n  async executeUserAI(\n    code: string,\n    gameState: GameStateForAI,\n    playerId: number\n  ): Promise<ExecutionResult> {\n    const startTime = performance.now();\n    const logs: string[] = [];\n\n    try {\n      // Step 1: Validate code\n      const validation = AICodeValidator.validate(code);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Code validation failed: ${validation.errors.join('; ')}`,\n          executionTime: performance.now() - startTime\n        };\n      }\n\n      // Log warnings if any\n      if (validation.warnings) {\n        logs.push(...validation.warnings.map(w => `Warning: ${w}`));\n      }\n\n      // Step 2: Preprocess code\n      const processedCode = AICodeValidator.preprocessCode(code);\n\n      // Step 3: Create secure game state\n      const secureGameState = this.createSecureGameState(gameState);\n\n      // Step 4: Execute in worker\n      const result = await this.executeInWorker(processedCode, secureGameState, logs);\n\n      const executionTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        result,\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n\n    } catch (error: any) {\n      const executionTime = performance.now() - startTime;\n      \n      return {\n        success: false,\n        error: error.message || 'Unknown error occurred',\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n    }\n  }\n\n  private createSecureGameState(gameState: GameStateForAI): SecureGameState {\n    // Deep freeze arrays and objects to prevent modification\n    const deepFreeze = <T>(obj: T): T => {\n      Object.freeze(obj);\n      \n      Object.getOwnPropertyNames(obj).forEach(prop => {\n        if (obj[prop as keyof T] !== null\n            && (typeof obj[prop as keyof T] === 'object' || typeof obj[prop as keyof T] === 'function')\n            && !Object.isFrozen(obj[prop as keyof T])) {\n          deepFreeze(obj[prop as keyof T]);\n        }\n      });\n      \n      return obj;\n    };\n\n    return deepFreeze({\n      keywords: [...gameState.keywords],\n      myHints: [...gameState.myHints],\n      answerCount: gameState.answerCount,\n      previousGuesses: gameState.previousGuesses.map(g => ({\n        playerId: g.playerId,\n        guess: [...g.guess],\n        correctCount: g.correctCount\n      })),\n      revealedAnswers: [...gameState.revealedAnswers],\n      revealedWrongAnswers: [...gameState.revealedWrongAnswers],\n      currentTurn: gameState.currentTurn,\n      timeLimit: gameState.timeLimit\n    });\n  }\n\n  private executeInWorker(\n    code: string,\n    gameState: SecureGameState,\n    logs: string[]\n  ): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const executionId = `exec_${++this.executionCounter}_${Date.now()}`;\n      \n      // Create worker\n      // Get the correct path for the worker file\n      const publicUrl = process.env.PUBLIC_URL || '';\n      let workerPath = publicUrl + '/ai-worker.js';\n      \n      // In development, if the path starts with /web, use it directly\n      if (window.location.pathname.startsWith('/web') && !workerPath.startsWith('/web')) {\n        workerPath = '/web/ai-worker.js';\n      }\n      \n      const worker = new Worker(workerPath);\n      \n      // Set timeout\n      const timeoutId = setTimeout(() => {\n        worker.terminate();\n        reject(new Error('Execution timeout exceeded (2 seconds)'));\n      }, this.MAX_EXECUTION_TIME);\n\n      // Handle messages\n      worker.onmessage = (event) => {\n        const { type, executionId: msgId, result, error, data } = event.data;\n\n        // Handle console.log messages\n        if (type === 'log' && msgId === executionId) {\n          const logMessage = data.map((arg: any) => \n            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n          ).join(' ');\n          logs.push(logMessage);\n          return;\n        }\n\n        // Handle result or error\n        if (msgId === executionId) {\n          clearTimeout(timeoutId);\n          worker.terminate();\n\n          if (error) {\n            reject(new Error(error));\n          } else if (result) {\n            resolve(result);\n          } else {\n            reject(new Error('No result returned from AI'));\n          }\n        }\n      };\n\n      // Handle worker errors\n      worker.onerror = (error) => {\n        clearTimeout(timeoutId);\n        worker.terminate();\n        \n        // More detailed error message\n        let errorMessage = 'Worker error: ';\n        if (error.message) {\n          errorMessage += error.message;\n        } else {\n          errorMessage += 'Failed to load worker file. Make sure ai-worker.js is in the public directory.';\n        }\n        \n        console.error('Worker load error:', error);\n        console.error('Worker path attempted:', workerPath);\n        \n        reject(new Error(errorMessage));\n      };\n\n      // Send execution request\n      worker.postMessage({\n        code,\n        gameState,\n        executionId\n      });\n    });\n  }\n\n  // Helper method to validate guess format\n  static validateGuess(guess: number[], gameState: GameStateForAI): string | null {\n    if (!Array.isArray(guess)) {\n      return 'Guess must be an array';\n    }\n\n    if (guess.length !== gameState.answerCount) {\n      return `Guess must contain exactly ${gameState.answerCount} elements`;\n    }\n\n    const keywordCount = gameState.keywords.length;\n    for (let i = 0; i < guess.length; i++) {\n      const idx = guess[i];\n      \n      if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n        return `Element at index ${i} must be an integer`;\n      }\n\n      if (idx < 0 || idx >= keywordCount) {\n        return `Element at index ${i} (${idx}) is out of bounds`;\n      }\n\n      if (gameState.myHints.includes(idx)) {\n        return `Element at index ${i} (${idx}) is one of your hints`;\n      }\n    }\n\n    const uniqueIndices = new Set(guess);\n    if (uniqueIndices.size !== guess.length) {\n      return 'Guess contains duplicate indices';\n    }\n\n    return null; // Valid\n  }\n}","export interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage?: number;\n  validationTime?: number;\n  workerCreationTime?: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  timestamp: number;\n  playerId: number;\n  success: boolean;\n  errorType?: string;\n}\n\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metricsHistory: DetailedMetrics[] = [];\n  private readonly MAX_HISTORY_SIZE = 1000;\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  async measureExecution<T>(\n    executor: () => Promise<T>,\n    metadata?: { playerId?: number }\n  ): Promise<[T, PerformanceMetrics]> {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    try {\n      const result = await executor();\n      \n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record successful execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: true\n        });\n      }\n\n      return [result, metrics];\n    } catch (error: any) {\n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record failed execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: false,\n          errorType: error.constructor.name\n        });\n      }\n\n      throw { error, metrics };\n    }\n  }\n\n  measureSync<T>(executor: () => T): [T, PerformanceMetrics] {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    const result = executor();\n    \n    const endTime = performance.now();\n    const endMemory = this.getMemoryUsage();\n\n    const metrics: PerformanceMetrics = {\n      executionTime: endTime - startTime,\n      memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n    };\n\n    return [result, metrics];\n  }\n\n  private getMemoryUsage(): number | undefined {\n    // Check if memory API is available (Chrome/Edge)\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return undefined;\n  }\n\n  private recordMetrics(metrics: DetailedMetrics): void {\n    this.metricsHistory.push(metrics);\n\n    // Keep history size under control\n    if (this.metricsHistory.length > this.MAX_HISTORY_SIZE) {\n      this.metricsHistory = this.metricsHistory.slice(-this.MAX_HISTORY_SIZE);\n    }\n  }\n\n  getPlayerStats(playerId: number): {\n    totalExecutions: number;\n    successRate: number;\n    averageExecutionTime: number;\n    maxExecutionTime: number;\n    recentErrors: string[];\n  } {\n    const playerMetrics = this.metricsHistory.filter(m => m.playerId === playerId);\n    \n    if (playerMetrics.length === 0) {\n      return {\n        totalExecutions: 0,\n        successRate: 0,\n        averageExecutionTime: 0,\n        maxExecutionTime: 0,\n        recentErrors: []\n      };\n    }\n\n    const successful = playerMetrics.filter(m => m.success);\n    const totalTime = playerMetrics.reduce((sum, m) => sum + m.executionTime, 0);\n    const maxTime = Math.max(...playerMetrics.map(m => m.executionTime));\n    \n    const recentErrors = playerMetrics\n      .filter(m => !m.success && m.errorType)\n      .slice(-5)\n      .map(m => m.errorType!);\n\n    return {\n      totalExecutions: playerMetrics.length,\n      successRate: successful.length / playerMetrics.length,\n      averageExecutionTime: totalTime / playerMetrics.length,\n      maxExecutionTime: maxTime,\n      recentErrors\n    };\n  }\n\n  getGlobalStats(): {\n    totalExecutions: number;\n    averageSuccessRate: number;\n    averageExecutionTime: number;\n    peakExecutionTime: number;\n    activePlayerCount: number;\n  } {\n    if (this.metricsHistory.length === 0) {\n      return {\n        totalExecutions: 0,\n        averageSuccessRate: 0,\n        averageExecutionTime: 0,\n        peakExecutionTime: 0,\n        activePlayerCount: 0\n      };\n    }\n\n    const successful = this.metricsHistory.filter(m => m.success);\n    const totalTime = this.metricsHistory.reduce((sum, m) => sum + m.executionTime, 0);\n    const peakTime = Math.max(...this.metricsHistory.map(m => m.executionTime));\n    \n    const uniquePlayers = new Set(this.metricsHistory.map(m => m.playerId));\n\n    return {\n      totalExecutions: this.metricsHistory.length,\n      averageSuccessRate: successful.length / this.metricsHistory.length,\n      averageExecutionTime: totalTime / this.metricsHistory.length,\n      peakExecutionTime: peakTime,\n      activePlayerCount: uniquePlayers.size\n    };\n  }\n\n  clearHistory(): void {\n    this.metricsHistory = [];\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeExecutor, ExecutionResult } from './AICodeExecutor';\nimport { PerformanceMonitor, PerformanceMetrics } from './PerformanceMonitor';\n\nexport interface AIExecutionResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  success: boolean;\n  executionTime: number;\n  error?: string;\n  logs?: string[];\n  metrics?: PerformanceMetrics;\n}\n\nexport class AIExecutionHandler {\n  private static instance: AIExecutionHandler;\n  private executor: AICodeExecutor;\n  private monitor: PerformanceMonitor;\n\n  private constructor() {\n    this.executor = AICodeExecutor.getInstance();\n    this.monitor = PerformanceMonitor.getInstance();\n  }\n\n  static getInstance(): AIExecutionHandler {\n    if (!AIExecutionHandler.instance) {\n      AIExecutionHandler.instance = new AIExecutionHandler();\n    }\n    return AIExecutionHandler.instance;\n  }\n\n  async executeWithFallback(\n    userCode: string,\n    gameState: GameStateForAI,\n    playerId: number,\n    playerName: string\n  ): Promise<AIExecutionResult> {\n    try {\n      // Measure execution with performance monitoring\n      const [executionResult, metrics] = await this.monitor.measureExecution(\n        () => this.executor.executeUserAI(userCode, gameState, playerId),\n        { playerId }\n      );\n\n      if (executionResult.success && executionResult.result) {\n        // Log successful execution\n        console.log(`AI execution successful for player ${playerId} (${playerName})`, {\n          executionTime: executionResult.executionTime,\n          guess: executionResult.result,\n          logs: executionResult.logs\n        });\n\n        return {\n          playerId,\n          playerName,\n          guess: executionResult.result,\n          success: true,\n          executionTime: executionResult.executionTime || 0,\n          logs: executionResult.logs,\n          metrics\n        };\n      } else {\n        // Execution failed but was caught properly\n        throw new Error(executionResult.error || 'Unknown execution error');\n      }\n\n    } catch (error: any) {\n      console.error(`AI execution failed for player ${playerId} (${playerName}):`, error);\n\n      // Generate fallback guess\n      const fallbackGuess = this.generateFallbackGuess(gameState);\n      \n      const errorDetails = error.metrics ? {\n        error: error.error?.message || 'Unknown error',\n        executionTime: error.metrics.executionTime\n      } : {\n        error: error.message || 'Unknown error',\n        executionTime: 0\n      };\n\n      return {\n        playerId,\n        playerName,\n        guess: fallbackGuess,\n        success: false,\n        ...errorDetails,\n        metrics: error.metrics\n      };\n    }\n  }\n\n  private generateFallbackGuess(gameState: GameStateForAI): number[] {\n    const available: number[] = [];\n    \n    // Find all available keywords (not hints, not revealed wrong answers)\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!gameState.myHints.includes(i) && \n          !gameState.revealedWrongAnswers.includes(i)) {\n        available.push(i);\n      }\n    }\n\n    // Start with revealed answers\n    const guess = [...gameState.revealedAnswers];\n\n    // Fill remaining slots randomly\n    while (guess.length < gameState.answerCount && available.length > 0) {\n      const randomIndex = Math.floor(Math.random() * available.length);\n      const selected = available.splice(randomIndex, 1)[0];\n      \n      if (!guess.includes(selected)) {\n        guess.push(selected);\n      }\n    }\n\n    // If still not enough (edge case), fill with any valid indices\n    if (guess.length < gameState.answerCount) {\n      for (let i = 0; i < gameState.keywords.length && guess.length < gameState.answerCount; i++) {\n        if (!gameState.myHints.includes(i) && !guess.includes(i)) {\n          guess.push(i);\n        }\n      }\n    }\n\n    return guess.slice(0, gameState.answerCount);\n  }\n\n  // Get execution statistics for a player\n  getPlayerStats(playerId: number) {\n    return this.monitor.getPlayerStats(playerId);\n  }\n\n  // Get global execution statistics\n  getGlobalStats() {\n    return this.monitor.getGlobalStats();\n  }\n\n  // Validate AI code without executing\n  async validateCode(code: string): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    const { AICodeValidator } = await import('./AICodeValidator');\n    \n    const result = AICodeValidator.validate(code);\n    \n    return {\n      valid: result.isValid,\n      errors: result.errors.length > 0 ? result.errors : undefined,\n      warnings: result.warnings\n    };\n  }\n\n  // Test AI code with a sample game state\n  async testAICode(\n    code: string,\n    sampleGameState?: GameStateForAI\n  ): Promise<{\n    success: boolean;\n    result?: number[];\n    error?: string;\n    executionTime?: number;\n    logs?: string[];\n  }> {\n    // Use provided game state or create a sample one\n    const testGameState = sampleGameState || this.createSampleGameState();\n    \n    try {\n      const result = await this.executor.executeUserAI(code, testGameState, -1); // -1 for test player ID\n      return result;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message || 'Test execution failed'\n      };\n    }\n  }\n\n  private createSampleGameState(): GameStateForAI {\n    return {\n      keywords: ['사과', '바나나', '체리', '포도', '망고', '복숭아', '딸기', '수박', '멜론', '키위'],\n      myHints: [1, 3], // 바나나, 포도는 정답이 아님\n      answerCount: 3,\n      previousGuesses: [\n        { playerId: 1, guess: [0, 2, 4], correctCount: 2 },\n        { playerId: 2, guess: [2, 5, 6], correctCount: 1 }\n      ],\n      revealedAnswers: [],\n      revealedWrongAnswers: [7], // 수박은 정답이 아님\n      currentTurn: 3,\n      timeLimit: 60\n    };\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIExecutionHandler } from '../sandbox/AIExecutionHandler';\n\nexport class CustomAIPlayer extends BasePlayer {\n  private aiCode: string;\n  private aiLanguage: 'javascript' | 'typescript';\n  private executionHandler: AIExecutionHandler;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.aiCode = playerInfo.customCode || '';\n    this.aiLanguage = playerInfo.customLanguage || 'javascript';\n    this.executionHandler = AIExecutionHandler.getInstance();\n    this.ready = this.validateCode();\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    try {\n      // Use the secure sandbox execution\n      const result = await this.executionHandler.executeWithFallback(\n        this.aiCode,\n        gameState,\n        this.playerInfo.id,\n        this.playerInfo.nickname\n      );\n\n      if (!result.success) {\n        console.error(`Custom AI execution failed for ${this.playerInfo.nickname}:`, result.error);\n        if (result.logs && result.logs.length > 0) {\n          console.log(`AI logs for ${this.playerInfo.nickname}:`, result.logs);\n        }\n      }\n\n      return result.guess;\n    } catch (error) {\n      console.error('Unexpected error in Custom AI execution:', error);\n      return this.fallbackStrategy(gameState);\n    }\n  }\n\n  private fallbackStrategy(gameState: GameStateForAI): number[] {\n    const availableIndices = Array.from(\n      { length: gameState.keywords.length }, \n      (_, i) => i\n    ).filter(idx => !gameState.revealedWrongAnswers.includes(idx));\n    \n    const selectedIndices = [...gameState.revealedAnswers];\n    \n    while (selectedIndices.length < gameState.answerCount && availableIndices.length > 0) {\n      const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n      if (remaining.length === 0) break;\n      \n      const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n      selectedIndices.push(randomIdx);\n    }\n    \n    return selectedIndices;\n  }\n\n  private validateCode(): boolean {\n    if (!this.aiCode.trim()) return false;\n    \n    // Use the execution handler's validation\n    const validationPromise = this.executionHandler.validateCode(this.aiCode);\n    \n    // Since constructor can't be async, we'll do a simple check here\n    // and rely on full validation during execution\n    try {\n      // Basic syntax check\n      new Function(this.aiCode);\n      return true;\n    } catch (error) {\n      console.error('AI code validation error:', error);\n      return false;\n    }\n  }\n\n  async validateCodeAsync(): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    return await this.executionHandler.validateCode(this.aiCode);\n  }\n\n  updateCode(code: string, language: 'javascript' | 'typescript'): void {\n    this.aiCode = code;\n    this.aiLanguage = language;\n    this.ready = this.validateCode();\n  }\n\n  getCode(): string {\n    return this.aiCode;\n  }\n\n  getLanguage(): 'javascript' | 'typescript' {\n    return this.aiLanguage;\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class EasyStrategy implements AIStrategy {\n  private recentGuesses: Set<string> = new Set();\n  \n  selectKeywords(gameState: GameStateForAI): number[] {\n    console.log('=== Easy AI 실행 (무작위 선택) ===');\n    console.log(`턴 ${gameState.currentTurn}: 키워드 ${gameState.keywords.length}개 중 정답 ${gameState.answerCount}개 찾기`);\n    \n    // 확실한 정답만 수집 (매우 제한적으로만 사용)\n    const definiteAnswers = new Set<number>(gameState.revealedAnswers);\n    \n    // 확실한 오답 수집 (내 힌트와 공개된 오답만)\n    const definiteWrongs = new Set<number>();\n    gameState.myHints.forEach(hint => definiteWrongs.add(hint));\n    gameState.revealedWrongAnswers.forEach(wrong => definiteWrongs.add(wrong));\n    \n    // 선택 가능한 키워드 목록\n    const availableKeywords: number[] = [];\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!definiteWrongs.has(i)) {\n        availableKeywords.push(i);\n      }\n    }\n    \n    console.log(`선택 가능한 키워드: ${availableKeywords.length}개`);\n    \n    // Easy AI는 다른 플레이어의 힌트나 이전 추측을 분석하지 않습니다\n    // 단순히 무작위로 선택합니다\n    \n    const finalGuess: number[] = [];\n    \n    // 1. 확실한 정답이 있으면 먼저 포함 (하지만 모든 정답을 알아도 일부만 사용)\n    const answersToUse = Array.from(definiteAnswers);\n    const maxAnswersToUse = Math.min(\n      Math.floor(gameState.answerCount * 0.7), // 최대 70%만 사용\n      answersToUse.length\n    );\n    \n    // 확실한 정답 중에서도 무작위로 선택\n    const shuffledAnswers = this.shuffle([...answersToUse]);\n    for (let i = 0; i < maxAnswersToUse && finalGuess.length < gameState.answerCount; i++) {\n      finalGuess.push(shuffledAnswers[i]);\n    }\n    \n    // 2. 나머지는 완전 무작위로 선택\n    const remainingCandidates = availableKeywords.filter(idx => !finalGuess.includes(idx));\n    const shuffledCandidates = this.shuffle([...remainingCandidates]);\n    \n    for (let i = 0; i < shuffledCandidates.length && finalGuess.length < gameState.answerCount; i++) {\n      finalGuess.push(shuffledCandidates[i]);\n    }\n    \n    // 3. 가끔씩 의도적으로 실수하기 (10% 확률로 잘못된 선택)\n    if (Math.random() < 0.1 && finalGuess.length === gameState.answerCount) {\n      const wrongIndex = Math.floor(Math.random() * finalGuess.length);\n      const wrongCandidates = remainingCandidates.filter(idx => !finalGuess.includes(idx));\n      if (wrongCandidates.length > 0) {\n        finalGuess[wrongIndex] = wrongCandidates[Math.floor(Math.random() * wrongCandidates.length)];\n        console.log('Easy AI가 실수를 했습니다!');\n      }\n    }\n    \n    // 중복 방지를 위한 간단한 체크 (최근 3턴만 기억)\n    const guessKey = [...finalGuess].sort((a, b) => a - b).join(',');\n    if (this.recentGuesses.has(guessKey) && remainingCandidates.length >= gameState.answerCount) {\n      console.log('최근에 시도한 조합입니다. 다시 섞습니다.');\n      return this.selectKeywords(gameState); // 재귀적으로 다시 선택\n    }\n    \n    // 최근 추측 기록 유지 (3개까지만)\n    this.recentGuesses.add(guessKey);\n    if (this.recentGuesses.size > 3) {\n      const oldest = this.recentGuesses.values().next().value;\n      this.recentGuesses.delete(oldest);\n    }\n    \n    console.log('Easy AI 최종 선택:', finalGuess.map(i => gameState.keywords[i]));\n    return finalGuess;\n  }\n  \n  private shuffle<T>(array: T[]): T[] {\n    const result = [...array];\n    for (let i = result.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [result[i], result[j]] = [result[j], result[i]];\n    }\n    return result;\n  }\n\n  getStrategyName(): string {\n    return 'Easy AI';\n  }\n\n  getDescription(): string {\n    return 'AI가 무작위로 키워드를 선택합니다. 가끔 실수도 합니다.';\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport abstract class BaseStrategy implements AIStrategy {\n  private previousExactGuesses: Set<string> = new Set();\n  \n  selectKeywords(gameState: GameStateForAI): number[] {\n    console.log('=== 지능형 AI 실행 ===');\n    console.log(`턴 ${gameState.currentTurn}: 키워드 ${gameState.keywords.length}개 중 정답 ${gameState.answerCount}개 찾기`);\n    \n    // 1. 확실한 정답과 오답 수집\n    const definiteAnswers = new Set<number>(gameState.revealedAnswers);\n    const definiteWrongs = new Set<number>();\n    \n    // 내 힌트는 모두 오답\n    gameState.myHints.forEach(hint => definiteWrongs.add(hint));\n    \n    // 공개된 오답 추가\n    gameState.revealedWrongAnswers.forEach(wrong => definiteWrongs.add(wrong));\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (gameState.revealedOtherHints && gameState.revealedOtherHints.length > 0) {\n      gameState.revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(hintIdx => definiteWrongs.add(hintIdx));\n      });\n    }\n    \n    console.log(`내 힌트 (오답): ${gameState.myHints.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 오답: ${gameState.revealedWrongAnswers.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 정답: ${gameState.revealedAnswers.map(i => gameState.keywords[i])}`);\n    \n    // 2. 이전 추측 분석으로 추가 정보 획득\n    this.analyzeAllGuesses(gameState, definiteAnswers, definiteWrongs);\n    \n    // 3. 선택 가능한 키워드 목록 생성\n    const possibleKeywords: number[] = [];\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!definiteWrongs.has(i)) {\n        possibleKeywords.push(i);\n      }\n    }\n    \n    console.log(`확실한 정답: ${definiteAnswers.size}개`);\n    console.log(`확실한 오답: ${definiteWrongs.size}개`);\n    console.log(`선택 가능한 키워드: ${possibleKeywords.length}개`);\n    \n    // 4. 이미 충분한 정답을 아는 경우\n    if (definiteAnswers.size >= gameState.answerCount) {\n      console.log('모든 정답을 알고 있음! 게임 종료!');\n      return Array.from(definiteAnswers).slice(0, gameState.answerCount);\n    }\n    \n    // 5. 각 키워드의 점수 계산\n    const scores = this.calculateScores(gameState, possibleKeywords, definiteAnswers, definiteWrongs);\n    \n    // 6. 최종 추측 구성\n    let finalGuess = this.buildFinalGuess(scores, definiteAnswers, gameState.answerCount);\n    \n    // 7. 중복 추측 방지: 이전과 동일한 조합인지 확인\n    finalGuess = this.preventDuplicateGuess(finalGuess, gameState, scores);\n    \n    // 8. 이번 추측을 기록에 추가\n    const guessKey = [...finalGuess].sort((a, b) => a - b).join(',');\n    this.previousExactGuesses.add(guessKey);\n    \n    console.log('최종 선택:', finalGuess.map(i => gameState.keywords[i]));\n    return finalGuess;\n  }\n\n  // 모든 추측 분석\n  private analyzeAllGuesses(gameState: GameStateForAI, definiteAnswers: Set<number>, definiteWrongs: Set<number>): void {\n    // 1. 정답이 0개인 추측 - 모든 키워드가 오답\n    gameState.previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => {\n          definiteWrongs.add(idx);\n        });\n        console.log(`정답 0개 추측에서 오답 발견: ${guess.guess.map(i => gameState.keywords[i])}`);\n      }\n    });\n    \n    // 2. 추측 간 비교로 확실한 정답/오답 찾기\n    for (let i = 0; i < gameState.previousGuesses.length - 1; i++) {\n      for (let j = i + 1; j < gameState.previousGuesses.length; j++) {\n        this.compareGuesses(\n          gameState.previousGuesses[i], \n          gameState.previousGuesses[j], \n          definiteAnswers, \n          definiteWrongs,\n          gameState\n        );\n      }\n    }\n    \n    // 3. 제약 조건 확인\n    gameState.previousGuesses.forEach(guess => {\n      this.checkConstraints(guess, definiteAnswers, definiteWrongs, gameState);\n    });\n  }\n\n  // 두 추측 비교\n  private compareGuesses(\n    guess1: GuessHistory, \n    guess2: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    // 두 추측의 차이 계산\n    const onlyIn1 = guess1.guess.filter(x => !guess2.guess.includes(x));\n    const onlyIn2 = guess2.guess.filter(x => !guess1.guess.includes(x));\n    \n    // 정확히 하나씩만 다른 경우\n    if (onlyIn1.length === 1 && onlyIn2.length === 1) {\n      const idx1 = onlyIn1[0];\n      const idx2 = onlyIn2[0];\n      \n      if (guess1.correctCount > guess2.correctCount) {\n        // idx1은 정답, idx2는 오답\n        if (!definiteAnswers.has(idx1) && !definiteWrongs.has(idx1)) {\n          definiteAnswers.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx2) && !definiteAnswers.has(idx2)) {\n          definiteWrongs.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 오답!`);\n        }\n      } else if (guess2.correctCount > guess1.correctCount) {\n        // idx2는 정답, idx1은 오답\n        if (!definiteAnswers.has(idx2) && !definiteWrongs.has(idx2)) {\n          definiteAnswers.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx1) && !definiteAnswers.has(idx1)) {\n          definiteWrongs.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}은 오답!`);\n        }\n      }\n    }\n  }\n\n  // 제약 조건 확인\n  private checkConstraints(\n    guess: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    let knownAnswers = 0;\n    let knownWrongs = 0;\n    const unknownIndices: number[] = [];\n    \n    guess.guess.forEach(idx => {\n      if (definiteAnswers.has(idx)) {\n        knownAnswers++;\n      } else if (definiteWrongs.has(idx)) {\n        knownWrongs++;\n      } else {\n        unknownIndices.push(idx);\n      }\n    });\n    \n    // 알려진 정답만으로 이미 correctCount를 달성한 경우\n    if (knownAnswers === guess.correctCount) {\n      // 나머지 unknown은 모두 오답\n      unknownIndices.forEach(idx => {\n        if (!definiteWrongs.has(idx)) {\n          definiteWrongs.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 오답 (이미 충분한 정답)`);\n        }\n      });\n    }\n    \n    // unknown과 known answers의 합이 정확히 correctCount인 경우\n    if (knownAnswers + unknownIndices.length === guess.correctCount && unknownIndices.length > 0) {\n      // 모든 unknown이 정답\n      unknownIndices.forEach(idx => {\n        if (!definiteAnswers.has(idx)) {\n          definiteAnswers.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 정답 (나머지 모두 정답)`);\n        }\n      });\n    }\n  }\n\n  // 각 키워드의 점수 계산\n  private calculateScores(\n    gameState: GameStateForAI, \n    possibleKeywords: number[], \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): Map<number, number> {\n    const scores = new Map<number, number>();\n    \n    // 확실한 정답은 최고 점수\n    definiteAnswers.forEach(idx => {\n      scores.set(idx, 1000);\n    });\n    \n    // 가능한 키워드들의 점수 계산\n    possibleKeywords.forEach(idx => {\n      if (!definiteAnswers.has(idx) && !definiteWrongs.has(idx)) {\n        const score = this.calculateKeywordScore(idx, gameState, definiteAnswers, definiteWrongs);\n        scores.set(idx, score);\n      }\n    });\n    \n    // 점수별로 정렬하여 출력\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10);\n    \n    console.log('상위 10개 키워드 점수:');\n    sorted.forEach(([idx, score]) => {\n      console.log(`  ${gameState.keywords[idx]}: ${score.toFixed(2)}점`);\n    });\n    \n    return scores;\n  }\n\n  // 개별 키워드 점수 계산\n  private calculateKeywordScore(\n    keywordIdx: number, \n    gameState: GameStateForAI, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): number {\n    let totalAppearances = 0;\n    let weightedCorrect = 0;\n    \n    gameState.previousGuesses.forEach(guess => {\n      if (guess.guess.includes(keywordIdx)) {\n        totalAppearances++;\n        \n        // 이 추측에서 알려진 정답/오답 개수\n        let knownAnswers = 0;\n        let knownWrongs = 0;\n        let unknownCount = 0;\n        \n        guess.guess.forEach(idx => {\n          if (definiteAnswers.has(idx)) knownAnswers++;\n          else if (definiteWrongs.has(idx)) knownWrongs++;\n          else unknownCount++;\n        });\n        \n        // 남은 정답 개수\n        const remainingCorrect = Math.max(0, guess.correctCount - knownAnswers);\n        \n        // 이 키워드가 정답일 확률\n        if (unknownCount > 0 && remainingCorrect > 0) {\n          const probability = remainingCorrect / unknownCount;\n          weightedCorrect += probability;\n        }\n      }\n    });\n    \n    // 기본 점수 (아직 선택되지 않은 키워드는 중립적)\n    if (totalAppearances === 0) {\n      return 50; // 중립 점수\n    }\n    \n    // 평균 확률을 점수로 변환\n    return (weightedCorrect / totalAppearances) * 100;\n  }\n\n  // 최종 추측 구성\n  private buildFinalGuess(scores: Map<number, number>, definiteAnswers: Set<number>, answerCount: number): number[] {\n    // 점수 순으로 정렬\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1]);\n    \n    const finalGuess: number[] = [];\n    \n    // 높은 점수부터 선택\n    for (const [idx, score] of sorted) {\n      if (finalGuess.length >= answerCount) break;\n      finalGuess.push(idx);\n    }\n    \n    // 혹시 부족하면 (이런 일은 없어야 함)\n    if (finalGuess.length < answerCount) {\n      console.error('경고: 선택 가능한 키워드가 부족합니다!');\n    }\n    \n    return finalGuess;\n  }\n  \n  // 중복 추측 방지 메서드\n  private preventDuplicateGuess(\n    guess: number[], \n    gameState: GameStateForAI, \n    scores: Map<number, number>\n  ): number[] {\n    // 추측을 정렬하여 문자열로 변환 (순서 무관하게 비교)\n    const guessKey = [...guess].sort((a, b) => a - b).join(',');\n    \n    // 모든 이전 추측들을 수집 (모든 플레이어의 추측 + 내가 이미 시도한 것들)\n    const allPreviousGuesses = new Set<string>(this.previousExactGuesses);\n    gameState.previousGuesses.forEach(prevGuess => {\n      const prevKey = [...prevGuess.guess].sort((a, b) => a - b).join(',');\n      allPreviousGuesses.add(prevKey);\n    });\n    \n    // 디버깅: 중복 검사 상황 로그\n    console.log(`[중복 검사] 현재 추측: ${guessKey}`);\n    console.log(`[중복 검사] 이전 추측 수: ${allPreviousGuesses.size}`);\n    console.log(`[중복 검사] 내 이전 추측들:`, Array.from(this.previousExactGuesses));\n    console.log(`[중복 검사] 전체 이전 추측들:`, Array.from(allPreviousGuesses));\n    \n    // 현재 추측이 이전에 시도한 것인지 확인\n    if (allPreviousGuesses.has(guessKey)) {\n      console.log('경고: 동일한 조합 재시도 감지! 새로운 조합 생성 중...');\n      console.log(`[중복 발견] 추측 키워드: ${guess.map(i => gameState.keywords[i]).join(', ')}`);\n      \n      // 이전 추측에서 해당 조합 찾기\n      const previousGuess = gameState.previousGuesses.find(pg => {\n        const pgKey = [...pg.guess].sort((a, b) => a - b).join(',');\n        return pgKey === guessKey;\n      });\n      \n      if (previousGuess) {\n        console.log(`[중복 발견] 이전 결과: ${previousGuess.correctCount}/${gameState.answerCount} (플레이어 ${previousGuess.playerId})`);\n        \n        if (previousGuess.correctCount > 0 && previousGuess.correctCount < gameState.answerCount) {\n          // 부분 정답인 경우: 반드시 다른 조합 생성\n          console.log('[중복 해결] 부분 정답이므로 체계적 변형 시도');\n          return this.generateSystematicVariation(guess, previousGuess, gameState, scores, allPreviousGuesses);\n        } else {\n          // 완전 정답이거나 완전 오답인 경우\n          console.log('[중복 해결] 완전히 새로운 조합 생성');\n          return this.generateNewCombination(guess, gameState, scores, allPreviousGuesses);\n        }\n      }\n    }\n    \n    return guess;\n  }\n  \n  // 부분 정답일 때 체계적으로 변형\n  private generateSystematicVariation(\n    originalGuess: number[],\n    previousResult: GuessHistory,\n    gameState: GameStateForAI,\n    scores: Map<number, number>,\n    allPreviousGuesses: Set<string>\n  ): number[] {\n    console.log(`이전 결과: ${previousResult.correctCount}/${gameState.answerCount} 정답`);\n    console.log(`이전 추측: ${previousResult.guess.map(i => gameState.keywords[i]).join(', ')}`);\n    \n    // 공개된 정답은 무조건 포함\n    const mustInclude = gameState.revealedAnswers;\n    \n    // 점수가 가장 낮은 키워드부터 교체 시도 (공개된 정답 제외)\n    const sortedByScore = [...originalGuess]\n      .filter(idx => !mustInclude.includes(idx))\n      .sort((a, b) => (scores.get(a) || 0) - (scores.get(b) || 0));\n    \n    // 사용 가능한 대체 후보들 (점수 높은 순)\n    const availableCandidates = Array.from(scores.entries())\n      .filter(([idx]) => !originalGuess.includes(idx))\n      .sort((a, b) => b[1] - a[1])\n      .map(([idx]) => idx);\n    \n    console.log(`교체 가능 키워드: ${sortedByScore.length}개`);\n    console.log(`대체 후보: ${availableCandidates.length}개`);\n    \n    // 교체할 개수 결정: 틀린 개수만큼 교체\n    const wrongCount = gameState.answerCount - previousResult.correctCount;\n    const toReplace = Math.min(wrongCount, sortedByScore.length);\n    \n    console.log(`${toReplace}개 키워드 교체 시도`);\n    \n    // 여러 개를 한 번에 교체\n    for (let replaceCount = 1; replaceCount <= toReplace; replaceCount++) {\n      // 교체할 키워드 선택\n      const toReplaceIndices = sortedByScore.slice(0, replaceCount);\n      \n      // 가능한 모든 조합 시도\n      const newGuess = [...originalGuess];\n      for (let i = 0; i < toReplaceIndices.length && i < availableCandidates.length; i++) {\n        const indexToReplace = newGuess.indexOf(toReplaceIndices[i]);\n        if (indexToReplace !== -1) {\n          newGuess[indexToReplace] = availableCandidates[i];\n        }\n      }\n      \n      // 이 조합이 시도되지 않았다면 사용\n      const newKey = [...newGuess].sort((a, b) => a - b).join(',');\n      if (!allPreviousGuesses.has(newKey)) {\n        console.log(`체계적 변형 (${replaceCount}개 교체): ${toReplaceIndices.map(i => gameState.keywords[i]).join(', ')} → ${availableCandidates.slice(0, replaceCount).map(i => gameState.keywords[i]).join(', ')}`);\n        return newGuess;\n      }\n    }\n    \n    // 모든 체계적 교체가 실패하면 완전히 새로운 조합\n    return this.generateNewCombination(originalGuess, gameState, scores, allPreviousGuesses);\n  }\n  \n  // 완전히 새로운 조합 생성\n  private generateNewCombination(\n    originalGuess: number[],\n    gameState: GameStateForAI,\n    scores: Map<number, number>,\n    allPreviousGuesses: Set<string>\n  ): number[] {\n    // 확실한 정답은 유지\n    const mustInclude = originalGuess.filter(idx => \n      gameState.revealedAnswers.includes(idx)\n    );\n    \n    // 나머지는 점수 높은 순으로 새로 선택\n    const candidates = Array.from(scores.entries())\n      .filter(([idx]) => !mustInclude.includes(idx))\n      .sort((a, b) => b[1] - a[1]);\n    \n    const newGuess = [...mustInclude];\n    const needed = gameState.answerCount - newGuess.length;\n    \n    // 이전과 다른 조합이 나올 때까지 시도\n    let attempts = 0;\n    while (attempts < 10) {\n      const tempGuess = [...mustInclude];\n      \n      // 약간의 무작위성을 추가하여 선택\n      const shuffledCandidates = [...candidates.slice(0, needed * 2)]\n        .sort(() => Math.random() - 0.5);\n      \n      for (let i = 0; i < needed && i < shuffledCandidates.length; i++) {\n        tempGuess.push(shuffledCandidates[i][0]);\n      }\n      \n      const tempKey = [...tempGuess].sort((a, b) => a - b).join(',');\n      if (!allPreviousGuesses.has(tempKey)) {\n        console.log('새로운 조합 생성 성공');\n        console.log(`새 조합: ${tempGuess.map(i => gameState.keywords[i]).join(', ')}`);\n        return tempGuess;\n      }\n      \n      attempts++;\n    }\n    \n    // 최후의 수단: 완전 랜덤\n    console.log('경고: 새로운 조합 생성 실패, 최선의 선택 반환');\n    return originalGuess;\n  }\n\n  abstract getStrategyName(): string;\n  abstract getDescription(): string;\n}","import { BaseStrategy } from './BaseStrategy';\n\nexport class MediumStrategy extends BaseStrategy {\n  // Medium AI는 현재 Easy가 사용하던 BaseStrategy의 논리적 추론을 그대로 사용합니다.\n  // 이는 공개된 정답과 오답을 활용하고, 이전 추측을 분석하며,\n  // 제약 조건을 검사하여 효율적으로 정답을 찾는 방식입니다.\n\n  getStrategyName(): string {\n    return 'Medium AI';\n  }\n\n  getDescription(): string {\n    return '논리적 추론과 제약 조건 분석을 통해 정답을 찾습니다. 공개된 정보를 적극적으로 활용합니다.';\n  }\n}","import { BaseStrategy } from './BaseStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport class HardStrategy extends BaseStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    // 기본 전략 실행\n    const baseResult = super.selectKeywords(gameState);\n    \n    // Hard AI 전용: 고급 추론 모드\n    const optimizedResult = this.advancedReasoning(gameState, baseResult);\n    \n    return optimizedResult;\n  }\n  \n  private advancedReasoning(gameState: GameStateForAI, baseGuess: number[]): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers } = gameState;\n    \n    // 이미 충분한 정답을 알고 있으면 그대로 반환\n    if (revealedAnswers.length >= answerCount) {\n      return baseGuess;\n    }\n    \n    // 남은 정답 개수가 적을 때 특별 알고리즘 발동\n    const remainingAnswers = answerCount - revealedAnswers.length;\n    if (remainingAnswers <= 3) {\n      console.log(`[Hard AI] 마지막 ${remainingAnswers}개 정답 찾기 모드 활성화`);\n      \n      // 가능한 모든 조합을 시뮬레이션\n      const optimizedGuess = this.findOptimalCombination(gameState);\n      if (optimizedGuess.length > 0) {\n        console.log('[Hard AI] 최적 조합 발견!');\n        return optimizedGuess;\n      }\n    }\n    \n    // 추가 교집합/차집합 분석\n    const refinedGuess = this.refineWithSetAnalysis(gameState, baseGuess);\n    \n    return refinedGuess;\n  }\n  \n  private findOptimalCombination(gameState: GameStateForAI): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints, revealedOtherHints } = gameState;\n    \n    // 확실한 오답 수집\n    const definiteWrongs = new Set<number>([\n      ...revealedWrongAnswers,\n      ...myHints\n    ]);\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (revealedOtherHints) {\n      revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(h => definiteWrongs.add(h));\n      });\n    }\n    \n    // 과거 추측에서 확실한 오답 추가\n    previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => definiteWrongs.add(idx));\n      }\n    });\n    \n    // 가능한 후보들\n    const possibleIndices: number[] = [];\n    for (let i = 0; i < keywords.length; i++) {\n      if (!definiteWrongs.has(i) && !revealedAnswers.includes(i)) {\n        possibleIndices.push(i);\n      }\n    }\n    \n    // 가능한 조합이 적으면 모든 조합 검증\n    const remainingSlots = answerCount - revealedAnswers.length;\n    if (possibleIndices.length <= 15 && remainingSlots <= 3) {\n      console.log(`[Hard AI] ${possibleIndices.length}개 후보에서 ${remainingSlots}개 선택 조합 검증`);\n      \n      // 모든 조합 생성 및 검증\n      const validCombinations = this.findValidCombinations(\n        possibleIndices, \n        remainingSlots, \n        revealedAnswers,\n        previousGuesses\n      );\n      \n      if (validCombinations.length === 1) {\n        // 유일한 해를 찾음!\n        console.log('[Hard AI] 유일한 정답 조합 발견!');\n        return [...revealedAnswers, ...validCombinations[0]];\n      } else if (validCombinations.length > 1) {\n        // 여러 가능성이 있을 때 가장 확률 높은 것 선택\n        console.log(`[Hard AI] ${validCombinations.length}개의 가능한 조합 중 최적 선택`);\n        return [...revealedAnswers, ...validCombinations[0]];\n      }\n    }\n    \n    return [];\n  }\n  \n  private findValidCombinations(\n    candidates: number[], \n    slots: number, \n    knownAnswers: number[],\n    previousGuesses: GuessHistory[]\n  ): number[][] {\n    const validCombinations: number[][] = [];\n    \n    // 조합 생성 함수\n    const generateCombinations = (start: number, current: number[]): void => {\n      if (current.length === slots) {\n        // 이 조합이 모든 과거 추측과 일치하는지 검증\n        const testAnswer = [...knownAnswers, ...current];\n        if (this.isValidHypothesis(testAnswer, previousGuesses)) {\n          validCombinations.push([...current]);\n        }\n        return;\n      }\n      \n      for (let i = start; i < candidates.length; i++) {\n        current.push(candidates[i]);\n        generateCombinations(i + 1, current);\n        current.pop();\n      }\n    };\n    \n    generateCombinations(0, []);\n    return validCombinations;\n  }\n  \n  private isValidHypothesis(hypothesis: number[], guesses: GuessHistory[]): boolean {\n    const hypothesisSet = new Set(hypothesis);\n    \n    for (const guess of guesses) {\n      const correctInGuess = guess.guess.filter(g => hypothesisSet.has(g)).length;\n      if (correctInGuess !== guess.correctCount) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  private refineWithSetAnalysis(gameState: GameStateForAI, currentGuess: number[]): number[] {\n    const { previousGuesses, answerCount } = gameState;\n    \n    // 이전 추측들의 교집합/차집합 분석으로 확실한 정답 찾기\n    const confirmedAnswers = new Set<number>();\n    \n    // 높은 정답률을 가진 추측들의 교집합 분석\n    const highScoreGuesses = previousGuesses.filter(g => \n      g.correctCount >= answerCount * 0.6\n    );\n    \n    if (highScoreGuesses.length >= 2) {\n      // 교집합에서 공통으로 나타나는 키워드 찾기\n      const firstGuessSet = new Set(highScoreGuesses[0].guess);\n      let intersection = [...firstGuessSet];\n      \n      for (let i = 1; i < highScoreGuesses.length; i++) {\n        intersection = intersection.filter(idx => \n          highScoreGuesses[i].guess.includes(idx)\n        );\n      }\n      \n      // 교집합 크기가 적절하면 신뢰\n      if (intersection.length > 0 && intersection.length <= answerCount) {\n        intersection.forEach(idx => confirmedAnswers.add(idx));\n        console.log(`[Hard AI] 교집합 분석으로 ${intersection.length}개 정답 후보 발견`);\n      }\n    }\n    \n    // 확실한 정답을 우선 포함\n    const refinedGuess = [...confirmedAnswers];\n    \n    // 나머지는 기존 추측에서 채움\n    for (const idx of currentGuess) {\n      if (refinedGuess.length >= answerCount) break;\n      if (!refinedGuess.includes(idx)) {\n        refinedGuess.push(idx);\n      }\n    }\n    \n    return refinedGuess;\n  }\n\n  getStrategyName(): string {\n    return 'Hard AI';\n  }\n\n  getDescription(): string {\n    return '고급 추론과 완전 탐색을 통해 최적의 답을 찾습니다.';\n  }\n}\n","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { BuiltInAIPlayer } from './players/BuiltInAIPlayer';\nimport { CustomAIPlayer } from './players/CustomAIPlayer';\nimport { PlayerInfo, PlayerType } from './types/PlayerTypes';\nimport { AIStrategy } from './strategies/AIStrategy';\nimport { EasyStrategy } from './strategies/EasyStrategy';\nimport { MediumStrategy } from './strategies/MediumStrategy';\nimport { HardStrategy } from './strategies/HardStrategy';\n\nexport class PlayerFactory {\n  static createPlayer(playerInfo: PlayerInfo): IPlayer {\n    switch (playerInfo.type) {\n      case 'human':\n        return new HumanPlayer(playerInfo);\n        \n      case 'built-in-ai':\n        const strategy = this.createStrategy(playerInfo.aiDifficulty || 'medium');\n        return new BuiltInAIPlayer(playerInfo, strategy);\n        \n      case 'custom-ai':\n        return new CustomAIPlayer(playerInfo);\n        \n      default:\n        throw new Error(`Unknown player type: ${playerInfo.type}`);\n    }\n  }\n\n  private static createStrategy(difficulty: 'easy' | 'medium' | 'hard'): AIStrategy {\n    // 각 플레이어마다 새로운 strategy 인스턴스 생성\n    switch (difficulty) {\n      case 'easy':\n        return new EasyStrategy();\n      case 'medium':\n        return new MediumStrategy();\n      case 'hard':\n        return new HardStrategy();\n      default:\n        return new MediumStrategy();\n    }\n  }\n\n  static createBuiltInAIOpponent(\n    id: number, \n    difficulty: 'easy' | 'medium' | 'hard' = 'medium'\n  ): IPlayer {\n    const playerInfo: PlayerInfo = {\n      id,\n      nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`,\n      type: 'built-in-ai',\n      aiDifficulty: difficulty\n    };\n    \n    return this.createPlayer(playerInfo);\n  }\n\n  static isHumanPlayer(player: IPlayer): player is HumanPlayer {\n    return player instanceof HumanPlayer;\n  }\n\n  static isBuiltInAIPlayer(player: IPlayer): player is BuiltInAIPlayer {\n    return player instanceof BuiltInAIPlayer;\n  }\n\n  static isCustomAIPlayer(player: IPlayer): player is CustomAIPlayer {\n    return player instanceof CustomAIPlayer;\n  }\n}","export interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface ComplexityMetrics {\n  lines: number;\n  loops: number;\n  functions: number;\n  complexity: number;\n}\n\nexport class AICodeValidator {\n  private static readonly FORBIDDEN_PATTERNS: Array<{ pattern: RegExp; message: string }> = [\n    { pattern: /eval\\s*\\(/g, message: 'eval() is not allowed' },\n    { pattern: /Function\\s*\\(/g, message: 'Function constructor is not allowed' },\n    { pattern: /setTimeout/g, message: 'setTimeout is not allowed' },\n    { pattern: /setInterval/g, message: 'setInterval is not allowed' },\n    { pattern: /setImmediate/g, message: 'setImmediate is not allowed' },\n    { pattern: /fetch\\s*\\(/g, message: 'fetch() is not allowed' },\n    { pattern: /XMLHttpRequest/g, message: 'XMLHttpRequest is not allowed' },\n    { pattern: /import\\s+/g, message: 'import statements are not allowed' },\n    { pattern: /require\\s*\\(/g, message: 'require() is not allowed' },\n    { pattern: /process\\./g, message: 'process object is not allowed' },\n    { pattern: /global\\./g, message: 'global object is not allowed' },\n    { pattern: /window\\./g, message: 'window object is not allowed' },\n    { pattern: /document\\./g, message: 'document object is not allowed' },\n    { pattern: /self\\./g, message: 'self object is not allowed' },\n    { pattern: /__proto__/g, message: '__proto__ is not allowed' },\n    { pattern: /constructor\\s*\\[/g, message: 'constructor property access is not allowed' },\n    { pattern: /\\.constructor/g, message: 'constructor property is not allowed' },\n    { pattern: /new\\s+Worker/g, message: 'Worker is not allowed' },\n    { pattern: /postMessage/g, message: 'postMessage is not allowed' },\n    { pattern: /localStorage/g, message: 'localStorage is not allowed' },\n    { pattern: /sessionStorage/g, message: 'sessionStorage is not allowed' },\n    { pattern: /indexedDB/g, message: 'indexedDB is not allowed' },\n    { pattern: /crypto\\./g, message: 'crypto object is not allowed' },\n    { pattern: /WebAssembly/g, message: 'WebAssembly is not allowed' },\n    { pattern: /SharedArrayBuffer/g, message: 'SharedArrayBuffer is not allowed' },\n    { pattern: /Atomics/g, message: 'Atomics is not allowed' },\n  ];\n\n  private static readonly MAX_CODE_LENGTH = 10000;\n  private static readonly MAX_LINES = 500;\n  private static readonly MAX_LOOP_DEPTH = 5;\n  private static readonly MAX_FUNCTION_DEPTH = 10;\n\n  static validate(code: string): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 1. Check code length\n    if (code.length > this.MAX_CODE_LENGTH) {\n      errors.push(`Code exceeds maximum length (${code.length}/${this.MAX_CODE_LENGTH} characters)`);\n    }\n\n    // 2. Check line count\n    const lines = code.split('\\n');\n    if (lines.length > this.MAX_LINES) {\n      errors.push(`Code exceeds maximum lines (${lines.length}/${this.MAX_LINES} lines)`);\n    }\n\n    // 3. Check for forbidden patterns\n    for (const { pattern, message } of this.FORBIDDEN_PATTERNS) {\n      if (pattern.test(code)) {\n        errors.push(message);\n      }\n    }\n\n    // 4. Check syntax\n    try {\n      // Use Function constructor to check syntax (in real implementation, this would be in a sandbox)\n      new Function(code);\n    } catch (e: any) {\n      errors.push(`Syntax error: ${e.message}`);\n    }\n\n    // 5. Check for makeGuess function\n    if (!code.includes('function makeGuess') && !code.includes('makeGuess =')) {\n      errors.push('makeGuess function not found');\n    }\n\n    // 6. Check for infinite loops (basic heuristic)\n    const loopPatterns = [\n      /while\\s*\\(\\s*true\\s*\\)/g,\n      /while\\s*\\(\\s*1\\s*\\)/g,\n      /for\\s*\\(\\s*;\\s*;\\s*\\)/g,\n    ];\n    \n    for (const pattern of loopPatterns) {\n      if (pattern.test(code)) {\n        warnings.push('Potential infinite loop detected');\n      }\n    }\n\n    // 7. Check complexity\n    const complexity = this.analyzeComplexity(code);\n    if (complexity.complexity > 100) {\n      warnings.push(`High code complexity detected (score: ${complexity.complexity})`);\n    }\n\n    // 8. Check for suspicious patterns\n    const suspiciousPatterns = [\n      { pattern: /\\bthis\\b/g, message: 'Use of \"this\" keyword may cause issues' },\n      { pattern: /\\barguments\\b/g, message: 'Use of \"arguments\" object is discouraged' },\n      { pattern: /\\.call\\s*\\(/g, message: 'Use of .call() is suspicious' },\n      { pattern: /\\.apply\\s*\\(/g, message: 'Use of .apply() is suspicious' },\n      { pattern: /\\.bind\\s*\\(/g, message: 'Use of .bind() may affect performance' },\n    ];\n\n    for (const { pattern, message } of suspiciousPatterns) {\n      if (pattern.test(code)) {\n        warnings.push(message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  private static analyzeComplexity(code: string): ComplexityMetrics {\n    const lines = code.split('\\n').length;\n    const loops = (code.match(/\\b(for|while|do)\\b/g) || []).length;\n    const functions = (code.match(/\\bfunction\\b/g) || []).length;\n    const conditionals = (code.match(/\\b(if|else|switch|case)\\b/g) || []).length;\n    \n    // Simple cyclomatic complexity estimation\n    const complexity = 1 + conditionals + loops;\n\n    return {\n      lines,\n      loops,\n      functions,\n      complexity\n    };\n  }\n\n  static preprocessCode(code: string): string {\n    // Remove comments\n    let processed = code\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove line comments\n\n    // Trim whitespace\n    processed = processed.trim();\n\n    // Ensure code ends with the makeGuess function being accessible\n    if (!processed.includes('return makeGuess') && processed.includes('function makeGuess')) {\n      processed += '\\n\\n// Auto-added by preprocessor\\nif (typeof makeGuess === \"function\") { makeGuess; }';\n    }\n\n    return processed;\n  }\n}","import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/playground\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["DeductionGame","guideSlideIndex","setGuideSlideIndex","useState","isGuideModalOpen","setIsGuideModalOpen","currentScreen","setCurrentScreen","gameMode","setGameMode","playerCount","setPlayerCount","players","setPlayers","gameConfig","setGameConfig","keywordPoolSize","answerCount","hintCount","timeLimit","maxTurns","difficulty","gameState","setGameState","keywords","answers","playerHints","isReady","currentTurn","turnHistory","gameStatus","revealedAnswers","revealedWrongAnswers","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","soloDifficulty","setSoloDifficulty","isAIThinking","setIsAIThinking","gameManagerRef","useRef","turnStartTime","setTurnStartTime","codeEditorModal","setCodeEditorModal","isOpen","playerId","globalHintsEnabled","setGlobalHintsEnabled","isModalExpanded","setIsModalExpanded","testResults","setTestResults","isTestRunning","setIsTestRunning","testResultIdCounter","setTestResultIdCounter","handleModeSelect","mode","handleDifficultySelect","id","nickname","type","aiLanguage","concat","aiDifficulty","handlePlayerCountSelect","count","newPlayers","i","push","updatePlayer","updates","prev","map","player","_objectSpread","canStartGame","every","_player$aiCode","trim","aiCode","handleStartGame","console","log","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","generateKeywords","size","Object","values","flat","sort","Math","random","slice","async","Promise","resolve","setTimeout","answerIndices","shuffledIndices","Array","from","length","_","nonAnswerIndices","filter","includes","forEach","hints","availableHints","startActualGame","manager","GameManager","gamePlayers","config","playerInfo","customCode","customLanguage","PlayerFactory","createPlayer","setEventHandlers","onTurnStart","getInfo","Date","now","context","getGameContext","onTurnEnd","result","onGameEnd","winner","winnerInfo","onTimerTick","remainingTime","onAIThinking","thinking","current","startTimer","clearTimer","intervalId","setInterval","clearInterval","handleTimeUp","autoSelection","index","submitGuessWithSelection","runAICodeTest","language","Function","e","newResult","success","message","details","error","r","isFading","tip","testCode","startTime","testResult","eval","executionTime","avgTime","parseFloat","performance","speedLevel","join","selectedIndices","_testResult","Error","String","exitGame","clearTimeout","stopGame","handleGlobalHintsToggle","newValue","updatedContext","revealAnswerHint","revealAnswer","unrevealedAnswers","ans","randomAnswer","floor","revealWrongHint","revealWrongAnswer","wrongAnswers","randomWrong","toggleKeywordSelection","keywordIndex","submitGuess","submitHumanGuess","selection","correctCount","isWinner","currentPlayerId","currentPlayer","find","p","actualTimeUsed","round","turnResult","playerName","guess","guessKeywords","turnNumber","timeUsed","isMaxTurnsReached","undefined","getCurrentPlayer","isGameOver","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","useEffect","renderCodeEditorModal","_jsx","className","onClick","children","_jsxs","stopPropagation","title","style","position","exampleCode","disabled","_Fragment","onScroll","textarea","currentTarget","nextElementSibling","scrollTop","split","value","onChange","target","lineNumbers","previousElementSibling","placeholder","spellCheck","marginTop","borderTop","paddingTop","minTime","maxTime","fontSize","color","JSON","stringify","renderModeSelection","renderDifficultySelection","renderPlayerSetup","textAlign","justifyContent","num","maxLength","name","checked","htmlFor","width","renderGameConfig","flexWrap","max","min","renderGamePreparation","preparationSteps","description","step","renderGameScreen","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","nextPlayer","startGame","hintIndex","_players$find","answerIndex","turn","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","renderGuideModal","guideSlides","content","goToPrevSlide","goToNextSlide","getThemeClass","constructor","currentPlayerIndex","gameContext","isGameRunning","turnTimer","revealedHintsPerPlayer","Map","lastHintRevealTurn","globalHintWrongAnswers","temporaryHiddenGlobalHints","this","addPlayer","getPlayers","enabled","idx","clear","calculateGameComplexity","toFixed","calculateExpectedTurns","startNextTurn","_currentPlayer$onTurn","call","isHumanPlayer","startTurnTimer","gameStateForAI","createGameStateForAI","makeGuess","then","processTurn","thinkingTime","handleTimeout","stopTurnTimer","autoGuess","indices","_currentPlayer$onTurn2","timestamp","endGame","myHints","previousGuesses","hintRevealSchedule","getHintRevealSchedule","revealedOtherHints","updateAndGetRevealedHints","complexity","expectedTurns","profile","easy","startRatio","initialInterval","accelerationFactor","medium","hard","startTurn","Infinity","baseTurns","ceil","schedule","lastRevealTurn","get","turnsPassedSinceStart","acceleratedInterval","revealMultiplier","hintsToRevealThisTurn","shouldReveal","revealedHints","_this$players$find3","otherPlayers","otherPlayer","otherPlayerId","otherHints","rh","revealedThisTurn","_this$players$find","randomIndex","newHint","splice","thresholdRatio","gameProgress","isHardAI","isEndgame","totalAvailableHints","hint","_this$players$find2","set","nextInterval","reset","isRunning","handlers","BasePlayer","ready","move","HumanPlayer","super","resolveGuess","isWaitingForInput","BuiltInAIPlayer","strategy","selectKeywords","elapsedTime","setThinkingTime","milliseconds","getStrategy","setStrategy","AICodeExecutor","executionCounter","MAX_EXECUTION_TIME","getInstance","instance","executeUserAI","code","logs","validation","AICodeValidator","validate","isValid","errors","warnings","w","processedCode","preprocessCode","secureGameState","createSecureGameState","executeInWorker","deepFreeze","obj","freeze","getOwnPropertyNames","prop","isFrozen","g","reject","executionId","workerPath","publicUrl","window","location","pathname","startsWith","worker","Worker","timeoutId","terminate","onmessage","event","msgId","data","logMessage","arg","onerror","errorMessage","postMessage","validateGuess","isArray","keywordCount","Number","isInteger","Set","PerformanceMonitor","metricsHistory","MAX_HISTORY_SIZE","measureExecution","executor","metadata","startMemory","getMemoryUsage","endTime","endMemory","metrics","memoryUsage","recordMetrics","errorType","measureSync","memory","usedJSHeapSize","getPlayerStats","playerMetrics","m","totalExecutions","successRate","averageExecutionTime","maxExecutionTime","recentErrors","successful","totalTime","reduce","sum","getGlobalStats","averageSuccessRate","peakExecutionTime","activePlayerCount","peakTime","uniquePlayers","clearHistory","AIExecutionHandler","monitor","executeWithFallback","userCode","executionResult","_error$error","fallbackGuess","generateFallbackGuess","errorDetails","available","selected","validateCode","valid","testAICode","sampleGameState","testGameState","createSampleGameState","CustomAIPlayer","executionHandler","fallbackStrategy","availableIndices","remaining","randomIdx","validateCodeAsync","updateCode","getCode","getLanguage","EasyStrategy","recentGuesses","definiteAnswers","definiteWrongs","add","wrong","availableKeywords","has","finalGuess","answersToUse","maxAnswersToUse","shuffledAnswers","shuffle","remainingCandidates","shuffledCandidates","wrongIndex","wrongCandidates","guessKey","a","b","oldest","next","delete","array","j","getStrategyName","getDescription","BaseStrategy","previousExactGuesses","_ref","hintIdx","analyzeAllGuesses","possibleKeywords","scores","calculateScores","buildFinalGuess","preventDuplicateGuess","compareGuesses","checkConstraints","guess1","guess2","onlyIn1","x","onlyIn2","idx1","idx2","knownAnswers","unknownIndices","knownWrongs","score","calculateKeywordScore","sorted","entries","_ref2","keywordIdx","totalAppearances","weightedCorrect","unknownCount","remainingCorrect","allPreviousGuesses","prevGuess","prevKey","previousGuess","pg","generateSystematicVariation","generateNewCombination","originalGuess","previousResult","mustInclude","sortedByScore","availableCandidates","_ref3","_ref4","wrongCount","toReplace","replaceCount","toReplaceIndices","newGuess","indexToReplace","indexOf","newKey","candidates","_ref5","needed","attempts","tempGuess","tempKey","MediumStrategy","HardStrategy","baseResult","advancedReasoning","baseGuess","remainingAnswers","optimizedGuess","findOptimalCombination","refineWithSetAnalysis","h","possibleIndices","remainingSlots","validCombinations","findValidCombinations","slots","generateCombinations","start","pop","testAnswer","isValidHypothesis","hypothesis","guesses","hypothesisSet","currentGuess","confirmedAnswers","highScoreGuesses","intersection","refinedGuess","createStrategy","createBuiltInAIOpponent","arguments","isBuiltInAIPlayer","isCustomAIPlayer","MAX_CODE_LENGTH","lines","MAX_LINES","pattern","FORBIDDEN_PATTERNS","test","loopPatterns","analyzeComplexity","suspiciousPatterns","loops","match","functions","processed","replace","MAX_LOOP_DEPTH","MAX_FUNCTION_DEPTH","Tetris","src","process","allow","allowFullScreen","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}