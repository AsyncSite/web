{"version":3,"file":"static/js/124.3e72bbdc.chunk.js","mappings":"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","sources":["components/lab/utilities/TeamShuffle/constants.ts","components/lab/utilities/TeamShuffle/utils.ts","components/lab/utilities/TeamShuffle/components/ShuffleButton.tsx","components/lab/utilities/TeamShuffle/components/EditableTeamName.tsx","components/lab/utilities/TeamShuffle/components/TeamCard.tsx","components/lab/utilities/TeamShuffle/components/TeamNameTemplateSelector.tsx","components/lab/utilities/TeamShuffle/TeamShuffle.tsx","components/lab/utilities/TeamShuffle/hooks/useTeamHistory.ts"],"sourcesContent":["export type TeamNameTemplate = \n    | 'default' \n    | 'korean' \n    | 'color' \n    | 'military' \n    | 'animal'\n    | 'zodiac'\n    | 'element'\n    | 'planet'\n    | 'music'\n    | 'direction'\n    | 'season'\n    | 'mythology'\n    | 'gemstone'\n    | 'value'\n    | 'food'\n    | 'roman'\n    | 'custom';\n\nexport interface TeamNameTemplateOption {\n    id: TeamNameTemplate;\n    label: string;\n    getTeamName: (index: number) => string;\n}\n\nexport const TEAM_NAME_TEMPLATES: TeamNameTemplateOption[] = [\n    {\n        id: 'default',\n        label: 'Team 1, 2, 3',\n        getTeamName: (index) => `Team ${index + 1}`\n    },\n    {\n        id: 'korean',\n        label: 'A조, B조, C조',\n        getTeamName: (index) => {\n            const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n            return `${letters[index] || index + 1}조`;\n        }\n    },\n    {\n        id: 'color',\n        label: '레드팀, 블루팀...',\n        getTeamName: (index) => {\n            const colors = ['레드', '블루', '그린', '옐로우', '퍼플', '오렌지', '핑크', '브라운', '그레이', '블랙'];\n            return `${colors[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'military',\n        label: '알파팀, 브라보팀...',\n        getTeamName: (index) => {\n            const codes = ['알파', '브라보', '찰리', '델타', '에코', '폭스트롯', '골프', '호텔', '인디아', '줄리엣'];\n            return `${codes[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'animal',\n        label: '호랑이팀, 독수리팀...',\n        getTeamName: (index) => {\n            const animals = ['호랑이', '독수리', '사자', '늑대', '표범', '매', '곰', '여우', '치타', '팔콘'];\n            return `${animals[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'zodiac',\n        label: '자축인묘... (띠)',\n        getTeamName: (index) => {\n            const zodiac = ['자(쥐)', '축(소)', '인(호랑이)', '묘(토끼)', '진(용)', '사(뱀)', '오(말)', '미(양)', '신(원숭이)', '유(닭)', '술(개)', '해(돼지)'];\n            return `${zodiac[index % 12]}팀`;\n        }\n    },\n    {\n        id: 'element',\n        label: '불꽃팀, 물결팀...',\n        getTeamName: (index) => {\n            const elements = ['불꽃', '물결', '바람', '대지', '번개', '얼음', '빛', '어둠', '자연', '강철'];\n            return `${elements[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'planet',\n        label: '수성팀, 금성팀...',\n        getTeamName: (index) => {\n            const planets = ['수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성', '태양', '달'];\n            return `${planets[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'music',\n        label: '도레미파...',\n        getTeamName: (index) => {\n            const notes = ['도', '레', '미', '파', '솔', '라', '시', '도#', '레#', '파#', '솔#', '라#'];\n            return `${notes[index % notes.length]}팀`;\n        }\n    },\n    {\n        id: 'direction',\n        label: '동군, 서군, 남군, 북군',\n        getTeamName: (index) => {\n            const directions = ['동', '서', '남', '북', '중앙', '동북', '동남', '서북', '서남'];\n            return `${directions[index] || `제${index + 1}`}군`;\n        }\n    },\n    {\n        id: 'season',\n        label: '봄팀, 여름팀...',\n        getTeamName: (index) => {\n            const seasons = ['봄', '여름', '가을', '겨울', '새봄', '한여름', '늦가을', '한겨울'];\n            return `${seasons[index % seasons.length]}팀`;\n        }\n    },\n    {\n        id: 'mythology',\n        label: '제우스팀, 아테나팀...',\n        getTeamName: (index) => {\n            const gods = ['제우스', '아테나', '아폴로', '아르테미스', '포세이돈', '헤르메스', '아레스', '헤파이스토스', '데메테르', '헤라'];\n            return `${gods[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'animal',\n        label: '호랑이팀, 독수리팀...',\n        getTeamName: (index) => {\n            const animals = ['호랑이', '독수리', '사자', '늑대', '표범', '매', '곰', '여우', '치타', '팔콘'];\n            return `${animals[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'zodiac',\n        label: '자축인묘... (띠)',\n        getTeamName: (index) => {\n            const zodiac = ['자(쥐)', '축(소)', '인(호랑이)', '묘(토끼)', '진(용)', '사(뱀)', '오(말)', '미(양)', '신(원숭이)', '유(닭)', '술(개)', '해(돼지)'];\n            return `${zodiac[index % 12]}팀`;\n        }\n    },\n    {\n        id: 'element',\n        label: '불꽃팀, 물결팀...',\n        getTeamName: (index) => {\n            const elements = ['불꽃', '물결', '바람', '대지', '번개', '얼음', '빛', '어둠', '자연', '강철'];\n            return `${elements[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'planet',\n        label: '수성팀, 금성팀...',\n        getTeamName: (index) => {\n            const planets = ['수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성', '태양', '달'];\n            return `${planets[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'music',\n        label: '도레미파...',\n        getTeamName: (index) => {\n            const notes = ['도', '레', '미', '파', '솔', '라', '시', '도#', '레#', '파#', '솔#', '라#'];\n            return `${notes[index % notes.length]}팀`;\n        }\n    },\n    {\n        id: 'direction',\n        label: '동군, 서군, 남군, 북군',\n        getTeamName: (index) => {\n            const directions = ['동', '서', '남', '북', '중앙', '동북', '동남', '서북', '서남'];\n            return `${directions[index] || `제${index + 1}`}군`;\n        }\n    },\n    {\n        id: 'season',\n        label: '봄팀, 여름팀...',\n        getTeamName: (index) => {\n            const seasons = ['봄', '여름', '가을', '겨울', '새봄', '한여름', '늦가을', '한겨울'];\n            return `${seasons[index % seasons.length]}팀`;\n        }\n    },\n    {\n        id: 'mythology',\n        label: '제우스팀, 아테나팀...',\n        getTeamName: (index) => {\n            const gods = ['제우스', '아테나', '아폴로', '아르테미스', '포세이돈', '헤르메스', '아레스', '헤파이스토스', '데메테르', '헤라'];\n            return `${gods[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'gemstone',\n        label: '다이아팀, 루비팀...',\n        getTeamName: (index) => {\n            const gems = ['다이아몬드', '루비', '사파이어', '에메랄드', '자수정', '진주', '오팔', '토파즈', '가넷', '페리도트'];\n            return `${gems[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'value',\n        label: '열정팀, 도전팀...',\n        getTeamName: (index) => {\n            const values = ['열정', '도전', '창의', '혁신', '신뢰', '성장', '비전', '희망', '협동', '성실'];\n            return `${values[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'food',\n        label: '치킨팀, 피자팀...',\n        getTeamName: (index) => {\n            const foods = ['치킨', '피자', '떡볶이', '라면', '김밥', '초밥', '파스타', '햄버거', '핫도그', '타코'];\n            return `${foods[index] || `팀${index + 1}`}팀`;\n        }\n    },\n    {\n        id: 'roman',\n        label: 'Team I, II, III...',\n        getTeamName: (index) => {\n            const numerals = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];\n            return `Team ${numerals[index] || index + 1}`;\n        }\n    }\n];","import { TeamNameTemplate, TEAM_NAME_TEMPLATES } from './constants';\n\nexport interface Team {\n    id: string;\n    name: string;\n    members: string[];\n}\n\n/**\n * Fisher-Yates 셔플 알고리즘을 사용하여 배열을 무작위로 섞습니다.\n */\nexport const shuffleArray = <T>(array: T[]): T[] => {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n};\n\n/**\n * 참가자 명단 문자열을 정제하여 배열로 변환합니다.\n */\nexport const parseParticipants = (input: string): string[] => {\n    return input\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => line.length > 0)\n        .map((name, index, array) => {\n            // 중복 이름 처리\n            const duplicateCount = array.slice(0, index).filter(n => n === name).length;\n            return duplicateCount > 0 ? `${name}${duplicateCount + 1}` : name;\n        });\n};\n\n/**\n * 팀 수로 나누기: 전체 인원을 N개의 팀으로 나눕니다.\n */\nexport const divideByTeamCount = (\n    participants: string[], \n    teamCount: number,\n    teamNameTemplate: TeamNameTemplate = 'default'\n): Team[] => {\n    const shuffled = shuffleArray(participants);\n    const teams: Team[] = [];\n    const template = TEAM_NAME_TEMPLATES.find(t => t.id === teamNameTemplate) || TEAM_NAME_TEMPLATES[0];\n    \n    // 팀 초기화\n    for (let i = 0; i < teamCount; i++) {\n        teams.push({\n            id: `team-${i + 1}`,\n            name: template.getTeamName(i),\n            members: []\n        });\n    }\n    \n    // 참가자를 팀에 균등 배분 (나머지는 앞쪽 팀부터 한 명씩 추가)\n    shuffled.forEach((participant, index) => {\n        const teamIndex = index % teamCount;\n        teams[teamIndex].members.push(participant);\n    });\n    \n    return teams;\n};\n\n/**\n * 인원 수로 나누기: 한 팀에 N명씩 배치합니다.\n */\nexport const divideByMemberCount = (\n    participants: string[], \n    memberCount: number,\n    teamNameTemplate: TeamNameTemplate = 'default'\n): Team[] => {\n    const shuffled = shuffleArray(participants);\n    const teams: Team[] = [];\n    const template = TEAM_NAME_TEMPLATES.find(t => t.id === teamNameTemplate) || TEAM_NAME_TEMPLATES[0];\n    let teamIndex = 0;\n    \n    for (let i = 0; i < shuffled.length; i += memberCount) {\n        const members = shuffled.slice(i, i + memberCount);\n        teams.push({\n            id: `team-${teamIndex + 1}`,\n            name: template.getTeamName(teamIndex),\n            members\n        });\n        teamIndex++;\n    }\n    \n    return teams;\n};\n\n/**\n * 팀 결과를 텍스트 형식으로 변환합니다.\n */\nexport const formatTeamsAsText = (teams: Team[]): string => {\n    return teams\n        .map(team => `${team.name}:\\n${team.members.map(m => `  - ${m}`).join('\\n')}`)\n        .join('\\n\\n');\n};","import React, { useState } from 'react';\nimport './ShuffleButton.css';\n\ninterface ShuffleButtonProps {\n    onClick: () => void;\n    disabled: boolean;\n    participantCount: number;\n}\n\nexport const ShuffleButton: React.FC<ShuffleButtonProps> = ({ \n    onClick, \n    disabled, \n    participantCount \n}) => {\n    const [isShuffling, setIsShuffling] = useState(false);\n\n    const handleClick = async () => {\n        if (disabled || isShuffling) return;\n        \n        setIsShuffling(true);\n        \n        // 애니메이션 시간 확보\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        onClick();\n        \n        // 추가 애니메이션 시간\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        setIsShuffling(false);\n    };\n\n    return (\n        <button \n            className={`shuffle-button ${isShuffling ? 'shuffling' : ''}`}\n            disabled={disabled || isShuffling}\n            onClick={handleClick}\n        >\n            {isShuffling ? (\n                <>\n                    <span className=\"shuffle-spinner\"></span>\n                    <span>팀을 나누는 중...</span>\n                </>\n            ) : (\n                <>\n                    <span className=\"shuffle-icon\">🚀</span>\n                    <span>팀 나누기!</span>\n                </>\n            )}\n            \n            {/* 리플 효과를 위한 요소 */}\n            <span className=\"ripple\"></span>\n        </button>\n    );\n};","import React, { useState, useRef, useEffect } from 'react';\nimport './EditableTeamName.css';\n\ninterface EditableTeamNameProps {\n    teamName: string;\n    teamId: string;\n    onNameChange: (teamId: string, newName: string) => void;\n}\n\nexport const EditableTeamName: React.FC<EditableTeamNameProps> = ({\n    teamName,\n    teamId,\n    onNameChange\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editValue, setEditValue] = useState(teamName);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        setEditValue(teamName);\n    }, [teamName]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.focus();\n            inputRef.current.select();\n        }\n    }, [isEditing]);\n\n    const handleStartEdit = () => {\n        setIsEditing(true);\n        setEditValue(teamName);\n    };\n\n    const handleSave = () => {\n        if (editValue.trim() && editValue !== teamName) {\n            onNameChange(teamId, editValue.trim());\n        }\n        setIsEditing(false);\n    };\n\n    const handleCancel = () => {\n        setEditValue(teamName);\n        setIsEditing(false);\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            handleSave();\n        } else if (e.key === 'Escape') {\n            handleCancel();\n        }\n    };\n\n    if (isEditing) {\n        return (\n            <input\n                ref={inputRef}\n                className=\"team-name-input\"\n                type=\"text\"\n                value={editValue}\n                onChange={(e) => setEditValue(e.target.value)}\n                onBlur={handleSave}\n                onKeyDown={handleKeyDown}\n                maxLength={30}\n            />\n        );\n    }\n\n    return (\n        <h4 \n            className=\"team-name editable\"\n            onClick={handleStartEdit}\n            title=\"클릭하여 팀 이름 편집\"\n        >\n            {teamName}\n            <span className=\"edit-icon\">✏️</span>\n        </h4>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport './TeamCard.css';\nimport { Team } from '../utils';\nimport { EditableTeamName } from './EditableTeamName';\n\ninterface TeamCardProps {\n    team: Team;\n    index: number;\n    isNewShuffle?: boolean;\n    onTeamNameChange?: (teamId: string, newName: string) => void;\n}\n\nexport const TeamCard: React.FC<TeamCardProps> = ({ team, index, isNewShuffle = false, onTeamNameChange }) => {\n    const [isVisible, setIsVisible] = useState(false);\n    const [isFlipping, setIsFlipping] = useState(false);\n\n    useEffect(() => {\n        if (isNewShuffle) {\n            // 재셔플 시 플립 애니메이션\n            setIsFlipping(true);\n            setTimeout(() => {\n                setIsFlipping(false);\n            }, 600);\n        }\n        \n        // 초기 등장 애니메이션\n        const timer = setTimeout(() => {\n            setIsVisible(true);\n        }, index * 100);\n\n        return () => clearTimeout(timer);\n    }, [index, isNewShuffle]);\n\n    return (\n        <div \n            className={`team-card ${isVisible ? 'visible' : ''} ${isFlipping ? 'flipping' : ''}`}\n            style={{ '--team-index': index } as React.CSSProperties}\n        >\n            <div className=\"team-card-inner\">\n                <div className=\"team-card-front\">\n                    {onTeamNameChange ? (\n                        <EditableTeamName\n                            teamName={team.name}\n                            teamId={team.id}\n                            onNameChange={onTeamNameChange}\n                        />\n                    ) : (\n                        <h4 className=\"team-name\">{team.name}</h4>\n                    )}\n                    <ul className=\"team-members\">\n                        {team.members.map((member, memberIndex) => (\n                            <li \n                                key={memberIndex}\n                                className=\"team-member\"\n                                style={{ '--member-index': memberIndex } as React.CSSProperties}\n                            >\n                                {member}\n                            </li>\n                        ))}\n                    </ul>\n                    <div className=\"team-member-count\">\n                        총 {team.members.length}명\n                    </div>\n                </div>\n                <div className=\"team-card-back\">\n                    <div className=\"shuffle-animation\">\n                        🔄\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { useState, useRef, useEffect } from 'react';\nimport './TeamNameTemplateSelector.css';\nimport { TeamNameTemplate, TEAM_NAME_TEMPLATES } from '../constants';\n\ninterface TeamNameTemplateSelectorProps {\n    value: TeamNameTemplate;\n    onChange: (template: TeamNameTemplate) => void;\n}\n\nexport const TeamNameTemplateSelector: React.FC<TeamNameTemplateSelectorProps> = ({\n    value,\n    onChange\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showAdvanced, setShowAdvanced] = useState(false);\n    const dropdownRef = useRef<HTMLDivElement>(null);\n    \n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n                setIsOpen(false);\n            }\n        };\n        \n        if (isOpen) {\n            document.addEventListener('mousedown', handleClickOutside);\n        }\n        \n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [isOpen]);\n\n    const selectedTemplate = TEAM_NAME_TEMPLATES.find(t => t.id === value) || TEAM_NAME_TEMPLATES[0];\n\n    return (\n        <div className=\"team-name-template-selector\">\n            {!showAdvanced ? (\n                <button \n                    className=\"show-advanced-button\"\n                    onClick={() => setShowAdvanced(true)}\n                    type=\"button\"\n                >\n                    🎨 팀 이름 스타일 변경\n                </button>\n            ) : (\n                <>\n                    <div className=\"team-template-header\">\n                        <h3>팀 이름 스타일</h3>\n                        <button \n                            className=\"hide-advanced-button\"\n                            onClick={() => setShowAdvanced(false)}\n                            type=\"button\"\n                        >\n                            ✕\n                        </button>\n                    </div>\n                    \n                    <div className=\"team-template-dropdown\" ref={dropdownRef}>\n                        <button\n                            className=\"dropdown-toggle\"\n                            onClick={() => setIsOpen(!isOpen)}\n                            type=\"button\"\n                        >\n                            <span>{selectedTemplate.label}</span>\n                            <span className=\"dropdown-arrow\">{isOpen ? '▲' : '▼'}</span>\n                        </button>\n                        \n                        {isOpen && (\n                            <div className=\"dropdown-menu\">\n                                {/* 중복 제거된 템플릿만 표시 */}\n                                {TEAM_NAME_TEMPLATES.filter((template, index, self) => \n                                    index === self.findIndex(t => t.id === template.id)\n                                ).map(template => (\n                                    <button\n                                        key={template.id}\n                                        className={`dropdown-item ${value === template.id ? 'active' : ''}`}\n                                        onClick={() => {\n                                            onChange(template.id);\n                                            setIsOpen(false);\n                                        }}\n                                        type=\"button\"\n                                    >\n                                        <span className=\"template-label\">{template.label}</span>\n                                        <span className=\"template-preview\">\n                                            {[0, 1, 2].map(i => template.getTeamName(i)).join(', ')}...\n                                        </span>\n                                    </button>\n                                ))}\n                            </div>\n                        )}\n                    </div>\n                    \n                    <p className=\"team-template-hint\">\n                        💡 팀 이름을 클릭하면 직접 편집할 수 있습니다\n                    </p>\n                </>\n            )}\n        </div>\n    );\n};","import React, { useState, useMemo, useEffect } from 'react';\nimport './styles/TeamShuffle.css';\nimport { Team, parseParticipants, divideByTeamCount, divideByMemberCount, formatTeamsAsText } from './utils';\nimport { useTeamHistory } from './hooks';\nimport { ShuffleButton, TeamCard, TeamNameTemplateSelector } from './components';\nimport { TeamNameTemplate, TEAM_NAME_TEMPLATES } from './constants';\n\nconst TeamShuffle: React.FC = () => {\n    const [participants, setParticipants] = useState<string>('');\n    const [divisionMethod, setDivisionMethod] = useState<'byTeamCount' | 'byMemberCount'>('byTeamCount');\n    const [teamCount, setTeamCount] = useState<number>(2);\n    const [memberCount, setMemberCount] = useState<number>(3);\n    const [showResults, setShowResults] = useState(false);\n    const [isNewShuffle, setIsNewShuffle] = useState(false);\n    const [teamNameTemplate, setTeamNameTemplate] = useState<TeamNameTemplate>('default');\n    const [customTeamNames, setCustomTeamNames] = useState<Record<string, string>>({});\n    \n    const {\n        currentTeams,\n        history,\n        canUndo,\n        canRedo,\n        addToHistory,\n        undo,\n        redo,\n        clearHistory\n    } = useTeamHistory();\n    \n    // 참가자 수 계산 (빈 줄 제외)\n    const participantCount = useMemo(() => {\n        if (!participants.trim()) return 0;\n        return participants\n            .split('\\n')\n            .filter(line => line.trim().length > 0)\n            .length;\n    }, [participants]);\n    \n    // 팀 나누기 실행\n    const handleShuffle = () => {\n        const participantList = parseParticipants(participants);\n        \n        if (participantList.length < 2) return;\n        \n        let newTeams: Team[];\n        const divisionValue = divisionMethod === 'byTeamCount' ? teamCount : memberCount;\n        \n        if (divisionMethod === 'byTeamCount') {\n            newTeams = divideByTeamCount(participantList, teamCount, teamNameTemplate);\n        } else {\n            newTeams = divideByMemberCount(participantList, memberCount, teamNameTemplate);\n        }\n        \n        // 커스텀 팀 이름 적용\n        newTeams = newTeams.map(team => ({\n            ...team,\n            name: customTeamNames[team.id] || team.name\n        }));\n        \n        addToHistory(newTeams, divisionMethod, divisionValue);\n        setShowResults(true);\n        setIsNewShuffle(true);\n        \n        // 애니메이션 후 플래그 리셋\n        setTimeout(() => setIsNewShuffle(false), 700);\n    };\n    \n    const handleReshuffle = () => {\n        handleShuffle();\n    };\n    \n    // 결과 복사\n    const handleCopyResults = () => {\n        if (!currentTeams) return;\n        \n        const text = formatTeamsAsText(currentTeams);\n        navigator.clipboard.writeText(text).then(() => {\n            // 복사 성공 피드백을 위해 잘시 버튼 텍스트 변경\n            const button = document.querySelector('.copy-button');\n            if (button) {\n                button.textContent = '✓ 복사 완료!';\n                setTimeout(() => {\n                    button.textContent = '📋 결과 복사';\n                }, 2000);\n            }\n        });\n    };\n    \n    // 히스토리 업데이트 시 표시 상태 업데이트\n    useEffect(() => {\n        if (currentTeams && currentTeams.length > 0) {\n            setShowResults(true);\n        }\n    }, [currentTeams]);\n    \n    // 전체 초기화\n    const handleReset = () => {\n        setParticipants('');\n        setDivisionMethod('byTeamCount');\n        setTeamCount(2);\n        setMemberCount(3);\n        setShowResults(false);\n        setIsNewShuffle(false);\n        setTeamNameTemplate('default');\n        setCustomTeamNames({});\n        clearHistory();\n    };\n    \n    // 팀 이름 변경 핸들러\n    const handleTeamNameChange = (teamId: string, newName: string) => {\n        setCustomTeamNames(prev => ({\n            ...prev,\n            [teamId]: newName\n        }));\n        \n        // 현재 표시된 팀들의 이름 업데이트\n        if (currentTeams) {\n            const updatedTeams = currentTeams.map(team => \n                team.id === teamId ? { ...team, name: newName } : team\n            );\n            // 히스토리에 반영하지 않고 현재 표시만 업데이트\n        }\n    };\n    return (\n        <div className=\"team-shuffle\">\n            <div className=\"team-shuffle-container\">\n                <div className=\"team-shuffle-header\">\n                    <h1>팀 셔플</h1>\n                    <p>클릭 몇 번으로 간편하고 공정하게 팀을 나눠보세요</p>\n                </div>\n                \n                <div className=\"team-shuffle-content\">\n                    {/* 왼쪽: 입력 영역 */}\n                    <div className=\"input-section\">\n                        <h2>참가자 명단을 입력하세요</h2>\n                        <textarea\n                            className=\"participant-input\"\n                            placeholder=\"한 줄에 한 명씩, 이름만 입력해주세요\"\n                            value={participants}\n                            onChange={(e) => setParticipants(e.target.value)}\n                            rows={15}\n                        />\n                        <div className=\"participant-counter\">\n                            총 <span className=\"count-number\">{participantCount}</span>명\n                        </div>\n                    </div>\n                    \n                    {/* 오른쪽: 설정 및 결과 영역 */}\n                    <div className=\"settings-results-section\">\n                        <h2>팀 나누기 설정</h2>\n                        \n                        {/* 팀 나누기 방식 선택 */}\n                        <div className=\"division-method\">\n                            <div className=\"method-option\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        name=\"divisionMethod\"\n                                        value=\"byTeamCount\"\n                                        checked={divisionMethod === 'byTeamCount'}\n                                        onChange={(e) => setDivisionMethod(e.target.value as 'byTeamCount')}\n                                    />\n                                    <span>팀 개수로 나누기</span>\n                                </label>\n                                <div className=\"method-input\">\n                                    <input\n                                        type=\"number\"\n                                        min=\"2\"\n                                        max=\"20\"\n                                        value={teamCount}\n                                        onChange={(e) => setTeamCount(Math.max(2, Math.min(20, parseInt(e.target.value) || 2)))}\n                                        disabled={divisionMethod !== 'byTeamCount'}\n                                    />\n                                    <span>개 팀으로</span>\n                                </div>\n                            </div>\n                            \n                            <div className=\"method-option\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        name=\"divisionMethod\"\n                                        value=\"byMemberCount\"\n                                        checked={divisionMethod === 'byMemberCount'}\n                                        onChange={(e) => setDivisionMethod(e.target.value as 'byMemberCount')}\n                                    />\n                                    <span>한 팀에 N명씩</span>\n                                </label>\n                                <div className=\"method-input\">\n                                    <input\n                                        type=\"number\"\n                                        min=\"2\"\n                                        max=\"20\"\n                                        value={memberCount}\n                                        onChange={(e) => setMemberCount(Math.max(2, Math.min(20, parseInt(e.target.value) || 2)))}\n                                        disabled={divisionMethod !== 'byMemberCount'}\n                                    />\n                                    <span>명씩</span>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        {/* 팀 이름 템플릿 선택 */}\n                        <TeamNameTemplateSelector\n                            value={teamNameTemplate}\n                            onChange={setTeamNameTemplate}\n                        />\n                        \n                        {/* 팀 나누기 버튼 */}\n                        <ShuffleButton\n                            onClick={handleShuffle}\n                            disabled={participantCount < 2}\n                            participantCount={participantCount}\n                        />\n                        \n                        {/* 결과 표시 영역 */}\n                        {showResults && currentTeams && currentTeams.length > 0 && (\n                            <div className=\"results-section\">\n                                <div className=\"results-header\">\n                                    <h3>팀 나누기 결과</h3>\n                                    <div className=\"action-buttons\">\n                                        <button \n                                            className=\"action-button undo-button\"\n                                            onClick={undo}\n                                            disabled={!canUndo}\n                                            title=\"이전 결과로 돌아가기\"\n                                        >\n                                            ↩ 실행 취소\n                                        </button>\n                                        <button \n                                            className=\"action-button redo-button\"\n                                            onClick={redo}\n                                            disabled={!canRedo}\n                                            title=\"다시 실행\"\n                                        >\n                                            ↪ 다시 실행\n                                        </button>\n                                        <button \n                                            className=\"action-button reshuffle-button\"\n                                            onClick={handleReshuffle}\n                                        >\n                                            🔄 다시 섞기\n                                        </button>\n                                        <button \n                                            className=\"action-button copy-button\"\n                                            onClick={handleCopyResults}\n                                        >\n                                            📋 결과 복사\n                                        </button>\n                                        <button \n                                            className=\"action-button reset-button\"\n                                            onClick={handleReset}\n                                            title=\"모든 내용을 초기화합니다\"\n                                        >\n                                            🗑️ 초기화\n                                        </button>\n                                    </div>\n                                </div>\n                                \n                                {/* 히스토리 인디케이터 */}\n                                {history.length > 1 && (\n                                    <div className=\"history-indicator\">\n                                        히스토리: {history.findIndex(h => h.teams === currentTeams) + 1} / {history.length}\n                                    </div>\n                                )}\n                                \n                                <div className=\"teams-grid\">\n                                    {currentTeams.map((team, index) => (\n                                        <TeamCard\n                                            key={team.id}\n                                            team={team}\n                                            index={index}\n                                            isNewShuffle={isNewShuffle}\n                                            onTeamNameChange={handleTeamNameChange}\n                                        />\n                                    ))}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TeamShuffle;","import { useState, useCallback } from 'react';\nimport { Team } from '../utils';\n\ninterface HistoryEntry {\n    teams: Team[];\n    timestamp: Date;\n    divisionMethod: 'byTeamCount' | 'byMemberCount';\n    divisionValue: number;\n}\n\ninterface UseTeamHistoryReturn {\n    currentTeams: Team[] | null;\n    history: HistoryEntry[];\n    canUndo: boolean;\n    canRedo: boolean;\n    addToHistory: (teams: Team[], divisionMethod: 'byTeamCount' | 'byMemberCount', divisionValue: number) => void;\n    undo: () => void;\n    redo: () => void;\n    clearHistory: () => void;\n}\n\nconst MAX_HISTORY_SIZE = 10;\n\nexport const useTeamHistory = (): UseTeamHistoryReturn => {\n    const [history, setHistory] = useState<HistoryEntry[]>([]);\n    const [currentIndex, setCurrentIndex] = useState<number>(-1);\n\n    const currentTeams = currentIndex >= 0 ? history[currentIndex]?.teams || null : null;\n    const canUndo = currentIndex > 0;\n    const canRedo = currentIndex < history.length - 1;\n\n    const addToHistory = useCallback((\n        teams: Team[], \n        divisionMethod: 'byTeamCount' | 'byMemberCount', \n        divisionValue: number\n    ) => {\n        const newEntry: HistoryEntry = {\n            teams,\n            timestamp: new Date(),\n            divisionMethod,\n            divisionValue\n        };\n\n        setHistory(prev => {\n            // 현재 인덱스 이후의 히스토리는 제거 (새로운 분기 생성)\n            const newHistory = prev.slice(0, currentIndex + 1);\n            newHistory.push(newEntry);\n            \n            // 최대 히스토리 크기 유지\n            if (newHistory.length > MAX_HISTORY_SIZE) {\n                return newHistory.slice(newHistory.length - MAX_HISTORY_SIZE);\n            }\n            \n            return newHistory;\n        });\n        \n        setCurrentIndex(prev => Math.min(prev + 1, MAX_HISTORY_SIZE - 1));\n    }, [currentIndex]);\n\n    const undo = useCallback(() => {\n        if (canUndo) {\n            setCurrentIndex(prev => prev - 1);\n        }\n    }, [canUndo]);\n\n    const redo = useCallback(() => {\n        if (canRedo) {\n            setCurrentIndex(prev => prev + 1);\n        }\n    }, [canRedo]);\n\n    const clearHistory = useCallback(() => {\n        setHistory([]);\n        setCurrentIndex(-1);\n    }, []);\n\n    return {\n        currentTeams,\n        history,\n        canUndo,\n        canRedo,\n        addToHistory,\n        undo,\n        redo,\n        clearHistory\n    };\n};"],"names":["TEAM_NAME_TEMPLATES","id","label","getTeamName","index","concat","notes","length","seasons","shuffleArray","array","shuffled","i","j","Math","floor","random","ShuffleButton","_ref","onClick","disabled","participantCount","isShuffling","setIsShuffling","useState","_jsxs","className","async","Promise","resolve","setTimeout","children","_Fragment","_jsx","EditableTeamName","teamName","teamId","onNameChange","isEditing","setIsEditing","editValue","setEditValue","inputRef","useRef","useEffect","current","focus","select","handleSave","trim","handleKeyDown","e","key","ref","type","value","onChange","target","onBlur","onKeyDown","maxLength","handleStartEdit","title","TeamCard","team","isNewShuffle","onTeamNameChange","isVisible","setIsVisible","isFlipping","setIsFlipping","timer","clearTimeout","style","name","members","map","member","memberIndex","TeamNameTemplateSelector","isOpen","setIsOpen","showAdvanced","setShowAdvanced","dropdownRef","handleClickOutside","event","contains","document","addEventListener","removeEventListener","selectedTemplate","find","t","filter","template","self","findIndex","join","TeamShuffle","participants","setParticipants","divisionMethod","setDivisionMethod","teamCount","setTeamCount","memberCount","setMemberCount","showResults","setShowResults","setIsNewShuffle","teamNameTemplate","setTeamNameTemplate","customTeamNames","setCustomTeamNames","currentTeams","history","canUndo","canRedo","addToHistory","undo","redo","clearHistory","useTeamHistory","_history$currentIndex","setHistory","currentIndex","setCurrentIndex","teams","useCallback","divisionValue","newEntry","timestamp","Date","prev","newHistory","slice","push","min","MAX_HISTORY_SIZE","useMemo","split","line","handleShuffle","participantList","duplicateCount","n","newTeams","arguments","undefined","forEach","participant","divideByTeamCount","teamIndex","divideByMemberCount","_objectSpread","handleTeamNameChange","newName","placeholder","rows","checked","max","parseInt","handleReshuffle","handleCopyResults","text","m","navigator","clipboard","writeText","then","button","querySelector","textContent","handleReset","h"],"sourceRoot":""}